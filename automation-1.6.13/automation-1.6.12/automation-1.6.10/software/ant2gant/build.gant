target ( 'build-bda-template.static-analysis:bda-blueprints-webapp' : 'Calls static-analysis target for sub-project' ) {
  depends ( 'init' )
  ant ( 'inheritRefs' : 'false' , 'dir' : '${bda-blueprints-webapp.base.dir}' , 'antfile' : '${bda-blueprints-webapp.build.file}' , 'target' : 'static-analysis' , 'inheritAll' : 'false' ) {
    property ( 'name' : 'dist.dir' , 'value' : '${bda-blueprints-webapp.dist.dir}' )
  }
}
target ( 'build-bda-template.validate:pre:build' : '' ) {
  validate-pre-build
}
target ( 'build-bda-template.deploy:local:install' : 'Installs and configures the application and required binaries and re-creates the datbase  on the local machine. Used for developer desktops and ci environments.' ) {
  depends ( 'build:all' , 'dist:installer:prep' )
  deploy-local ( 'target.name' : '${install.target}' )
}
target ( 'build-bda-template.database:gencl' : 'Upgrades database using BDA Datbase Upgrade process.' ) {
  depends ( 'database:prep' )
  if ( ! ( exclude.database ) ) {
    database-genchangelog ( 'database.changelog.file' : '${target.dir}/generated-change-log.xml' )
  }
}
target ( 'dist:upgrader' : 'Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations' ) {
  depends ( 'dist:upgrader:prep' )
  delete ( 'file' : '${dist.dir}/${bda-blueprints-webapp.upgrade.zip.file}' )
  copy ( 'todir' : '${dist.exploded.dir}' , 'overwrite' : 'true' ) {
    fileset ( 'dir' : '${build.dir}' ) {
      include ( 'name' : 'upgrade.properties' )
    }
  }
  delete ( 'file' : '${dist.exploded.dir}/install.properties' )
  replaceregexp ( 'match' : '^(env.name)=.*' , 'replace' : '\1=external' , 'byline' : 'true' , 'file' : '${dist.exploded.dir}/upgrade.properties' )
  obfuscate-properties-file ( 'required.property.list' : 'application.base.path,jboss.home,jboss.server.name,tomcat.home' , 'comment.property.list' : 'application.base.path.windows,application.base.path.linux,jboss.relative.path,tomcat.relative.path' , 'properties.file' : '${dist.exploded.dir}/upgrade.properties' , 'uncomment.property.list' : 'application.base.path,tomcat.home,jboss.home' , 'optional.property.list' : '' , 'delete.property.list' : '' )
  replaceregexp ( 'match' : '(<property name="properties.file"\s+value=").*("\s*\/>)' , 'replace' : '\1upgrade.properties\2' , 'byline' : 'true' , 'file' : '${dist.exploded.dir}/build.xml' )
  zip ( 'basedir' : '${dist.exploded.dir}' , 'destfile' : '${dist.dir}/${bda-blueprints-webapp.upgrade.zip.file}' )
}
target ( 'deploy:remote:upgrade:tomcat' : '' ) {
  depends ( 'build:all' , 'dist:upgrade:tier:tomcat' )
  deploy-files ( 'ssh.host' : '${tomcat.ssh.server.hostname}' , 'remote.directory.property.name' : 'tomcat.ssh.dir.temp' , 'ssh.user' : '${tomcat.ssh.server.username}' , 'dist.file' : '${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-tomcat.zip' )
  remote-ssh ( 'remotesshcommand' : '. .bash_profile;cd ${tomcat.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true -Dexclude.jboss=true -Dexclude.database=true upgrade:tomcat' )
}
target ( 'deploy:remote:upgrade:db' : '' ) {
  depends ( 'build:all' , 'dist:upgrade:tier:db' )
  deploy-files ( 'ssh.host' : '${db.ssh.server.hostname}' , 'remote.directory.property.name' : 'db.ssh.dir.temp' , 'ssh.user' : '${db.ssh.server.username}' , 'dist.file' : '${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-db.zip' )
  remote-ssh ( 'remotesshcommand' : '. .bash_profile;cd ${db.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true -Dexclude.jboss=true -Dexclude.tomcat=true upgrade:database' )
}
target ( 'build-bda-template.dist:tools:retrieve:jbosscp' : 'Downloads JBOSS Cumulative Patch from binary repository and verifies checksum' ) {
  if ( ! ( jbosscp.tools.exists ) ) {
    echoproperties ( 'prefix' : 'jbosscp' )
    if {
      isset ( 'property' : 'jbosscp.src.url' )
      then {
        get ( 'dest' : '${jbosscp.dest.file}' , 'src' : '${jbosscp.src.url}' )
      }
      else {
        echo ( 'message' : 'jbosscp.src.url not set skipping download of jboss cumulative patch' )
      }
    }
  }
}
target ( 'dist' : 'Makes all distributions: installer, upgrader and source' ) {
  depends ( 'build:all' , 'dist:installer' , 'dist:upgrader' , 'dist:src' , 'dist:gui-installer' )
}
target ( 'build-bda-template.report:ivy' : 'Runs ivy reports on all dependencies in the ivy defnintion file, also produces dependency diagrams' ) {
  depends ( 'ivy-resolve-all' )
  property ( 'name' : 'ivy.report.dir' , 'value' : '${reports.dir}/ivy' )
  delete ( 'dir' : '${ivy.report.dir}' )
  mkdir ( 'dir' : '${ivy.report.dir}' )
  ivy:report ( 'dot' : 'true' , 'outputpattern' : 'target/reports/ivy/[organisation]-[module]-[conf].[ext]' , 'graph' : 'false' )
  util-dot-on-dir ( 'dot-file.dir' : 'target/reports/ivy' )
}
target ( 'build-bda-template.init:ivy' : 'Initializes ivy-repo.based on ivy definition file and ivy settings file' ) {
  mkdir ( 'dir' : '${local.repo.dir}' )
  property ( 'name' : 'ivy.dep.file' , 'value' : '${ivy.settings.dir}/ivy-test.xml' )
  ivy:settings ( 'file' : '${ivy.settings.dir}/ivy.settings.xml' )
}
target ( 'build-bda-template.dist:tools:retrieve:tomcat' : 'Downloads TOMCAT from binary repository and verifies checksum' ) {
  if ( ! ( tomcat.tools.exists ) ) {
    get ( 'dest' : '${tomcat.dest.file}' , 'src' : '${tomcat.src.url}' )
    get ( 'dest' : '${tomcat.dest.file}.MD5' , 'src' : '${tomcat.src.url}.MD5' )
    checksum ( 'file' : '${tomcat.dest.file}' , 'verifyProperty' : 'tomcat.cksum.ok' )
    if {
      equals ( 'arg2' : 'true' , 'arg1' : '${tomcat.cksum.ok}' )
      then {
        echo ( 'message' : 'Downloaded tomcat sucessfully' )
      }
      else {
        fail ( 'message' : 'Failed to download tomcat file sucessfully.' )
      }
    }
  }
}
target ( 'build-bda-template.deploy:remote:upgrade:db' : '' ) {
  depends ( 'build:all' , 'dist:upgrade:tier:db' )
  deploy-files ( 'ssh.host' : '${db.ssh.server.hostname}' , 'remote.directory.property.name' : 'db.ssh.dir.temp' , 'ssh.user' : '${db.ssh.server.username}' , 'dist.file' : '${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-db.zip' )
  remote-ssh ( 'remotesshcommand' : '. .bash_profile;cd ${db.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true -Dexclude.jboss=true -Dexclude.tomcat=true upgrade:database' )
}
target ( 'maven-build:bda-blueprints-webapp' : '' ) {
  depends ( 'init' , 'maven-build:bda-blueprints-api' )
  delete {
    fileset ( 'dir' : '${bda-blueprints-webapp.base.dir}' ) {
      include ( 'name' : '**/profiles.xml' )
    }
  }
  copy ( 'todir' : '${bda-blueprints-webapp-ear.base.dir}' , 'overwrite' : 'true' , 'file' : '${common.dir}/maven/profiles.xml' ) {
    filterset {
      filter ( 'token' : 'jboss.home' , 'value' : '${local.jboss.home}' )
      filter ( 'token' : 'db.bda-blueprints-webapp.file.name' , 'value' : '${db.bda-blueprints-webapp.create-schema.file}' )
      filter ( 'token' : 'db.bda-blueprints-webapp.generate.drop' , 'value' : 'false' )
      filter ( 'token' : 'db.bda-blueprints-webapp.generate.create' , 'value' : 'true' )
    }
  }
  copy ( 'todir' : '${bda-blueprints-webapp-services.base.dir}' , 'overwrite' : 'true' , 'file' : '${common.dir}/maven/profiles.xml' ) {
    filterset {
      filter ( 'token' : 'jboss.home' , 'value' : '${local.jboss.home}' )
      filter ( 'token' : 'db.bda-blueprints-webapp.file.name' , 'value' : '${db.bda-blueprints-webapp.create-schema.file}' )
      filter ( 'token' : 'db.bda-blueprints-webapp.generate.drop' , 'value' : 'false' )
      filter ( 'token' : 'db.bda-blueprints-webapp.generate.create' , 'value' : 'true' )
    }
  }
  maven ( 'maven.profile.list' : '-P ${bda-blueprints-webapp.maven.profile.list}' , 'maven.dir' : '${bda-blueprints-webapp.base.dir}' , 'maven.goal.list' : '${bda-blueprints-webapp.maven.goal.list}' )
  copy ( 'todir' : '${bda-blueprints-webapp-ear.dist.dir}' , 'file' : '${bda-blueprints-webapp-ear.base.dir}/target/bda-blueprints-webapp.ear' )
  copy ( 'todir' : '${db-install.dist.dir}/bda-blueprints-webapp' , 'overwrite' : 'true' ) {
    fileset ( 'dir' : '${db-install-dynamic.src.dir}' ) {
      include ( 'name' : '**/*' )
    }
  }
}
target ( 'build-bda-template.dist:tools:retrieve:jboss-bindings' : 'Downloads JBOSS bindings filefrom binary repository and verifies checksum' ) {
  get ( 'dest' : '${dist.exploded.dir}/${jboss-bindings.file}' , 'src' : '${jboss-bindings.src.url}' )
}
target ( 'dist:tools:retrieve:cagrid' : 'Downloads JBOSS from binary repository and verifies checksum' ) {
  if ( ! ( cagrid-libs.tools.exists ) ) {
    get ( 'dest' : '${cagrid-libs.dest.file}' , 'src' : '${cagrid-libs.src.url}' )
    get ( 'dest' : '${cagrid-base-war.dest.file}' , 'src' : '${cagrid-base-war.src.url}' )
  }
}
target ( 'build-bda-template.maven-build:bda-blueprints-webapp' : '' ) {
  depends ( 'init' , 'maven-build:bda-blueprints-api' )
  delete {
    fileset ( 'dir' : '${bda-blueprints-webapp.base.dir}' ) {
      include ( 'name' : '**/profiles.xml' )
    }
  }
  copy ( 'todir' : '${bda-blueprints-webapp-ear.base.dir}' , 'overwrite' : 'true' , 'file' : '${common.dir}/maven/profiles.xml' ) {
    filterset {
      filter ( 'token' : 'jboss.home' , 'value' : '${local.jboss.home}' )
      filter ( 'token' : 'db.bda-blueprints-webapp.file.name' , 'value' : '${db.bda-blueprints-webapp.create-schema.file}' )
      filter ( 'token' : 'db.bda-blueprints-webapp.generate.drop' , 'value' : 'false' )
      filter ( 'token' : 'db.bda-blueprints-webapp.generate.create' , 'value' : 'true' )
    }
  }
  copy ( 'todir' : '${bda-blueprints-webapp-services.base.dir}' , 'overwrite' : 'true' , 'file' : '${common.dir}/maven/profiles.xml' ) {
    filterset {
      filter ( 'token' : 'jboss.home' , 'value' : '${local.jboss.home}' )
      filter ( 'token' : 'db.bda-blueprints-webapp.file.name' , 'value' : '${db.bda-blueprints-webapp.create-schema.file}' )
      filter ( 'token' : 'db.bda-blueprints-webapp.generate.drop' , 'value' : 'false' )
      filter ( 'token' : 'db.bda-blueprints-webapp.generate.create' , 'value' : 'true' )
    }
  }
  maven ( 'maven.profile.list' : '-P ${bda-blueprints-webapp.maven.profile.list}' , 'maven.dir' : '${bda-blueprints-webapp.base.dir}' , 'maven.goal.list' : '${bda-blueprints-webapp.maven.goal.list}' )
  copy ( 'todir' : '${bda-blueprints-webapp-ear.dist.dir}' , 'file' : '${bda-blueprints-webapp-ear.base.dir}/target/bda-blueprints-webapp.ear' )
  copy ( 'todir' : '${db-install.dist.dir}/bda-blueprints-webapp' , 'overwrite' : 'true' ) {
    fileset ( 'dir' : '${db-install-dynamic.src.dir}' ) {
      include ( 'name' : '**/*' )
    }
  }
}
target ( 'build-bda-template.dist' : 'Makes all distributions: installer, upgrader and source' ) {
  depends ( 'build:all' , 'dist:installer' , 'dist:upgrader' , 'dist:src' , 'dist:gui-installer' )
}
target ( 'dist:upgrade:tier:db' : '' ) {
  depends ( 'dist:installer:prep' )
  delete ( 'file' : '${dist.dir}/${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-db.zip' )
  zip ( 'destfile' : '${dist.dir}/${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-db.zip' ) {
    zipfileset ( 'dir' : '${db-install.dist.dir}' , 'prefix' : '${db-install.dist.relative.dir}' )
    zipfileset ( 'dir' : '${db-upgrade.dist.dir}' , 'prefix' : '${db-upgrade.dist.relative.dir}' )
    zipfileset ( 'dir' : '${bda-utils.dir}' , 'prefix' : 'bda-utils' )
    zipfileset ( 'dir' : '${dist.exploded.dir}' ) {
      include ( 'name' : 'build.xml' )
      include ( 'name' : 'install.properties' )
      include ( 'name' : 'properties.template' )
      include ( 'name' : 'project.properties' )
    }
  }
}
target ( 'dist:upgrader:prep' : 'Copies artifacts not generated by sub-project builds into the install distribution area' ) {
  depends ( 'build:all' , 'dist:tools:retrieve' )
  copy ( 'todir' : '${db-upgrade.dist.dir}' , 'overwrite' : 'true' ) {
    fileset ( 'dir' : '${db-upgrade.src.dir}' ) {
      include ( 'name' : '**/*' )
    }
  }
  dist-prep ( 'copy.tools.flag' : 'Y' , 'default.target' : 'upgrade' )
}
target ( 'build-bda-template.maven-test:all' : 'Runs test targets on all sub-projects' ) {
  depends ( 'init' )
  maven ( 'maven.profile.list' : '-P local' , 'maven.dir' : '${bda-blueprints-webapp.base.dir}' , 'maven.goal.list' : 'stie verify' )
}
target ( 'build:all' : 'Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions' ) {
  depends ( 'validate:pre:build' , 'clean' , 'init' , 'build:bda-blueprints-webapp' , 'build:grid' )
}
target ( 'build-bda-template.deploy:remote:upgrade:jboss' : '' ) {
  depends ( 'build:all' , 'dist:upgrade:tier:jboss' )
  deploy-files ( 'ssh.host' : '${jboss.ssh.server.hostname}' , 'remote.directory.property.name' : 'jboss.ssh.dir.temp' , 'ssh.user' : '${jboss.ssh.server.username}' , 'dist.file' : '${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-jboss.zip' )
  remote-ssh ( 'remotesshcommand' : '. .bash_profile;cd ${jboss.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true -Dexclude.tomcat=true -Dexclude.database=true upgrade:jboss' )
}
target ( 'report:grand' : 'Generates target flow diagrams for build files' ) {
  depends ( 'dist:installer:prep' )
  report-grand ( 'output.file.dir' : '${grand.rpt.dir}' , 'build.file.location' : 'build.xml' , 'output.file.name' : 'generic-root-build.xml' )
  report-grand ( 'output.file.dir' : '${grand.rpt.dir}' , 'build.file.location' : '${dist.exploded.dir}/build.xml' , 'output.file.name' : 'generic-root-install.xml' )
}
target ( 'test:bda-blueprints-api' : 'Calls test target for sub-project' ) {
  depends ( 'init' )
}
target ( 'test:bda-blueprints-webapp' : 'Calls test target for sub-project' ) {
  depends ( 'init' )
  ant ( 'inheritRefs' : 'false' , 'dir' : '${bda-blueprints-webapp.base.dir}' , 'antfile' : '${bda-blueprints-webapp.test.file}' , 'target' : 'test' , 'inheritAll' : 'false' ) {
    property ( 'name' : 'dist.dir' , 'value' : '${bda-blueprints-webapp.dist.dir}' )
  }
}
target ( 'build-bda-template.ivy:module:add2repo' : '' ) {
  mkdir ( 'dir' : '${user.home}/tmp' )
  ivy-module-add2repo ( 'ivy.add.module.src.file.list' : 'build.xml' , 'ivy.add.xml.src.location' : '${build.dir}/install.xml' , 'ivy.add.version' : '0.1.0' , 'ivy.add.org' : 'ncicb' , 'ivy.add.module.src.dir' : '${build.dir}' , 'ivy-repo.base.dir' : '${user.home}/tmp/ivy-repo' , 'ivy.add.module' : 'ssaksa-test-module3' )
}
target ( 'deploy:local:install' : 'Installs and configures the application and required binaries and re-creates the datbase  on the local machine. Used for developer desktops and ci environments.' ) {
  depends ( 'build:all' , 'dist:installer:prep' )
  deploy-local ( 'target.name' : '${install.target}' )
}
target ( 'build-bda-template.report:uml' : '' ) {
  property ( 'name' : 'uml.dir' , 'value' : '${reports.dir}/uml' )
  path ( 'id' : 'bda-blueprints.classpath.ref' ) {
    fileset ( 'dir' : '${lib.dir}/runtime' ) {
      include ( 'name' : '**/*.jar' )
    }
  }
  generate-uml ( 'uml.source.path' : 'bda-blueprints.classpath.ref' , 'src.java.dir' : '${bda-blueprints-webapp.base.dir}/src/java' , 'uml.dir' : '${uml.dir}' )
}
target ( 'build-bda-template.maven-build:bda-blueprints-api' : '' ) {
  depends ( 'init' )
  maven ( 'maven.profile.list' : '' , 'maven.dir' : '${iso-datatypes.base.dir}' , 'maven.goal.list' : '${iso-datatypes.maven.goal.list}' )
}
target ( 'build-bda-template.build:grid' : '' ) {
  copy ( 'todir' : '${grid-sample.dist.dir}' ) {
    fileset ( 'dir' : '${grid.base.dir}' ) {
      include ( 'name' : 'sample-wsrf-war.zip' )
    }
  }
}
target ( 'build-bda-template.test:all' : 'Runs test target for all sub-projects' ) {
  depends ( 'clean' , 'init' , 'test:bda-blueprints-api' , 'test:bda-blueprints-webapp' )
}
target ( 'database:doc' : 'Generates database documentation.' ) {
  depends ( 'database:prep' )
  if ( ! ( exclude.database ) ) {
    mkdir ( 'dir' : '${reports.dir}/db' )
    database-doc ( 'output.dir' : '${reports.dir}/db' , 'database.changelog.file' : '${working.dir}/db-upgrade/db-upgrade.xml' )
  }
}
target ( 'build-bda-template.report:grand' : 'Generates target flow diagrams for build files' ) {
  depends ( 'dist:installer:prep' )
  report-grand ( 'output.file.dir' : '${grand.rpt.dir}' , 'build.file.location' : 'build.xml' , 'output.file.name' : 'generic-root-build.xml' )
  report-grand ( 'output.file.dir' : '${grand.rpt.dir}' , 'build.file.location' : '${dist.exploded.dir}/build.xml' , 'output.file.name' : 'generic-root-install.xml' )
}
target ( 'dist:upgrade:tier' : '' ) {
  depends ( 'dist:upgrade:tier:db' , 'dist:upgrade:tier:tomcat' , 'dist:upgrade:tier:jboss' )
}
target ( 'validate:pre:build' : '' ) {
  validate-pre-build
}
target ( 'ivy-test-selenium' : 'Downloads selenium libraries from ivy into library directory' ) {
  depends ( 'init:ivy' )
  ivy:resolve ( 'conf' : 'test-selenium' , 'refresh' : 'true' )
  ivy:retrieve ( 'conf' : 'test-selenium' , 'pattern' : '${lib.dir}/[conf]/[artifact]-[revision].[ext]' )
  path ( 'id' : 'project.test.selenium.classpath' ) {
    fileset ( 'dir' : '${lib.dir}/test-selenium' ) {
      include ( 'name' : '*.jar' )
    }
  }
}
target ( 'build-bda-template.dist:upgrade:tier:jboss' : '' ) {
  depends ( 'dist:installer:prep' )
  delete ( 'file' : '${dist.dir}/${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-jboss.zip' )
  zip ( 'destfile' : '${dist.dir}/${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-jboss.zip' ) {
    zipfileset ( 'dir' : '${bda-blueprints-webapp.dist.dir}' , 'prefix' : '${bda-blueprints-webapp.dist.relative.dir}' )
    zipfileset ( 'dir' : '${grid-sample.dist.dir}' , 'prefix' : '${grid-sample.dist.relative.dir}' )
    zipfileset ( 'dir' : '${tools.dist.dir}' , 'prefix' : '${tools.dist.relative.dir}' ) {
      include ( 'name' : '*jboss*' )
    }
    zipfileset ( 'dir' : '${common.dist.dir}' , 'prefix' : '${common.dist.relative.dir}' )
    zipfileset ( 'dir' : '${bda-utils.dir}' , 'prefix' : 'bda-utils' )
    zipfileset ( 'dir' : '${dist.exploded.dir}' ) {
      include ( 'name' : 'build.xml' )
      include ( 'name' : 'install.properties' )
      include ( 'name' : 'properties.template' )
      include ( 'name' : 'project.properties' )
    }
  }
}
target ( 'build-bda-template.deploy:hot:jsp' : 'Copies all current JSP code to the deployed application for quick update' ) {
  for ( 'param' : 'toDir' ) {
    path {
      dirset ( 'dir' : '${jboss.deploy.dir}/../tmp/deploy' , 'includes' : 'tmp*${bda-blueprints-webapp.name}*' )
    }
    sequential {
      copy ( 'todir' : '@{toDir}' , 'overwrite' : 'true' ) {
        fileset ( 'dir' : '${bda-blueprints-webapp.src.dir}' ) {
          include ( 'name' : '**/*.jsp' )
          include ( 'name' : '**/*.jspf' )
          include ( 'name' : '**/*.css' )
          include ( 'name' : '**/*.js' )
          include ( 'name' : '**/*.jpg' )
          include ( 'name' : '**/*.gif' )
          include ( 'name' : '**/*.png' )
          include ( 'name' : '**/*.faces' )
          include ( 'name' : '**/*.tag' )
          include ( 'name' : '**/*.tagf' )
        }
      }
    }
  }
}
target ( 'deploy:remote:install' : 'Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)' ) {
  depends ( 'build:all' , 'dist:installer' )
  deploy-files ( 'dist.file' : '${bda-blueprints-webapp.install.zip.file}' )
  remote-ssh ( 'remotesshcommand' : '. .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${install.target}' )
}
target ( 'build-bda-template.dist:upgrader' : 'Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations' ) {
  depends ( 'dist:upgrader:prep' )
  delete ( 'file' : '${dist.dir}/${bda-blueprints-webapp.upgrade.zip.file}' )
  copy ( 'todir' : '${dist.exploded.dir}' , 'overwrite' : 'true' ) {
    fileset ( 'dir' : '${build.dir}' ) {
      include ( 'name' : 'upgrade.properties' )
    }
  }
  delete ( 'file' : '${dist.exploded.dir}/install.properties' )
  replaceregexp ( 'match' : '^(env.name)=.*' , 'replace' : '\1=external' , 'byline' : 'true' , 'file' : '${dist.exploded.dir}/upgrade.properties' )
  obfuscate-properties-file ( 'required.property.list' : 'application.base.path,jboss.home,jboss.server.name,tomcat.home' , 'comment.property.list' : 'application.base.path.windows,application.base.path.linux,jboss.relative.path,tomcat.relative.path' , 'properties.file' : '${dist.exploded.dir}/upgrade.properties' , 'uncomment.property.list' : 'application.base.path,tomcat.home,jboss.home' , 'optional.property.list' : '' , 'delete.property.list' : '' )
  replaceregexp ( 'match' : '(<property name="properties.file"\s+value=").*("\s*\/>)' , 'replace' : '\1upgrade.properties\2' , 'byline' : 'true' , 'file' : '${dist.exploded.dir}/build.xml' )
  zip ( 'basedir' : '${dist.exploded.dir}' , 'destfile' : '${dist.dir}/${bda-blueprints-webapp.upgrade.zip.file}' )
}
target ( 'init:ivy' : 'Initializes ivy-repo.based on ivy definition file and ivy settings file' ) {
  mkdir ( 'dir' : '${local.repo.dir}' )
  property ( 'name' : 'ivy.dep.file' , 'value' : '${ivy.settings.dir}/ivy-test.xml' )
  ivy:settings ( 'file' : '${ivy.settings.dir}/ivy.settings.xml' )
}
target ( 'build-bda-template.database:doc' : 'Generates database documentation.' ) {
  depends ( 'database:prep' )
  if ( ! ( exclude.database ) ) {
    mkdir ( 'dir' : '${reports.dir}/db' )
    database-doc ( 'output.dir' : '${reports.dir}/db' , 'database.changelog.file' : '${working.dir}/db-upgrade/db-upgrade.xml' )
  }
}
target ( 'build-bda-template.dist:tools:retrieve:cagrid' : 'Downloads JBOSS from binary repository and verifies checksum' ) {
  if ( ! ( cagrid-libs.tools.exists ) ) {
    get ( 'dest' : '${cagrid-libs.dest.file}' , 'src' : '${cagrid-libs.src.url}' )
    get ( 'dest' : '${cagrid-base-war.dest.file}' , 'src' : '${cagrid-base-war.src.url}' )
  }
}
target ( 'maven-build:bda-blueprints-api' : '' ) {
  depends ( 'init' )
  maven ( 'maven.profile.list' : '' , 'maven.dir' : '${iso-datatypes.base.dir}' , 'maven.goal.list' : '${iso-datatypes.maven.goal.list}' )
}
target ( 'dist:installer:prep' : 'Copies artifacts not generated by sub-project builds into the install distribution area' ) {
  depends ( 'build:all' , 'dist:tools:retrieve' , 'dist:tools:retrieve:jboss-bindings' )
  copy ( 'todir' : '${db-install.dist.dir}' , 'overwrite' : 'true' ) {
    fileset ( 'dir' : '${db-install.src.dir}' ) {
      include ( 'name' : '**/*' )
    }
  }
  copy ( 'todir' : '${db-upgrade.dist.dir}' , 'overwrite' : 'true' ) {
    fileset ( 'dir' : '${db-upgrade.src.dir}' ) {
      include ( 'name' : '**/*' )
    }
  }
  dist-prep
  copy ( 'todir' : '${tools.dist.dir}' ) {
    fileset ( 'dir' : '${download.dir}' ) {
      include ( 'name' : 'cagrid*' )
    }
  }
}
target ( 'build-bda-template.deploy:remote:upgrade' : 'Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)' ) {
  depends ( 'build:all' , 'dist:upgrader' )
  deploy-files ( 'dist.file' : '${bda-blueprints-webapp.upgrade.zip.file}' )
  remote-ssh ( 'remotesshcommand' : '. .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${upgrade.target}' )
}
target ( 'build-bda-template.dist:upgrade:tier:tomcat' : '' ) {
  depends ( 'dist:installer:prep' )
  delete ( 'file' : '${dist.dir}/${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-tomcat.zip' )
  zip ( 'destfile' : '${dist.dir}/${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-tomcat.zip' ) {
    zipfileset ( 'dir' : '${bda-blueprints-webapp.dist.dir}' , 'prefix' : '${bda-blueprints-webapp.dist.relative.dir}' )
    zipfileset ( 'dir' : '${grid-sample.dist.dir}' , 'prefix' : '${grid-sample.dist.relative.dir}' )
    zipfileset ( 'dir' : '${tools.dist.dir}' , 'prefix' : '${tools.dist.relative.dir}' ) {
      include ( 'name' : '*tomcat*' )
    }
    zipfileset ( 'dir' : '${common.dist.dir}' , 'prefix' : '${common.dist.relative.dir}' )
    zipfileset ( 'dir' : '${bda-utils.dir}' , 'prefix' : 'bda-utils' )
    zipfileset ( 'dir' : '${dist.exploded.dir}' ) {
      include ( 'name' : 'build.xml' )
      include ( 'name' : 'install.properties' )
      include ( 'name' : 'properties.template' )
      include ( 'name' : 'project.properties' )
    }
  }
}
target ( 'build-bda-template.usage' : 'Explains how to use this build script' ) {
  echo ( 'message' : 'To run a remote upgrade type: ant deploy:remote:upgrade -Dproperties.file=[path to environment proeprty file]' )
}
target ( 'build-bda-template.clean' : '' ) {
  delete ( 'dir' : '${dist.dir}' )
  delete ( 'dir' : '${temp.dir}' )
}
target ( 'report:erd' : '' ) {
  generate-erd ( 'schemaspy.jar' : 'schemaspy-3.1.1.jar' , 'database.driver.jar' : 'mysql-connector-java-5.0.5.jar' )
}
target ( 'build-bda-template.test:bda-blueprints-webapp' : 'Calls test target for sub-project' ) {
  depends ( 'init' )
  ant ( 'inheritRefs' : 'false' , 'dir' : '${bda-blueprints-webapp.base.dir}' , 'antfile' : '${bda-blueprints-webapp.test.file}' , 'target' : 'test' , 'inheritAll' : 'false' ) {
    property ( 'name' : 'dist.dir' , 'value' : '${bda-blueprints-webapp.dist.dir}' )
  }
}
target ( 'database:diff' : 'Upgrades database using BDA Datbase Upgrade process.' ) {
  depends ( 'database:prep' )
  if ( ! ( exclude.database ) ) {
    database-diff ( 'output.file.txt' : '${target.dir}/generated-diff-log.txt' , 'output.file.xml' : '${target.dir}/generated-diff-log.xml' )
  }
}
target ( 'build-bda-template.static-analysis:bda-blueprints-api' : 'Calls static-analysis target for sub-project' ) {
  depends ( 'init' )
}
target ( 'ivy:clean' : 'Cleans up the ivy cache of this project and all sub-projects' ) {
  ivy:settings ( 'file' : '${ivy.settings.dir}/${ivy.settings.file}' )
  ivy:cleancache
  ant ( 'inheritRefs' : 'false' , 'dir' : '${bda-download.dir}' , 'antfile' : 'bda-ivy-2.0.0-build.xml' , 'target' : 'ivy-cleancache' , 'inheritAll' : 'false' ) {
    property ( 'name' : 'bda-utils.dir' , 'value' : '${bda-utils.dir}' )
    property ( 'name' : 'lib.dir' , 'value' : '${lib.dir}' )
    property ( 'name' : 'software.dir' , 'value' : '${software.dir}' )
  }
}
target ( 'deploy:hot' : 'Hot deploys the deployment artifact' ) {
  depends ( 'build:all' )
  copy ( 'todir' : '${jboss.deploy.dir}' , 'file' : '${bda-blueprints-webapp.dist.dir}/${bda-blueprints-webapp.file.name}' )
}
target ( 'dist:upgrade:tier:tomcat' : '' ) {
  depends ( 'dist:installer:prep' )
  delete ( 'file' : '${dist.dir}/${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-tomcat.zip' )
  zip ( 'destfile' : '${dist.dir}/${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-tomcat.zip' ) {
    zipfileset ( 'dir' : '${bda-blueprints-webapp.dist.dir}' , 'prefix' : '${bda-blueprints-webapp.dist.relative.dir}' )
    zipfileset ( 'dir' : '${grid-sample.dist.dir}' , 'prefix' : '${grid-sample.dist.relative.dir}' )
    zipfileset ( 'dir' : '${tools.dist.dir}' , 'prefix' : '${tools.dist.relative.dir}' ) {
      include ( 'name' : '*tomcat*' )
    }
    zipfileset ( 'dir' : '${common.dist.dir}' , 'prefix' : '${common.dist.relative.dir}' )
    zipfileset ( 'dir' : '${bda-utils.dir}' , 'prefix' : 'bda-utils' )
    zipfileset ( 'dir' : '${dist.exploded.dir}' ) {
      include ( 'name' : 'build.xml' )
      include ( 'name' : 'install.properties' )
      include ( 'name' : 'properties.template' )
      include ( 'name' : 'project.properties' )
    }
  }
}
target ( 'build-bda-template.test:selenium:run' : 'Executes selenium test suite' ) {
  osfamily ( 'property' : 'os.family' )
  if {
    equals ( 'arg2' : 'unix' , 'arg1' : '${os.family}' )
    then {
      echo ( 'message' : 'To be able to selenium tests on Unix platforms you need to meet the following conditions.' )
      echo ( 'message' : 'You need to be logged in on the console running X (developer linux or mac workstation).' )
      echo ( 'message' : ' If you are running it from a server that does not have a console (like a CI server) you need to be running at runlevel 3, running and xframe buffer ('Xvfb :1 -screen 0 1024x768x24', should be setup on a CI server) and have your DISPLAY environment variable sto to match your frame buffer ('DISPLAY=:1.0', should be set in .bash_profile on CI server).' )
      fail ( 'message' : 'DISPLAY environment variable not set, please set it as outlined above and run again.' , 'unless' : 'env.DISPLAY' )
    }
  }
  taskdef ( 'classpathref' : 'project.test.selenium.classpath' , 'resource' : 'selenium-ant.properties' )
  selenese ( 'results' : '${selenium.report.dir}/${selenium.report.file}' , 'timeoutInSeconds' : '60' , 'suite' : '${selenium.test.suite}' , 'multiWindow' : 'falsE' , 'browser' : '${selenium.browser}' , 'port' : '${selenium.proxy.port}' , 'startURL' : '${selenium.url}' )
}
target ( 'build-bda-template.dist:installer' : 'Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations' ) {
  depends ( 'dist:installer:prep' )
  delete ( 'file' : '${dist.dir}/${bda-blueprints-webapp.install.zip.file}' )
  delete ( 'file' : '${dist.exploded.dir}/upgrade.properties' )
  replaceregexp ( 'match' : '^(env.name)=.*' , 'replace' : '\1=external' , 'byline' : 'true' , 'file' : '${dist.exploded.dir}/install.properties' )
  obfuscate-properties-file ( 'optional.property.list' : 'ldap.url,ldap.basedn' , 'required.property.list' : 'application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname' , 'delete.property.list' : 'exclude.jboss.backup' , 'properties.file' : '${dist.exploded.dir}/install.properties' )
  zip ( 'basedir' : '${dist.exploded.dir}' , 'destfile' : '${dist.dir}/${bda-blueprints-webapp.install.zip.file}' )
}
target ( 'build-bda-template.diagnostics' : 'diagnostics' ) {
  echoproperties
  diagnostics
}
target ( 'build-bda-template.dist:tools:retrieve' : 'Downloads binary applications from commonlibrary repository' ) {
  depends ( 'init' , 'dist:tools:retrieve:jboss' , 'dist:tools:retrieve:jbosscp' , 'dist:tools:retrieve:tomcat' , 'dist:tools:retrieve:cagrid' )
}
target ( 'report:ivy' : 'Runs ivy reports on all dependencies in the ivy defnintion file, also produces dependency diagrams' ) {
  depends ( 'ivy-resolve-all' )
  property ( 'name' : 'ivy.report.dir' , 'value' : '${reports.dir}/ivy' )
  delete ( 'dir' : '${ivy.report.dir}' )
  mkdir ( 'dir' : '${ivy.report.dir}' )
  ivy:report ( 'dot' : 'true' , 'outputpattern' : 'target/reports/ivy/[organisation]-[module]-[conf].[ext]' , 'graph' : 'false' )
  util-dot-on-dir ( 'dot-file.dir' : 'target/reports/ivy' )
}
target ( 'build-bda-template.deploy:remote:upgrade:tomcat' : '' ) {
  depends ( 'build:all' , 'dist:upgrade:tier:tomcat' )
  deploy-files ( 'ssh.host' : '${tomcat.ssh.server.hostname}' , 'remote.directory.property.name' : 'tomcat.ssh.dir.temp' , 'ssh.user' : '${tomcat.ssh.server.username}' , 'dist.file' : '${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-tomcat.zip' )
  remote-ssh ( 'remotesshcommand' : '. .bash_profile;cd ${tomcat.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true -Dexclude.jboss=true -Dexclude.database=true upgrade:tomcat' )
}
target ( 'test:selenium' : 'Wrapper target to selenium test suite' ) {
  depends ( 'ivy-test-selenium' , 'test:selenium:init' , 'test:selenium:run' , 'test:seleniumrc:stop' )
}
target ( 'database:prep' : 'Copies db files with filtering' ) {
  switch ( 'value' : '${database.type}' ) {
    case ( 'value' : 'oracle' ) {
      property ( 'name' : 'database.dialect' , 'value' : 'org.hibernate.dialect.OracleDialect' )
      property ( 'name' : 'database.driver.file' , 'value' : '${bda-utils.dir}/ojdbc14-10.2.0.4.0.jar' )
      property ( 'name' : 'database.driver' , 'value' : 'oracle.jdbc.driver.OracleDriver' )
      property ( 'name' : 'database.schema' , 'value' : '${database.name}' )
    }
    case ( 'value' : 'mysql' ) {
      property ( 'name' : 'database.dialect' , 'value' : 'org.hibernate.dialect.MySQLDialect' )
      property ( 'name' : 'database.driver.file' , 'value' : '${bda-utils.dir}/mysql-connector-java-5.0.8.jar' )
      property ( 'name' : 'database.driver' , 'value' : 'com.mysql.jdbc.Driver' )
      property ( 'name' : 'database.schema' , 'value' : '${database.name}' )
    }
    case ( 'value' : 'postgresql' ) {
      property ( 'name' : 'database.dialect' , 'value' : 'org.hibernate.dialect.PostgreSQLDialect' )
      property ( 'name' : 'database.driver.file' , 'value' : '${bda-utils.dir}/postgresql-jdbc3-8.3-604.jar' )
      property ( 'name' : 'database.driver' , 'value' : 'org.postgresql.Driver' )
      property ( 'name' : 'database.schema' , 'value' : 'public' )
    }
    default {
      fail ( 'message' : 'Invalid database type ${database.type}' )
    }
  }
  path ( 'id' : 'jdbc.driver.classpath' ) {
    pathelement ( 'location' : '${database.driver.file}' )
  }
  echoproperties ( 'prefix' : 'database' )
  copy ( 'todir' : '${working.dir}/' , 'overwrite' : 'true' , 'filtering' : 'true' ) {
    fileset ( 'dir' : '${db.src.dir}' ) {
      include ( 'name' : '**/db-upgrade/**/*' )
    }
    filterset {
      filtersfile ( 'file' : '${properties.file}' )
      filtersfile ( 'file' : 'project.properties' )
      filter ( 'token' : 'db-upgrade.run.dir' , 'value' : '${working.dir}/db-upgrade/${database.type}' )
    }
  }
}
target ( 'build-bda-template.build:all' : 'Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions' ) {
  depends ( 'validate:pre:build' , 'clean' , 'init' , 'build:bda-blueprints-webapp' , 'build:grid' )
}
target ( 'build-bda-template.static-analysis:all' : 'Runs static-analysis target for all sub-projects' ) {
  depends ( 'clean' , 'init' , 'static-analysis:bda-blueprints-api' , 'static-analysis:bda-blueprints-webapp' )
}
target ( 'build-bda-template.test:bda-blueprints-api' : 'Calls test target for sub-project' ) {
  depends ( 'init' )
}
target ( 'test:seleniumrc:start' : '' ) {
  echo ( 'message' : '${lib.dir}/test-selenium/selenium-server-0.9.0.jar' )
  java ( 'spawn' : 'true' , 'jar' : '${lib.dir}/test-selenium/selenium-server-0.9.0.jar' , 'fork' : 'true' )
}
target ( 'test:all' : 'Runs test target for all sub-projects' ) {
  depends ( 'clean' , 'init' , 'test:bda-blueprints-api' , 'test:bda-blueprints-webapp' )
}
target ( 'dist:tools:retrieve:jboss-bindings' : 'Downloads JBOSS bindings filefrom binary repository and verifies checksum' ) {
  get ( 'dest' : '${dist.exploded.dir}/${jboss-bindings.file}' , 'src' : '${jboss-bindings.src.url}' )
}
target ( 'ivy:module:add2repo' : '' ) {
  mkdir ( 'dir' : '${user.home}/tmp' )
  ivy-module-add2repo ( 'ivy.add.module.src.file.list' : 'build.xml' , 'ivy.add.xml.src.location' : '${build.dir}/install.xml' , 'ivy.add.version' : '0.1.0' , 'ivy.add.org' : 'ncicb' , 'ivy.add.module.src.dir' : '${build.dir}' , 'ivy-repo.base.dir' : '${user.home}/tmp/ivy-repo' , 'ivy.add.module' : 'ssaksa-test-module3' )
}
target ( 'build-bda-template.dist:gui-installer' : 'Makes Gui-Installer distribution' ) {
  delete {
    fileset ( 'dir' : '${dist.dir}' ) {
      include ( 'name' : '*.jar' )
    }
  }
  gui-installer-prep ( 'product.version' : '${bda-blueprints-webapp.version}' , 'product.name' : '${bda-blueprints-webapp.install.name}' )
  ant ( 'inheritRefs' : 'false' , 'dir' : '${build.dir}/gui-installer' , 'antfile' : 'install.xml' , 'target' : 'build:installer' , 'inheritAll' : 'false' ) {
    property ( 'name' : 'compile.jar.dir' , 'value' : '${target.dir}/izpack-4.3' )
  }
}
target ( 'database:gencl' : 'Upgrades database using BDA Datbase Upgrade process.' ) {
  depends ( 'database:prep' )
  if ( ! ( exclude.database ) ) {
    database-genchangelog ( 'database.changelog.file' : '${target.dir}/generated-change-log.xml' )
  }
}
target ( 'static-analysis:bda-blueprints-webapp' : 'Calls static-analysis target for sub-project' ) {
  depends ( 'init' )
  ant ( 'inheritRefs' : 'false' , 'dir' : '${bda-blueprints-webapp.base.dir}' , 'antfile' : '${bda-blueprints-webapp.build.file}' , 'target' : 'static-analysis' , 'inheritAll' : 'false' ) {
    property ( 'name' : 'dist.dir' , 'value' : '${bda-blueprints-webapp.dist.dir}' )
  }
}
target ( 'build-bda-template.dist:src' : 'Makes source distribution' ) {
}
target ( 'build-bda-template.deploy:remote:install' : 'Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)' ) {
  depends ( 'build:all' , 'dist:installer' )
  deploy-files ( 'dist.file' : '${bda-blueprints-webapp.install.zip.file}' )
  remote-ssh ( 'remotesshcommand' : '. .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${install.target}' )
}
target ( 'build-bda-template.maven-static-analysis:all' : 'Runs static-analysis target for all sub-projects' ) {
  depends ( 'maven-test:all' )
}
target ( 'diagnostics' : 'diagnostics' ) {
  echoproperties
  diagnostics
}
target ( 'report:uml' : '' ) {
  property ( 'name' : 'uml.dir' , 'value' : '${reports.dir}/uml' )
  path ( 'id' : 'bda-blueprints.classpath.ref' ) {
    fileset ( 'dir' : '${lib.dir}/runtime' ) {
      include ( 'name' : '**/*.jar' )
    }
  }
  generate-uml ( 'uml.source.path' : 'bda-blueprints.classpath.ref' , 'src.java.dir' : '${bda-blueprints-webapp.base.dir}/src/java' , 'uml.dir' : '${uml.dir}' )
}
target ( 'build-bda-template.continuous-integration' : 'calls wrapper targets for continuous integration build' ) {
  depends ( 'build:all' , 'static-analysis:all' )
}
target ( 'init' : 'Sets up build are and initalizes variables' ) {
  echo ( 'message' : ' ______   ______   _______ ' )
  echo ( 'message' : '(____  \ (______) (_______)' )
  echo ( 'message' : ' ____)  ) _     _  _______ ' )
  echo ( 'message' : '|  __  ( | |   | ||  ___  |' )
  echo ( 'message' : '| |__)  )| |__/ / | |   | |' )
  echo ( 'message' : '|______/ |_____/  |_|   |_|' )
  mkdir ( 'dir' : '${target.dir}' )
  mkdir ( 'dir' : '${dist.dir}' )
  mkdir ( 'dir' : '${dist.exploded.dir}' )
  mkdir ( 'dir' : '${bda-blueprints-api.dist.dir}' )
  mkdir ( 'dir' : '${bda-blueprints-webapp.dist.dir}' )
  mkdir ( 'dir' : '${grid-sample.dist.dir}' )
  mkdir ( 'dir' : '${common.dist.dir}' )
  mkdir ( 'dir' : '${tools.dist.dir}' )
  mkdir ( 'dir' : '${temp.dir}' )
  mkdir ( 'dir' : '${download.dir}' )
  mkdir ( 'dir' : '${pt.dir}' )
  available ( 'file' : '${jboss.dest.file}' , 'property' : 'jboss.tools.exists' )
  available ( 'file' : '${jbosscp.dest.file}' , 'property' : 'jbosscp.tools.exists' )
  available ( 'file' : '${tomcat.dest.file}' , 'property' : 'tomcat.tools.exists' )
  available ( 'file' : '${cagrid-libs.dest.file}' , 'property' : 'cagrid-libs.tools.exists' )
  available ( 'file' : '${cagrid-base-war.dest.file}' , 'property' : 'cagrid-base-war.tools.exists' )
  if {
    equals ( 'arg2' : 'true' , 'arg1' : '${require.jboss}' )
    then {
      available ( 'file' : '${jboss.home}/lib/commons-httpclient.jar' , 'property' : 'rt.jboss.exists' )
      if {
        isset ( 'property' : 'rt.jboss.exists' )
        then {
          property ( 'location' : '${jboss.home}' , 'name' : 'local.jboss.home' )
          echo ( 'message' : 'JBOSS_HOME exists ${jboss.home}' )
        }
        else {
          property ( 'location' : '${pt.dir}/${jboss.binaries.relative.dir}' , 'name' : 'local.jboss.home' )
          available ( 'file' : '${local.jboss.home}/lib/commons-httpclient.jar' , 'property' : 'local.jboss.exists' )
          echo ( 'message' : 'JBOSS_HOME does not exist checking for LOCAL_JBOSS_HOME ${local.jboss.home}' )
          if {
            not {
              isset ( 'property' : 'local.jboss.exists' )
            }
            then {
              echo ( 'message' : 'LOCAL_JBOSS_HOME not found downloading.' )
              antcall ( 'target' : 'dist:tools:retrieve:jboss' )
              java ( 'jar' : '${tools.dir}/${jboss.binaries.file}' , 'fork' : 'true' ) {
                arg ( 'line' : '-installGroup ejb3 installpath=${local.jboss.home}' )
              }
            }
            else {
              echo ( 'message' : 'LOCAL_JBOSS_HOME found ${local.jboss.home}' )
            }
          }
        }
      }
    }
  }
}
target ( 'build:grid' : '' ) {
  copy ( 'todir' : '${grid-sample.dist.dir}' ) {
    fileset ( 'dir' : '${grid.base.dir}' ) {
      include ( 'name' : 'sample-wsrf-war.zip' )
    }
  }
}
target ( 'maven-static-analysis:all' : 'Runs static-analysis target for all sub-projects' ) {
  depends ( 'maven-test:all' )
}
target ( 'usage' : 'Explains how to use this build script' ) {
  echo ( 'message' : 'To run a remote upgrade type: ant deploy:remote:upgrade -Dproperties.file=[path to environment proeprty file]' )
}
target ( 'clean' : '' ) {
  delete ( 'dir' : '${dist.dir}' )
  delete ( 'dir' : '${temp.dir}' )
}
target ( 'build-bda-template.test:seleniumrc:stop' : 'Stops selenuimrc server when using selenium from java' ) {
  get ( 'dest' : '${temp.dir}/result.txt' , 'taskname' : 'selenium-shutdown' , 'ignoreerrors' : 'true' , 'src' : 'http://localhost:${selenium.proxy.port}/selenium-server/driver/?cmd=shutDown' )
}
target ( 'build:bda-blueprints-webapp' : 'Call webapp sub-projects build target to produce artifiacts' ) {
  depends ( 'init' , 'build:bda-blueprints-api' )
  ant ( 'inheritRefs' : 'false' , 'dir' : '${bda-blueprints-webapp.base.dir}' , 'antfile' : '${bda-blueprints-webapp.build.file}' , 'target' : '${bda-blueprints-webapp.build.target}' , 'inheritAll' : 'false' ) {
    property ( 'name' : 'dist.dir' , 'value' : '${bda-blueprints-webapp.dist.dir}' )
    property ( 'name' : 'env.GLOBUS_LOCATION' , 'value' : '${env.GLOBUS_LOCATION}' )
    property ( 'name' : 'commonlibrary.dir' , 'value' : '${commonlibrary.dir}' )
  }
}
target ( 'build-bda-template.init' : 'Sets up build are and initalizes variables' ) {
  echo ( 'message' : ' ______   ______   _______ ' )
  echo ( 'message' : '(____  \ (______) (_______)' )
  echo ( 'message' : ' ____)  ) _     _  _______ ' )
  echo ( 'message' : '|  __  ( | |   | ||  ___  |' )
  echo ( 'message' : '| |__)  )| |__/ / | |   | |' )
  echo ( 'message' : '|______/ |_____/  |_|   |_|' )
  mkdir ( 'dir' : '${target.dir}' )
  mkdir ( 'dir' : '${dist.dir}' )
  mkdir ( 'dir' : '${dist.exploded.dir}' )
  mkdir ( 'dir' : '${bda-blueprints-api.dist.dir}' )
  mkdir ( 'dir' : '${bda-blueprints-webapp.dist.dir}' )
  mkdir ( 'dir' : '${grid-sample.dist.dir}' )
  mkdir ( 'dir' : '${common.dist.dir}' )
  mkdir ( 'dir' : '${tools.dist.dir}' )
  mkdir ( 'dir' : '${temp.dir}' )
  mkdir ( 'dir' : '${download.dir}' )
  mkdir ( 'dir' : '${pt.dir}' )
  available ( 'file' : '${jboss.dest.file}' , 'property' : 'jboss.tools.exists' )
  available ( 'file' : '${jbosscp.dest.file}' , 'property' : 'jbosscp.tools.exists' )
  available ( 'file' : '${tomcat.dest.file}' , 'property' : 'tomcat.tools.exists' )
  available ( 'file' : '${cagrid-libs.dest.file}' , 'property' : 'cagrid-libs.tools.exists' )
  available ( 'file' : '${cagrid-base-war.dest.file}' , 'property' : 'cagrid-base-war.tools.exists' )
  if {
    equals ( 'arg2' : 'true' , 'arg1' : '${require.jboss}' )
    then {
      available ( 'file' : '${jboss.home}/lib/commons-httpclient.jar' , 'property' : 'rt.jboss.exists' )
      if {
        isset ( 'property' : 'rt.jboss.exists' )
        then {
          property ( 'location' : '${jboss.home}' , 'name' : 'local.jboss.home' )
          echo ( 'message' : 'JBOSS_HOME exists ${jboss.home}' )
        }
        else {
          property ( 'location' : '${pt.dir}/${jboss.binaries.relative.dir}' , 'name' : 'local.jboss.home' )
          available ( 'file' : '${local.jboss.home}/lib/commons-httpclient.jar' , 'property' : 'local.jboss.exists' )
          echo ( 'message' : 'JBOSS_HOME does not exist checking for LOCAL_JBOSS_HOME ${local.jboss.home}' )
          if {
            not {
              isset ( 'property' : 'local.jboss.exists' )
            }
            then {
              echo ( 'message' : 'LOCAL_JBOSS_HOME not found downloading.' )
              antcall ( 'target' : 'dist:tools:retrieve:jboss' )
              java ( 'jar' : '${tools.dir}/${jboss.binaries.file}' , 'fork' : 'true' ) {
                arg ( 'line' : '-installGroup ejb3 installpath=${local.jboss.home}' )
              }
            }
            else {
              echo ( 'message' : 'LOCAL_JBOSS_HOME found ${local.jboss.home}' )
            }
          }
        }
      }
    }
  }
}
target ( 'maven-test:all' : 'Runs test targets on all sub-projects' ) {
  depends ( 'init' )
  maven ( 'maven.profile.list' : '-P local' , 'maven.dir' : '${bda-blueprints-webapp.base.dir}' , 'maven.goal.list' : 'stie verify' )
}
target ( 'build-bda-template.database:diff' : 'Upgrades database using BDA Datbase Upgrade process.' ) {
  depends ( 'database:prep' )
  if ( ! ( exclude.database ) ) {
    database-diff ( 'output.file.txt' : '${target.dir}/generated-diff-log.txt' , 'output.file.xml' : '${target.dir}/generated-diff-log.xml' )
  }
}
target ( 'build-bda-template.deploy:local:upgrade' : 'Upgrades and configures the application and database  on the local machine. Used for developer desktops and ci environments.' ) {
  depends ( 'build:all' , 'dist:upgrader:prep' )
  deploy-local ( 'target.name' : '${upgrade.target}' , 'properties.file' : '${upgrade.properties.file}' )
}
target ( 'build-bda-template.ivy-resolve-all' : 'Downloads all libraries included in the ivy definition file from ivy into local lib directory' ) {
  depends ( 'init:ivy' )
  ivy:resolve ( 'refresh' : 'true' )
}
target ( 'build-bda-template.test:selenium:init' : 'Sets up environment for running selenium tests' ) {
  mkdir ( 'dir' : '${selenium.report.dir}' )
  if {
    not {
      socket ( 'port' : '${jboss.server.port}' , 'server' : '${jboss.server.hostname}' )
    }
    then {
      jboss-start-jboss
    }
  }
}
target ( 'test:selenium:run' : 'Executes selenium test suite' ) {
  osfamily ( 'property' : 'os.family' )
  if {
    equals ( 'arg2' : 'unix' , 'arg1' : '${os.family}' )
    then {
      echo ( 'message' : 'To be able to selenium tests on Unix platforms you need to meet the following conditions.' )
      echo ( 'message' : 'You need to be logged in on the console running X (developer linux or mac workstation).' )
      echo ( 'message' : ' If you are running it from a server that does not have a console (like a CI server) you need to be running at runlevel 3, running and xframe buffer ('Xvfb :1 -screen 0 1024x768x24', should be setup on a CI server) and have your DISPLAY environment variable sto to match your frame buffer ('DISPLAY=:1.0', should be set in .bash_profile on CI server).' )
      fail ( 'message' : 'DISPLAY environment variable not set, please set it as outlined above and run again.' , 'unless' : 'env.DISPLAY' )
    }
  }
  taskdef ( 'classpathref' : 'project.test.selenium.classpath' , 'resource' : 'selenium-ant.properties' )
  selenese ( 'results' : '${selenium.report.dir}/${selenium.report.file}' , 'timeoutInSeconds' : '60' , 'suite' : '${selenium.test.suite}' , 'multiWindow' : 'falsE' , 'browser' : '${selenium.browser}' , 'port' : '${selenium.proxy.port}' , 'startURL' : '${selenium.url}' )
}
target ( 'ivy-resolve-all' : 'Downloads all libraries included in the ivy definition file from ivy into local lib directory' ) {
  depends ( 'init:ivy' )
  ivy:resolve ( 'refresh' : 'true' )
}
target ( 'build-bda-template.ivy:clean' : 'Cleans up the ivy cache of this project and all sub-projects' ) {
  ivy:settings ( 'file' : '${ivy.settings.dir}/${ivy.settings.file}' )
  ivy:cleancache
  ant ( 'inheritRefs' : 'false' , 'dir' : '${bda-download.dir}' , 'antfile' : 'bda-ivy-2.0.0-build.xml' , 'target' : 'ivy-cleancache' , 'inheritAll' : 'false' ) {
    property ( 'name' : 'bda-utils.dir' , 'value' : '${bda-utils.dir}' )
    property ( 'name' : 'lib.dir' , 'value' : '${lib.dir}' )
    property ( 'name' : 'software.dir' , 'value' : '${software.dir}' )
  }
}
target ( 'build-bda-template.dist:tools:retrieve:jboss' : 'Downloads JBOSS from binary repository and verifies checksum' ) {
  if ( ! ( jboss.tools.exists ) ) {
    get ( 'dest' : '${jboss.dest.file}' , 'src' : '${jboss.src.url}' )
    get ( 'dest' : '${jboss.dest.file}.MD5' , 'src' : '${jboss.src.url}.MD5' )
    checksum ( 'file' : '${jboss.dest.file}' , 'verifyProperty' : 'jboss.cksum.ok' )
    if {
      equals ( 'arg2' : 'true' , 'arg1' : '${jboss.cksum.ok}' )
      then {
        echo ( 'message' : 'Downloaded jboss sucessfully' )
      }
      else {
        fail ( 'message' : 'Failed to download jboss file sucessfully.' )
      }
    }
  }
}
target ( 'dist:gui-installer' : 'Makes Gui-Installer distribution' ) {
  delete {
    fileset ( 'dir' : '${dist.dir}' ) {
      include ( 'name' : '*.jar' )
    }
  }
  gui-installer-prep ( 'product.version' : '${bda-blueprints-webapp.version}' , 'product.name' : '${bda-blueprints-webapp.install.name}' )
  ant ( 'inheritRefs' : 'false' , 'dir' : '${build.dir}/gui-installer' , 'antfile' : 'install.xml' , 'target' : 'build:installer' , 'inheritAll' : 'false' ) {
    property ( 'name' : 'compile.jar.dir' , 'value' : '${target.dir}/izpack-4.3' )
  }
}
target ( 'dist:tools:retrieve:jboss' : 'Downloads JBOSS from binary repository and verifies checksum' ) {
  if ( ! ( jboss.tools.exists ) ) {
    get ( 'dest' : '${jboss.dest.file}' , 'src' : '${jboss.src.url}' )
    get ( 'dest' : '${jboss.dest.file}.MD5' , 'src' : '${jboss.src.url}.MD5' )
    checksum ( 'file' : '${jboss.dest.file}' , 'verifyProperty' : 'jboss.cksum.ok' )
    if {
      equals ( 'arg2' : 'true' , 'arg1' : '${jboss.cksum.ok}' )
      then {
        echo ( 'message' : 'Downloaded jboss sucessfully' )
      }
      else {
        fail ( 'message' : 'Failed to download jboss file sucessfully.' )
      }
    }
  }
}
target ( 'deploy:hot:jsp' : 'Copies all current JSP code to the deployed application for quick update' ) {
  for ( 'param' : 'toDir' ) {
    path {
      dirset ( 'dir' : '${jboss.deploy.dir}/../tmp/deploy' , 'includes' : 'tmp*${bda-blueprints-webapp.name}*' )
    }
    sequential {
      copy ( 'todir' : '@{toDir}' , 'overwrite' : 'true' ) {
        fileset ( 'dir' : '${bda-blueprints-webapp.src.dir}' ) {
          include ( 'name' : '**/*.jsp' )
          include ( 'name' : '**/*.jspf' )
          include ( 'name' : '**/*.css' )
          include ( 'name' : '**/*.js' )
          include ( 'name' : '**/*.jpg' )
          include ( 'name' : '**/*.gif' )
          include ( 'name' : '**/*.png' )
          include ( 'name' : '**/*.faces' )
          include ( 'name' : '**/*.tag' )
          include ( 'name' : '**/*.tagf' )
        }
      }
    }
  }
}
target ( 'build-bda-template.build:bda-blueprints-api' : 'Call api sub-projects build target to produce artifiacts' ) {
  depends ( 'init' )
}
target ( 'dist:src' : 'Makes source distribution' ) {
}
target ( 'build-bda-template.test:selenium' : 'Wrapper target to selenium test suite' ) {
  depends ( 'ivy-test-selenium' , 'test:selenium:init' , 'test:selenium:run' , 'test:seleniumrc:stop' )
}
target ( 'build-bda-template.build:bda-blueprints-webapp' : 'Call webapp sub-projects build target to produce artifiacts' ) {
  depends ( 'init' , 'build:bda-blueprints-api' )
  ant ( 'inheritRefs' : 'false' , 'dir' : '${bda-blueprints-webapp.base.dir}' , 'antfile' : '${bda-blueprints-webapp.build.file}' , 'target' : '${bda-blueprints-webapp.build.target}' , 'inheritAll' : 'false' ) {
    property ( 'name' : 'dist.dir' , 'value' : '${bda-blueprints-webapp.dist.dir}' )
    property ( 'name' : 'env.GLOBUS_LOCATION' , 'value' : '${env.GLOBUS_LOCATION}' )
    property ( 'name' : 'commonlibrary.dir' , 'value' : '${commonlibrary.dir}' )
  }
}
target ( 'dist:tools:retrieve' : 'Downloads binary applications from commonlibrary repository' ) {
  depends ( 'init' , 'dist:tools:retrieve:jboss' , 'dist:tools:retrieve:jbosscp' , 'dist:tools:retrieve:tomcat' , 'dist:tools:retrieve:cagrid' )
}
target ( 'dist:tools:retrieve:tomcat' : 'Downloads TOMCAT from binary repository and verifies checksum' ) {
  if ( ! ( tomcat.tools.exists ) ) {
    get ( 'dest' : '${tomcat.dest.file}' , 'src' : '${tomcat.src.url}' )
    get ( 'dest' : '${tomcat.dest.file}.MD5' , 'src' : '${tomcat.src.url}.MD5' )
    checksum ( 'file' : '${tomcat.dest.file}' , 'verifyProperty' : 'tomcat.cksum.ok' )
    if {
      equals ( 'arg2' : 'true' , 'arg1' : '${tomcat.cksum.ok}' )
      then {
        echo ( 'message' : 'Downloaded tomcat sucessfully' )
      }
      else {
        fail ( 'message' : 'Failed to download tomcat file sucessfully.' )
      }
    }
  }
}
target ( 'test:seleniumrc:stop' : 'Stops selenuimrc server when using selenium from java' ) {
  get ( 'dest' : '${temp.dir}/result.txt' , 'taskname' : 'selenium-shutdown' , 'ignoreerrors' : 'true' , 'src' : 'http://localhost:${selenium.proxy.port}/selenium-server/driver/?cmd=shutDown' )
}
target ( 'static-analysis:bda-blueprints-api' : 'Calls static-analysis target for sub-project' ) {
  depends ( 'init' )
}
target ( 'build-bda-template.database:prep' : 'Copies db files with filtering' ) {
  switch ( 'value' : '${database.type}' ) {
    case ( 'value' : 'oracle' ) {
      property ( 'name' : 'database.dialect' , 'value' : 'org.hibernate.dialect.OracleDialect' )
      property ( 'name' : 'database.driver.file' , 'value' : '${bda-utils.dir}/ojdbc14-10.2.0.4.0.jar' )
      property ( 'name' : 'database.driver' , 'value' : 'oracle.jdbc.driver.OracleDriver' )
      property ( 'name' : 'database.schema' , 'value' : '${database.name}' )
    }
    case ( 'value' : 'mysql' ) {
      property ( 'name' : 'database.dialect' , 'value' : 'org.hibernate.dialect.MySQLDialect' )
      property ( 'name' : 'database.driver.file' , 'value' : '${bda-utils.dir}/mysql-connector-java-5.0.8.jar' )
      property ( 'name' : 'database.driver' , 'value' : 'com.mysql.jdbc.Driver' )
      property ( 'name' : 'database.schema' , 'value' : '${database.name}' )
    }
    case ( 'value' : 'postgresql' ) {
      property ( 'name' : 'database.dialect' , 'value' : 'org.hibernate.dialect.PostgreSQLDialect' )
      property ( 'name' : 'database.driver.file' , 'value' : '${bda-utils.dir}/postgresql-jdbc3-8.3-604.jar' )
      property ( 'name' : 'database.driver' , 'value' : 'org.postgresql.Driver' )
      property ( 'name' : 'database.schema' , 'value' : 'public' )
    }
    default {
      fail ( 'message' : 'Invalid database type ${database.type}' )
    }
  }
  path ( 'id' : 'jdbc.driver.classpath' ) {
    pathelement ( 'location' : '${database.driver.file}' )
  }
  echoproperties ( 'prefix' : 'database' )
  copy ( 'todir' : '${working.dir}/' , 'overwrite' : 'true' , 'filtering' : 'true' ) {
    fileset ( 'dir' : '${db.src.dir}' ) {
      include ( 'name' : '**/db-upgrade/**/*' )
    }
    filterset {
      filtersfile ( 'file' : '${properties.file}' )
      filtersfile ( 'file' : 'project.properties' )
      filter ( 'token' : 'db-upgrade.run.dir' , 'value' : '${working.dir}/db-upgrade/${database.type}' )
    }
  }
}
target ( 'dist:upgrade:tier:jboss' : '' ) {
  depends ( 'dist:installer:prep' )
  delete ( 'file' : '${dist.dir}/${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-jboss.zip' )
  zip ( 'destfile' : '${dist.dir}/${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-jboss.zip' ) {
    zipfileset ( 'dir' : '${bda-blueprints-webapp.dist.dir}' , 'prefix' : '${bda-blueprints-webapp.dist.relative.dir}' )
    zipfileset ( 'dir' : '${grid-sample.dist.dir}' , 'prefix' : '${grid-sample.dist.relative.dir}' )
    zipfileset ( 'dir' : '${tools.dist.dir}' , 'prefix' : '${tools.dist.relative.dir}' ) {
      include ( 'name' : '*jboss*' )
    }
    zipfileset ( 'dir' : '${common.dist.dir}' , 'prefix' : '${common.dist.relative.dir}' )
    zipfileset ( 'dir' : '${bda-utils.dir}' , 'prefix' : 'bda-utils' )
    zipfileset ( 'dir' : '${dist.exploded.dir}' ) {
      include ( 'name' : 'build.xml' )
      include ( 'name' : 'install.properties' )
      include ( 'name' : 'properties.template' )
      include ( 'name' : 'project.properties' )
    }
  }
}
target ( 'static-analysis:all' : 'Runs static-analysis target for all sub-projects' ) {
  depends ( 'clean' , 'init' , 'static-analysis:bda-blueprints-api' , 'static-analysis:bda-blueprints-webapp' )
}
target ( 'deploy:local:upgrade' : 'Upgrades and configures the application and database  on the local machine. Used for developer desktops and ci environments.' ) {
  depends ( 'build:all' , 'dist:upgrader:prep' )
  deploy-local ( 'target.name' : '${upgrade.target}' , 'properties.file' : '${upgrade.properties.file}' )
}
target ( 'build-bda-template.test:seleniumrc:start' : '' ) {
  echo ( 'message' : '${lib.dir}/test-selenium/selenium-server-0.9.0.jar' )
  java ( 'spawn' : 'true' , 'jar' : '${lib.dir}/test-selenium/selenium-server-0.9.0.jar' , 'fork' : 'true' )
}
target ( 'build-bda-template.dist:upgrader:prep' : 'Copies artifacts not generated by sub-project builds into the install distribution area' ) {
  depends ( 'build:all' , 'dist:tools:retrieve' )
  copy ( 'todir' : '${db-upgrade.dist.dir}' , 'overwrite' : 'true' ) {
    fileset ( 'dir' : '${db-upgrade.src.dir}' ) {
      include ( 'name' : '**/*' )
    }
  }
  dist-prep ( 'copy.tools.flag' : 'Y' , 'default.target' : 'upgrade' )
}
target ( 'build-bda-template.dist:upgrade:tier' : '' ) {
  depends ( 'dist:upgrade:tier:db' , 'dist:upgrade:tier:tomcat' , 'dist:upgrade:tier:jboss' )
}
target ( 'build:bda-blueprints-api' : 'Call api sub-projects build target to produce artifiacts' ) {
  depends ( 'init' )
}
target ( 'build-bda-template.report:erd' : '' ) {
  generate-erd ( 'schemaspy.jar' : 'schemaspy-3.1.1.jar' , 'database.driver.jar' : 'mysql-connector-java-5.0.5.jar' )
}
target ( 'continuous-integration' : 'calls wrapper targets for continuous integration build' ) {
  depends ( 'build:all' , 'static-analysis:all' )
}
target ( 'build-bda-template.ivy-test-selenium' : 'Downloads selenium libraries from ivy into library directory' ) {
  depends ( 'init:ivy' )
  ivy:resolve ( 'conf' : 'test-selenium' , 'refresh' : 'true' )
  ivy:retrieve ( 'conf' : 'test-selenium' , 'pattern' : '${lib.dir}/[conf]/[artifact]-[revision].[ext]' )
  path ( 'id' : 'project.test.selenium.classpath' ) {
    fileset ( 'dir' : '${lib.dir}/test-selenium' ) {
      include ( 'name' : '*.jar' )
    }
  }
}
target ( 'build-bda-template.dist:installer:prep' : 'Copies artifacts not generated by sub-project builds into the install distribution area' ) {
  depends ( 'build:all' , 'dist:tools:retrieve' , 'dist:tools:retrieve:jboss-bindings' )
  copy ( 'todir' : '${db-install.dist.dir}' , 'overwrite' : 'true' ) {
    fileset ( 'dir' : '${db-install.src.dir}' ) {
      include ( 'name' : '**/*' )
    }
  }
  copy ( 'todir' : '${db-upgrade.dist.dir}' , 'overwrite' : 'true' ) {
    fileset ( 'dir' : '${db-upgrade.src.dir}' ) {
      include ( 'name' : '**/*' )
    }
  }
  dist-prep
  copy ( 'todir' : '${tools.dist.dir}' ) {
    fileset ( 'dir' : '${download.dir}' ) {
      include ( 'name' : 'cagrid*' )
    }
  }
}
target ( 'build-bda-template.temp-tomcat-read-dbconfig' : '' ) {
  tomcat-read-dbconfig
}
target ( 'build-bda-template.deploy:hot' : 'Hot deploys the deployment artifact' ) {
  depends ( 'build:all' )
  copy ( 'todir' : '${jboss.deploy.dir}' , 'file' : '${bda-blueprints-webapp.dist.dir}/${bda-blueprints-webapp.file.name}' )
}
target ( 'build-bda-template.dist:upgrade:tier:db' : '' ) {
  depends ( 'dist:installer:prep' )
  delete ( 'file' : '${dist.dir}/${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-db.zip' )
  zip ( 'destfile' : '${dist.dir}/${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-db.zip' ) {
    zipfileset ( 'dir' : '${db-install.dist.dir}' , 'prefix' : '${db-install.dist.relative.dir}' )
    zipfileset ( 'dir' : '${db-upgrade.dist.dir}' , 'prefix' : '${db-upgrade.dist.relative.dir}' )
    zipfileset ( 'dir' : '${bda-utils.dir}' , 'prefix' : 'bda-utils' )
    zipfileset ( 'dir' : '${dist.exploded.dir}' ) {
      include ( 'name' : 'build.xml' )
      include ( 'name' : 'install.properties' )
      include ( 'name' : 'properties.template' )
      include ( 'name' : 'project.properties' )
    }
  }
}
target ( 'test:selenium:init' : 'Sets up environment for running selenium tests' ) {
  mkdir ( 'dir' : '${selenium.report.dir}' )
  if {
    not {
      socket ( 'port' : '${jboss.server.port}' , 'server' : '${jboss.server.hostname}' )
    }
    then {
      jboss-start-jboss
    }
  }
}
target ( 'deploy:remote:upgrade' : 'Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)' ) {
  depends ( 'build:all' , 'dist:upgrader' )
  deploy-files ( 'dist.file' : '${bda-blueprints-webapp.upgrade.zip.file}' )
  remote-ssh ( 'remotesshcommand' : '. .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${upgrade.target}' )
}
target ( 'temp-tomcat-read-dbconfig' : '' ) {
  tomcat-read-dbconfig
}
target ( 'dist:tools:retrieve:jbosscp' : 'Downloads JBOSS Cumulative Patch from binary repository and verifies checksum' ) {
  if ( ! ( jbosscp.tools.exists ) ) {
    echoproperties ( 'prefix' : 'jbosscp' )
    if {
      isset ( 'property' : 'jbosscp.src.url' )
      then {
        get ( 'dest' : '${jbosscp.dest.file}' , 'src' : '${jbosscp.src.url}' )
      }
      else {
        echo ( 'message' : 'jbosscp.src.url not set skipping download of jboss cumulative patch' )
      }
    }
  }
}
ant.  description {
'''
		This build file is part of the bda-build-template project.  This is the master build file for the project.  It should be placed in project/software/.  This script wrappers sub projects to build, test and inspect code.  Additionally this project manges creation of distributions and deployment locally or remotely.  Deployments will call the install.xml from the distribution to install or upgrade the application.  Lastly this script will run include targets that require manipulation of containers (selenium tests because they require starting the application server container (and require a fully deployed application which this process is responsible for). This build script assumes two sub-projects bda-blueprints-webapp and bda-blueprints-api. The API targets are commented out and can be removed if not needed.  Also support for both tomcat and jboss download, install and configure are included.  These scripts require Java, Ant, Database and SVN to work.
	'''
  }
ant.  property ( 'environment' : 'env' )
ant.  property ( 'file' : 'local.properties' )
ant.  property ( 'file' : 'project.properties' )
ant.  property ( 'name' : 'properties.file' , 'value' : 'install.properties' )
ant.  property ( 'name' : 'upgrade.properties.file' , 'value' : 'upgrade.properties' )
ant.  echo ( 'message' : 'Using properties file of ${properties.file}.' )
ant.  available ( 'file' : '${properties.file}' , 'property' : 'properties.file.exists' )
ant.  fail ( 'message' : 'The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail.' , 'unless' : 'properties.file.exists' )
ant.  replaceregexp ( 'match' : '^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$' , 'replace' : '\1=\2' , 'byline' : 'true' , 'file' : '${properties.file}' )
ant.  replaceregexp ( 'match' : '^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$' , 'replace' : '\1=\2' , 'byline' : 'true' , 'file' : '${properties.file}' )
ant.  property ( 'file' : '${properties.file}' )
ant.  condition ( 'property' : 'application.base.path' , 'value' : '${application.base.path.linux}' ) {
    or {
      os ( 'family' : 'unix' )
      os ( 'family' : 'mac' )
    }
  }
ant.  condition ( 'property' : 'application.base.path' , 'value' : '${application.base.path.windows}' ) {
    os ( 'family' : 'windows' )
  }
ant.  property ( 'name' : 'jboss.home' , 'value' : '${application.base.path}/${jboss.relative.path}' )
ant.  property ( 'name' : 'tomcat.home' , 'value' : '${application.base.path}/${tomcat.relative.path}' )
ant.  basename ( 'file' : '${properties.file}' , 'property' : 'properties.file.name' )
ant.  property ( 'location' : '.' , 'name' : 'build.dir' )
ant.  property ( 'location' : '..' , 'name' : 'software.dir' )
ant.  property ( 'location' : '${software.dir}/common' , 'name' : 'common.dir' )
ant.  property ( 'location' : '${software.dir}/local-ivy-repo' , 'name' : 'local.repo.dir' )
ant.  property ( 'location' : '${software.dir}/target' , 'name' : 'target.dir' )
ant.  property ( 'location' : '${common.dir}/bda-download' , 'name' : 'bda-download.dir' )
ant.  property ( 'location' : '${common.dir}/ivy' , 'name' : 'ivy.settings.dir' )
ant.  property ( 'location' : '${target.dir}/lib' , 'name' : 'lib.dir' )
ant.  property ( 'location' : '${target.dir}/temp' , 'name' : 'temp.dir' )
ant.  property ( 'location' : '${target.dir}/reports' , 'name' : 'reports.dir' )
ant.  property ( 'location' : '${target.dir}/bda-utils' , 'name' : 'bda-utils.dir' )
ant.  property ( 'location' : '${target.dir}/logs' , 'name' : 'log.dir' )
ant.  property ( 'location' : '${target.dir}/dist' , 'name' : 'dist.dir' )
ant.  property ( 'location' : '${target.dir}/download' , 'name' : 'download.dir' )
ant.  property ( 'location' : '${target.dir}/persistent-transient' , 'name' : 'pt.dir' )
ant.  property ( 'location' : '${target.dir}/working' , 'name' : 'working.dir' )
ant.  property ( 'location' : '${target.dir}/${cacore-sdk.binaries.relative.dir}' , 'name' : 'cacore-sdk.dir' )
ant.  property ( 'name' : 'ivy.settings.file' , 'value' : 'ivy-settings.xml' )
ant.  property ( 'name' : 'bda-blueprints-api.base.dir' , 'value' : '${software.dir}/blueprints-webapp' )
ant.  property ( 'name' : 'bda-blueprints-webapp.base.dir' , 'value' : '${software.dir}/blueprints-webapp' )
ant.  property ( 'name' : 'grid.base.dir' , 'value' : '${software.dir}/grid-sample' )
ant.  property ( 'name' : 'bda-blueprints-webapp.build.file' , 'value' : 'build.xml' )
ant.  property ( 'name' : 'bda-blueprints-api.build.file' , 'value' : 'build.xml' )
ant.  property ( 'name' : 'grid.build.file' , 'value' : 'build.xml' )
ant.  property ( 'name' : 'bda-blueprints-api.build.target' , 'value' : 'build:all' )
ant.  property ( 'name' : 'bda-blueprints-webapp.build.target' , 'value' : 'dist' )
ant.  property ( 'name' : 'grid.build.target' , 'value' : 'dist' )
ant.  property ( 'name' : 'bda-blueprints-webapp.maven.profile.list' , 'value' : 'local,bda' )
ant.  property ( 'name' : 'bda-blueprints-webapp.maven.goal.list' , 'value' : 'clean install' )
ant.  property ( 'name' : 'bda-blueprints-api.maven.goal.list' , 'value' : 'clean install' )
ant.  property ( 'name' : 'db.src.dir' , 'value' : '${bda-blueprints-webapp.base.dir}/db' )
ant.  property ( 'name' : 'db-install.src.dir' , 'value' : '${db.src.dir}/db-install' )
ant.  property ( 'name' : 'db-upgrade.src.dir' , 'value' : '${db.src.dir}/db-upgrade' )
ant.  property ( 'name' : 'dist.exploded.dir' , 'value' : '${dist.dir}/exploded' )
ant.  property ( 'name' : 'bda-blueprints-api.dist.dir' , 'value' : '${dist.exploded.dir}/${bda-blueprints-api.dist.relative.dir}' )
ant.  property ( 'name' : 'bda-blueprints-webapp.dist.dir' , 'value' : '${dist.exploded.dir}/${bda-blueprints-webapp.dist.relative.dir}' )
ant.  property ( 'name' : 'grid-sample.dist.dir' , 'value' : '${dist.exploded.dir}/${grid-sample.dist.relative.dir}' )
ant.  property ( 'name' : 'tools.dist.dir' , 'value' : '${dist.exploded.dir}/${tools.dist.relative.dir}' )
ant.  property ( 'name' : 'common.dist.dir' , 'value' : '${dist.exploded.dir}/${common.dist.relative.dir}' )
ant.  property ( 'name' : 'db-install.dist.dir' , 'value' : '${dist.exploded.dir}/${db-install.dist.relative.dir}' )
ant.  property ( 'name' : 'db-upgrade.dist.dir' , 'value' : '${dist.exploded.dir}/${db-upgrade.dist.relative.dir}' )
ant.  property ( 'name' : 'jboss-conf.dist.dir' , 'value' : '${dist.exploded.dir}/${jboss-conf.dist.relative.dir}' )
ant.  property ( 'name' : 'selenium.jar' , 'value' : '${lib.dir}/test-selenium/selenium-server-1.0-beta-1.jar' )
ant.  property ( 'name' : 'selenium.browser' , 'value' : '*iexplore' )
ant.  property ( 'name' : 'selenium.proxy.port' , 'value' : '4444' )
ant.  property ( 'name' : 'selenium.report.dir' , 'value' : '${reports.dir}/selenium' )
ant.  property ( 'name' : 'selenium.report.file' , 'value' : 'selenium-rpt.html' )
ant.  property ( 'name' : 'selenium.test.dir' , 'value' : '${software.dir}/tests/functional/selenium' )
ant.  property ( 'name' : 'selenium.test.suite' , 'value' : '${selenium.test.dir}/bdaTestSuite.html' )
ant.  property ( 'name' : 'selenium.url' , 'value' : 'http://${jboss.server.hostname}:${jboss.server.port}' )
ant.  property ( 'name' : 'jboss.dest.file' , 'value' : '${download.dir}/${jboss.binaries.file}' )
ant.  property ( 'name' : 'jbosscp.dest.file' , 'value' : '${download.dir}/${jbosscp.binaries.file}' )
ant.  property ( 'name' : 'tomcat.dest.file' , 'value' : '${download.dir}/${tomcat.binaries.file}' )
ant.  property ( 'name' : 'cagrid-libs.dest.file' , 'value' : '${download.dir}/${cagrid-libs.binaries.file}' )
ant.  property ( 'name' : 'cagrid-base-war.dest.file' , 'value' : '${download.dir}/${cagrid-base-war.binaries.file}' )
ant.  property ( 'name' : 'install.target' , 'value' : 'install' )
ant.  property ( 'name' : 'upgrade.target' , 'value' : 'upgrade' )
ant.  property ( 'name' : 'grand.rpt.dir' , 'value' : '${common.dir}/grand' )
ant.  property ( 'name' : 'jboss.deploy.dir' , 'value' : '${jboss.home}/server/${jboss.server.name}/deploy' )
ant.  property ( 'name' : 'bda-blueprints-webapp.name' , 'value' : 'bda-blueprints-webapp' )
ant.  property ( 'name' : 'bda-blueprints-webapp.file.name' , 'value' : '${bda-blueprints-webapp.name}.war' )
ant.  property ( 'name' : 'bda-blueprints-webapp.src.dir' , 'value' : '${bda-blueprints-webapp.base.dir}/src/web' )
ant.  property ( 'name' : 'commonlibrary.dir' , 'value' : '' )
ant.  property ( 'name' : 'bda-download.file' , 'value' : 'bda-ivy-2.0.0-build.xml' )
ant.  ant ( 'inheritRefs' : 'false' , 'dir' : '${bda-download.dir}' , 'antfile' : '${bda-download.file}' , 'target' : 'retrieve-bda' , 'inheritAll' : 'false' ) {
    property ( 'name' : 'bda.version' , 'value' : '${bda.version}' )
    property ( 'location' : '${bda-utils.dir}' , 'name' : 'bda-utils.dir' )
    property ( 'location' : '${lib.dir}' , 'name' : 'lib.dir' )
    property ( 'location' : '${software.dir}' , 'name' : 'software.dir' )
    property ( 'location' : '${commonlibrary.dir}' , 'name' : 'commonlibrary.dir' )
    property ( 'location' : '${target.dir}' , 'name' : 'target.dir' )
  }
ant.  path ( 'id' : 'bda-utils.classpath' ) {
    fileset ( 'dir' : '${bda-utils.dir}' ) {
      include ( 'name' : '**/*.jar' )
    }
  }
ant.  path ( 'id' : 'ivy.classpath' ) {
    fileset ( 'dir' : '${lib.dir}' ) {
      include ( 'name' : '*.jar' )
    }
  }
ant.  taskdef ( 'classpathref' : 'ivy.classpath' , 'uri' : 'antlib:org.apache.ivy.ant' , 'resource' : 'org/apache/ivy/ant/antlib.xml' )
ant.  taskdef ( 'name' : 'for' , 'classpathref' : 'bda-utils.classpath' , 'classname' : 'net.sf.antcontrib.logic.ForTask' )
ant.  import ( 'file' : '${bda-utils.dir}/bda-build-utils-${bda.version}.xml' )
ant.  mkdir ( 'dir' : '${log.dir}' )
ant.  tstamp {
    format ( 'pattern' : 'yyyy-MM-dd-HH-mm' , 'property' : 'install.time' )
  }
ant.  record ( 'name' : '${log.dir}/install-${install.time}.log' , 'action' : 'start' )
ant.  mkdir ( 'dir' : '${download.dir}' )
ant.  description {
'''
		This build file is part of the bda-build-template project.  This is the master build file for the project.  It should be placed in project/software/.  This script wrappers sub projects to build, test and inspect code.  Additionally this project manges creation of distributions and deployment locally or remotely.  Deployments will call the install.xml from the distribution to install or upgrade the application.  Lastly this script will run include targets that require manipulation of containers (selenium tests because they require starting the application server container (and require a fully deployed application which this process is responsible for). This build script assumes two sub-projects bda-blueprints-webapp and bda-blueprints-api. The API targets are commented out and can be removed if not needed.  Also support for both tomcat and jboss download, install and configure are included.  These scripts require Java, Ant, Database and SVN to work.
	'''
  }
ant.  property ( 'environment' : 'env' )
ant.  property ( 'file' : 'local.properties' )
ant.  property ( 'file' : 'project.properties' )
ant.  property ( 'name' : 'properties.file' , 'value' : 'install.properties' )
ant.  property ( 'name' : 'upgrade.properties.file' , 'value' : 'upgrade.properties' )
ant.  echo ( 'message' : 'Using properties file of ${properties.file}.' )
ant.  available ( 'file' : '${properties.file}' , 'property' : 'properties.file.exists' )
ant.  fail ( 'message' : 'The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail.' , 'unless' : 'properties.file.exists' )
ant.  replaceregexp ( 'match' : '^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$' , 'replace' : '\1=\2' , 'byline' : 'true' , 'file' : '${properties.file}' )
ant.  replaceregexp ( 'match' : '^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$' , 'replace' : '\1=\2' , 'byline' : 'true' , 'file' : '${properties.file}' )
ant.  property ( 'file' : '${properties.file}' )
ant.  condition ( 'property' : 'application.base.path' , 'value' : '${application.base.path.linux}' ) {
    or {
      os ( 'family' : 'unix' )
      os ( 'family' : 'mac' )
    }
  }
ant.  condition ( 'property' : 'application.base.path' , 'value' : '${application.base.path.windows}' ) {
    os ( 'family' : 'windows' )
  }
ant.  property ( 'name' : 'jboss.home' , 'value' : '${application.base.path}/${jboss.relative.path}' )
ant.  property ( 'name' : 'tomcat.home' , 'value' : '${application.base.path}/${tomcat.relative.path}' )
ant.  basename ( 'file' : '${properties.file}' , 'property' : 'properties.file.name' )
ant.  property ( 'location' : '.' , 'name' : 'build.dir' )
ant.  property ( 'location' : '..' , 'name' : 'software.dir' )
ant.  property ( 'location' : '${software.dir}/common' , 'name' : 'common.dir' )
ant.  property ( 'location' : '${software.dir}/local-ivy-repo' , 'name' : 'local.repo.dir' )
ant.  property ( 'location' : '${software.dir}/target' , 'name' : 'target.dir' )
ant.  property ( 'location' : '${common.dir}/bda-download' , 'name' : 'bda-download.dir' )
ant.  property ( 'location' : '${common.dir}/ivy' , 'name' : 'ivy.settings.dir' )
ant.  property ( 'location' : '${target.dir}/lib' , 'name' : 'lib.dir' )
ant.  property ( 'location' : '${target.dir}/temp' , 'name' : 'temp.dir' )
ant.  property ( 'location' : '${target.dir}/reports' , 'name' : 'reports.dir' )
ant.  property ( 'location' : '${target.dir}/bda-utils' , 'name' : 'bda-utils.dir' )
ant.  property ( 'location' : '${target.dir}/logs' , 'name' : 'log.dir' )
ant.  property ( 'location' : '${target.dir}/dist' , 'name' : 'dist.dir' )
ant.  property ( 'location' : '${target.dir}/download' , 'name' : 'download.dir' )
ant.  property ( 'location' : '${target.dir}/persistent-transient' , 'name' : 'pt.dir' )
ant.  property ( 'location' : '${target.dir}/working' , 'name' : 'working.dir' )
ant.  property ( 'location' : '${target.dir}/${cacore-sdk.binaries.relative.dir}' , 'name' : 'cacore-sdk.dir' )
ant.  property ( 'name' : 'ivy.settings.file' , 'value' : 'ivy-settings.xml' )
ant.  property ( 'name' : 'bda-blueprints-api.base.dir' , 'value' : '${software.dir}/blueprints-webapp' )
ant.  property ( 'name' : 'bda-blueprints-webapp.base.dir' , 'value' : '${software.dir}/blueprints-webapp' )
ant.  property ( 'name' : 'grid.base.dir' , 'value' : '${software.dir}/grid-sample' )
ant.  property ( 'name' : 'bda-blueprints-webapp.build.file' , 'value' : 'build.xml' )
ant.  property ( 'name' : 'bda-blueprints-api.build.file' , 'value' : 'build.xml' )
ant.  property ( 'name' : 'grid.build.file' , 'value' : 'build.xml' )
ant.  property ( 'name' : 'bda-blueprints-api.build.target' , 'value' : 'build:all' )
ant.  property ( 'name' : 'bda-blueprints-webapp.build.target' , 'value' : 'dist' )
ant.  property ( 'name' : 'grid.build.target' , 'value' : 'dist' )
ant.  property ( 'name' : 'bda-blueprints-webapp.maven.profile.list' , 'value' : 'local,bda' )
ant.  property ( 'name' : 'bda-blueprints-webapp.maven.goal.list' , 'value' : 'clean install' )
ant.  property ( 'name' : 'bda-blueprints-api.maven.goal.list' , 'value' : 'clean install' )
ant.  property ( 'name' : 'db.src.dir' , 'value' : '${bda-blueprints-webapp.base.dir}/db' )
ant.  property ( 'name' : 'db-install.src.dir' , 'value' : '${db.src.dir}/db-install' )
ant.  property ( 'name' : 'db-upgrade.src.dir' , 'value' : '${db.src.dir}/db-upgrade' )
ant.  property ( 'name' : 'dist.exploded.dir' , 'value' : '${dist.dir}/exploded' )
ant.  property ( 'name' : 'bda-blueprints-api.dist.dir' , 'value' : '${dist.exploded.dir}/${bda-blueprints-api.dist.relative.dir}' )
ant.  property ( 'name' : 'bda-blueprints-webapp.dist.dir' , 'value' : '${dist.exploded.dir}/${bda-blueprints-webapp.dist.relative.dir}' )
ant.  property ( 'name' : 'grid-sample.dist.dir' , 'value' : '${dist.exploded.dir}/${grid-sample.dist.relative.dir}' )
ant.  property ( 'name' : 'tools.dist.dir' , 'value' : '${dist.exploded.dir}/${tools.dist.relative.dir}' )
ant.  property ( 'name' : 'common.dist.dir' , 'value' : '${dist.exploded.dir}/${common.dist.relative.dir}' )
ant.  property ( 'name' : 'db-install.dist.dir' , 'value' : '${dist.exploded.dir}/${db-install.dist.relative.dir}' )
ant.  property ( 'name' : 'db-upgrade.dist.dir' , 'value' : '${dist.exploded.dir}/${db-upgrade.dist.relative.dir}' )
ant.  property ( 'name' : 'jboss-conf.dist.dir' , 'value' : '${dist.exploded.dir}/${jboss-conf.dist.relative.dir}' )
ant.  property ( 'name' : 'selenium.jar' , 'value' : '${lib.dir}/test-selenium/selenium-server-1.0-beta-1.jar' )
ant.  property ( 'name' : 'selenium.browser' , 'value' : '*iexplore' )
ant.  property ( 'name' : 'selenium.proxy.port' , 'value' : '4444' )
ant.  property ( 'name' : 'selenium.report.dir' , 'value' : '${reports.dir}/selenium' )
ant.  property ( 'name' : 'selenium.report.file' , 'value' : 'selenium-rpt.html' )
ant.  property ( 'name' : 'selenium.test.dir' , 'value' : '${software.dir}/tests/functional/selenium' )
ant.  property ( 'name' : 'selenium.test.suite' , 'value' : '${selenium.test.dir}/bdaTestSuite.html' )
ant.  property ( 'name' : 'selenium.url' , 'value' : 'http://${jboss.server.hostname}:${jboss.server.port}' )
ant.  property ( 'name' : 'jboss.dest.file' , 'value' : '${download.dir}/${jboss.binaries.file}' )
ant.  property ( 'name' : 'jbosscp.dest.file' , 'value' : '${download.dir}/${jbosscp.binaries.file}' )
ant.  property ( 'name' : 'tomcat.dest.file' , 'value' : '${download.dir}/${tomcat.binaries.file}' )
ant.  property ( 'name' : 'cagrid-libs.dest.file' , 'value' : '${download.dir}/${cagrid-libs.binaries.file}' )
ant.  property ( 'name' : 'cagrid-base-war.dest.file' , 'value' : '${download.dir}/${cagrid-base-war.binaries.file}' )
ant.  property ( 'name' : 'install.target' , 'value' : 'install' )
ant.  property ( 'name' : 'upgrade.target' , 'value' : 'upgrade' )
ant.  property ( 'name' : 'grand.rpt.dir' , 'value' : '${common.dir}/grand' )
ant.  property ( 'name' : 'jboss.deploy.dir' , 'value' : '${jboss.home}/server/${jboss.server.name}/deploy' )
ant.  property ( 'name' : 'bda-blueprints-webapp.name' , 'value' : 'bda-blueprints-webapp' )
ant.  property ( 'name' : 'bda-blueprints-webapp.file.name' , 'value' : '${bda-blueprints-webapp.name}.war' )
ant.  property ( 'name' : 'bda-blueprints-webapp.src.dir' , 'value' : '${bda-blueprints-webapp.base.dir}/src/web' )
ant.  property ( 'name' : 'commonlibrary.dir' , 'value' : '' )
ant.  property ( 'name' : 'bda-download.file' , 'value' : 'bda-ivy-2.0.0-build.xml' )
ant.  ant ( 'inheritRefs' : 'false' , 'dir' : '${bda-download.dir}' , 'antfile' : '${bda-download.file}' , 'target' : 'retrieve-bda' , 'inheritAll' : 'false' ) {
    property ( 'name' : 'bda.version' , 'value' : '${bda.version}' )
    property ( 'location' : '${bda-utils.dir}' , 'name' : 'bda-utils.dir' )
    property ( 'location' : '${lib.dir}' , 'name' : 'lib.dir' )
    property ( 'location' : '${software.dir}' , 'name' : 'software.dir' )
    property ( 'location' : '${commonlibrary.dir}' , 'name' : 'commonlibrary.dir' )
    property ( 'location' : '${target.dir}' , 'name' : 'target.dir' )
  }
ant.  path ( 'id' : 'bda-utils.classpath' ) {
    fileset ( 'dir' : '${bda-utils.dir}' ) {
      include ( 'name' : '**/*.jar' )
    }
  }
ant.  path ( 'id' : 'ivy.classpath' ) {
    fileset ( 'dir' : '${lib.dir}' ) {
      include ( 'name' : '*.jar' )
    }
  }
ant.  taskdef ( 'classpathref' : 'ivy.classpath' , 'uri' : 'antlib:org.apache.ivy.ant' , 'resource' : 'org/apache/ivy/ant/antlib.xml' )
ant.  taskdef ( 'name' : 'for' , 'classpathref' : 'bda-utils.classpath' , 'classname' : 'net.sf.antcontrib.logic.ForTask' )
ant.  import ( 'file' : '${bda-utils.dir}/bda-build-utils-${bda.version}.xml' )
ant.  mkdir ( 'dir' : '${log.dir}' )
ant.  tstamp {
    format ( 'pattern' : 'yyyy-MM-dd-HH-mm' , 'property' : 'install.time' )
  }
ant.  record ( 'name' : '${log.dir}/install-${install.time}.log' , 'action' : 'start' )
ant.  mkdir ( 'dir' : '${download.dir}' )
target ( 'deploy:remote:upgrade:jboss' : '' ) {
  depends ( 'build:all' , 'dist:upgrade:tier:jboss' )
  deploy-files ( 'ssh.host' : '${jboss.ssh.server.hostname}' , 'remote.directory.property.name' : 'jboss.ssh.dir.temp' , 'ssh.user' : '${jboss.ssh.server.username}' , 'dist.file' : '${bda-blueprints-webapp.install.name}_${bda-blueprints-webapp.version}-jboss.zip' )
  remote-ssh ( 'remotesshcommand' : '. .bash_profile;cd ${jboss.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true -Dexclude.tomcat=true -Dexclude.database=true upgrade:jboss' )
}
target ( 'dist:installer' : 'Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations' ) {
  depends ( 'dist:installer:prep' )
  delete ( 'file' : '${dist.dir}/${bda-blueprints-webapp.install.zip.file}' )
  delete ( 'file' : '${dist.exploded.dir}/upgrade.properties' )
  replaceregexp ( 'match' : '^(env.name)=.*' , 'replace' : '\1=external' , 'byline' : 'true' , 'file' : '${dist.exploded.dir}/install.properties' )
  obfuscate-properties-file ( 'optional.property.list' : 'ldap.url,ldap.basedn' , 'required.property.list' : 'application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname' , 'delete.property.list' : 'exclude.jboss.backup' , 'properties.file' : '${dist.exploded.dir}/install.properties' )
  zip ( 'basedir' : '${dist.exploded.dir}' , 'destfile' : '${dist.dir}/${bda-blueprints-webapp.install.zip.file}' )
}
setDefaultTarget ( 'build:all' )
