target ( 'install:tomcat:clean' : '' ) {
  depends ( 'common:tomcat:init' )
  if ( ! ( exclude.tomcat ) ) {
    sleep ( 'seconds' : '5' )
    property ( 'name' : 'backup.count' , 'value' : '5' )
    if {
      not {
        equals ( 'arg2' : 'true' , 'arg1' : '${exclude.tomcat.backup}' )
      }
      then {
        property ( 'location' : '${application.base.path}/backup/tomcat' , 'name' : 'backup.tomcat.base.dir' )
        backup-dir ( 'src.dir' : '${tomcat.home}' , 'backup.base.dir' : '${backup.tomcat.base.dir}' , 'backup.count' : '${backup.count}' )
      }
    }
    delete ( 'dir' : '${tomcat.home}' )
  }
}
target ( 'bda-blueprints-installer.upgrade:database:tag' : 'Tags current state of database with a tag to allow for rollback of database to previous versions.' ) {
  depends ( 'upgrade:database:init' , 'common:init' , 'install:database:prep' )
  if ( ! ( exclude.database ) ) {
    database-tag
  }
}
target ( 'upgrade-ncm:jboss' : 'Wrapper target to call all targets required to upgrade jboss container.' ) {
  depends ( 'upgrade:jboss:init' , 'common:init' , 'common:jboss:init' , 'install:jboss:validation:pre-install' , 'install:common:validation:pre-install' , 'install:jboss:stop' , 'install:jboss:validation:pre-install:ports' , 'install:jboss:bda-blueprints-webapp:re-configure' , 'install:jboss:bda-blueprints-webapp' , 'install:jboss:bda-blueprints-webapp:configure' , 'install:jboss:grid' , 'install:jboss:grid:configure' , 'install:post:jboss' , 'install:jboss:start' , 'install:jboss:validation:post-install' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'install:jboss:binaries' : 'Install JBoss binaries' ) {
  depends ( 'common:jboss:init' , 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    jboss-install-binaries
    jboss-nci-customizations
  }
}
target ( 'upgrade:common:init:prep' : '' ) {
  if ( ! ( install.running ) ) {
    if {
      not {
        isset ( 'property' : 'application.base.path' )
      }
      then {
        condition ( 'property' : 'application.base.path' , 'value' : '${application.base.path.linux}' ) {
          or {
            os ( 'family' : 'unix' )
            os ( 'family' : 'mac' )
          }
        }
        condition ( 'property' : 'application.base.path' , 'value' : '${application.base.path.windows}' ) {
          os ( 'family' : 'windows' )
        }
        echo ( 'message' : 'application.base.path=${application.base.path}' )
      }
    }
    properties-print ( 'properties.list' : 'application.base.path,jboss.home,tomcat.home,jboss.server.name' )
    var ( 'name' : 'read.properties.list' , 'value' : '' )
    property ( 'name' : 'upgrade.running' , 'value' : 'true' )
  }
}
target ( 'upgrade:tomcat' : 'Wrapper target to call all targets required to upgrade tomcat container.' ) {
  depends ( 'upgrade:tomcat:init' , 'common:init' , 'upgrade-dac:tomcat' )
  if ( ! ( exclude.tomcat ) ) {
  }
}
target ( 'bda-blueprints-installer.install:jboss' : 'Wrapper scripts that calls all required targets to install the jboss container' ) {
  depends ( 'common:jboss:init' , 'common:init' , 'install:jboss:init' , 'install:jboss:validation:pre-install' , 'install:common:validation:pre-install' , 'install:jboss:stop' , 'install:jboss:validation:pre-install:ports' , 'install:jboss:clean' , 'install:jboss:binaries' , 'install:jboss:bda-blueprints-webapp:re-configure' , 'install:jboss:bda-blueprints-webapp' , 'install:jboss:bda-blueprints-webapp:configure' , 'install:jboss:configure' , 'install:jboss:grid' , 'install:jboss:grid:configure' , 'install:post:jboss' , 'install:jboss:start' , 'install:jboss:validation:post-install' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'upgrade-dac:tomcat' : 'Wrapper target to call all targets required to upgrade tomcat container.' ) {
  depends ( 'upgrade:tomcat:init' , 'common:init' , 'common:tomcat:init' , 'install:tomcat:validation:pre-install' , 'install:common:validation:pre-install' , 'install:tomcat:stop' , 'install:tomcat:validation:pre-install:ports' , 'install:tomcat:clean' , 'install:tomcat:binaries' , 'install:tomcat:configure' , 'install:tomcat:bda-blueprints-webapp:re-configure' , 'install:tomcat:bda-blueprints-webapp' , 'install:tomcat:bda-blueprints-webapp:configure' , 'install:tomcat:grid' , 'install:tomcat:grid:configure' , 'upgrade:post:tomcat' , 'install:post:tomcat' , 'install:tomcat:start' , 'install:tomcat:validation:post-install' )
  if ( ! ( exclude.tomcat ) ) {
  }
}
target ( 'bda-blueprints-installer.upgrade:jboss' : 'Wrapper target to call all targets required to upgrade jboss container.' ) {
  depends ( 'upgrade:jboss:init' , 'common:init' , 'upgrade-dac:jboss' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'bda-blueprints-installer.upgrade-dac:tomcat' : 'Wrapper target to call all targets required to upgrade tomcat container.' ) {
  depends ( 'upgrade:tomcat:init' , 'common:init' , 'common:tomcat:init' , 'install:tomcat:validation:pre-install' , 'install:common:validation:pre-install' , 'install:tomcat:stop' , 'install:tomcat:validation:pre-install:ports' , 'install:tomcat:clean' , 'install:tomcat:binaries' , 'install:tomcat:configure' , 'install:tomcat:bda-blueprints-webapp:re-configure' , 'install:tomcat:bda-blueprints-webapp' , 'install:tomcat:bda-blueprints-webapp:configure' , 'install:tomcat:grid' , 'install:tomcat:grid:configure' , 'upgrade:post:tomcat' , 'install:post:tomcat' , 'install:tomcat:start' , 'install:tomcat:validation:post-install' )
  if ( ! ( exclude.tomcat ) ) {
  }
}
target ( 'bda-blueprints-installer.install:jboss:validation:post-install' : 'Run post-install checks from bda-utils' ) {
  depends ( 'common:jboss:init' , 'common:init' , 'install:jboss:start' )
  if {
    not {
      isset ( 'property' : 'exclude.start.servers' )
    }
    then {
      validate-post-jboss
    }
  }
}
target ( 'install:tomcat:validation:pre-install' : 'Runs pre-install validation checks bda-utils' ) {
  depends ( 'common:tomcat:init' , 'common:init' , 'install:common:validation:pre-install' )
  validate-pre-install-tomcat
}
target ( 'bda-blueprints-installer.install:jboss:init' : '' ) {
  depends ( 'common:init:pre' )
  if ( ! ( upgrade.running ) ) {
    if {
      isset ( 'property' : 'jboss.ncicb-standard.port-config' )
      then {
        echo ( 'message' : 'Using JBoss NCICB Standard port configurations' )
        property ( 'name' : 'jboss.server.binding.template.location' , 'value' : '${basedir}/${jboss-bindings.file}' )
        jboss-read-ports ( 'jboss.server.bindingfile.location' : '${jboss.server.binding.template.location}' )
        echo ( 'message' : 'http -${jboss.server.port} ' )
        echo ( 'message' : 'http -${jboss.server.jndi.port} ' )
        properties-exist ( 'properties.list' : 'jboss.server.jndi.port,jboss.server.port,jboss.server.ports.name' )
        jboss-bindings-validate ( 'jboss.server.bindingfile.location' : '${jboss.server.binding.template.location}' )
      }
      else {
        echo ( 'message' : 'Using custom JBoss port configurations' )
        property ( 'name' : 'jboss.server.binding.template.location' , 'value' : '${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml' )
        properties-exist ( 'properties.list' : 'jboss.server.jndi.port,jboss.server.port,jboss.cobraorb.port,jboss.ejbinvoker.port,jboss.hajndi.port,jboss.hajrmi.port,jboss.jms.port,jboss.jmx-rmi.port,jboss.messaging.port,jboss.pooledha.port,jboss.remoting.port,jboss.server.bind.port,jboss.server.rmi.port,jboss.service.rmiobject.port,jboss.snmp.port,jboss.snmp-trapd.port,jboss.web.service.port' )
      }
    }
  }
}
target ( 'upgrade-cm:tomcat' : 'Wrapper target to call all targets required to upgrade tomcat container.' ) {
  depends ( 'upgrade:tomcat:init' , 'common:init' , 'common:tomcat:init' , 'install:tomcat:validation:pre-install' , 'install:common:validation:pre-install' , 'install:tomcat:stop' , 'install:tomcat:validation:pre-install:ports' , 'install:tomcat:configure' , 'install:tomcat:bda-blueprints-webapp:re-configure' , 'install:tomcat:bda-blueprints-webapp' , 'install:tomcat:bda-blueprints-webapp:configure' , 'install:tomcat:grid' , 'install:tomcat:grid:configure' , 'upgrade:post:tomcat' , 'install:post:tomcat' , 'install:tomcat:start' , 'install:tomcat:validation:post-install' )
  if ( ! ( exclude.tomcat ) ) {
  }
}
target ( 'bda-blueprints-installer.install:post:jboss' : '' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    if {
      not {
        equals ( 'arg2' : 'true' , 'arg1' : '${exclude.jboss.backup}' )
      }
      then {
        property ( 'location' : '${install-logs.dir}/chagneLog-${install.time}.txt' , 'name' : 'changelogFile' )
        property ( 'location' : '${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}' , 'name' : 'compare1.dir' )
        property ( 'location' : '${jboss.home}' , 'name' : 'compare2.dir' )
        report-dir-diff ( 'reportFile' : '${changelogFile}' , 'dir2' : '${compare2.dir}' , 'dir1' : '${compare1.dir}' )
        mkdir ( 'dir' : '${jboss.home}/server/${jboss.server.name}/log' )
        mkdir ( 'dir' : '${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}/server/${jboss.server.name}/log' )
        move ( 'todir' : '${jboss.home}/server/${jboss.server.name}/log' ) {
          fileset ( 'dir' : '${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}/server/${jboss.server.name}/log' ) {
            include ( 'name' : '*' )
          }
        }
        mkdir ( 'dir' : '${backup.jboss.base.dir}/backup1' )
        zip ( 'basedir' : '${backup.jboss.base.dir}/backup' , 'destfile' : '${backup.jboss.base.dir}/backup1/${jboss.binaries.relative.dir}.zip' )
        delete ( 'dir' : '${backup.jboss.base.dir}/backup' )
      }
    }
  }
}
target ( 'bda-blueprints-installer.install:jboss:binaries' : 'Install JBoss binaries' ) {
  depends ( 'common:jboss:init' , 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    jboss-install-binaries
    jboss-nci-customizations
  }
}
target ( 'install:common:post' : '' ) {
  depends ( 'common:init' , 'install:post:jboss' , 'install:post:tomcat' )
}
target ( 'bda-blueprints-installer.upgrade:database:readers:custom' : '' ) {
  if ( ! ( install.running ) ) {
  }
}
target ( 'diag' : '' ) {
  echoproperties
}
target ( 'bda-blueprints-installer.upgrade-ncm:jboss' : 'Wrapper target to call all targets required to upgrade jboss container.' ) {
  depends ( 'upgrade:jboss:init' , 'common:init' , 'common:jboss:init' , 'install:jboss:validation:pre-install' , 'install:common:validation:pre-install' , 'install:jboss:stop' , 'install:jboss:validation:pre-install:ports' , 'install:jboss:bda-blueprints-webapp:re-configure' , 'install:jboss:bda-blueprints-webapp' , 'install:jboss:bda-blueprints-webapp:configure' , 'install:jboss:grid' , 'install:jboss:grid:configure' , 'install:post:jboss' , 'install:jboss:start' , 'install:jboss:validation:post-install' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'bda-blueprints-installer.install:database:prep' : 'Copies db files with filtering' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.database ) ) {
    property ( 'name' : 'db.prop.list' , 'value' : 'database.url,database.user,database.password,database.name' )
    echo ( 'message' : 'Checking if database properties exist: ${db.prop.list}' )
    properties-exist ( 'properties.list' : '${db.prop.list}' )
    echoproperties ( 'prefix' : 'database' )
    copy ( 'todir' : '${db.dir.dest}' , 'filtering' : 'true' ) {
      fileset ( 'dir' : '${db.dir.src}' ) {
        include ( 'name' : '**/*' )
      }
      filterset ( 'refid' : 'embedded.filterset' )
      filterset {
        filtersfile ( 'file' : '${properties.file}' )
        filtersfile ( 'file' : 'project.properties' )
      }
    }
    mkdir ( 'dir' : '${os.temp.dir}/${project.name}' )
    copy ( 'todir' : '${os.temp.dir}/${project.name}' , 'overwrite' : 'true' , 'filtering' : 'true' , 'flatten' : 'true' ) {
      fileset ( 'dir' : '${db.dir.dest}' ) {
        include ( 'name' : '**/db-upgrade.xml' )
      }
    }
  }
}
target ( 'upgrade:tomcat:init:prep' : '' ) {
  depends ( 'upgrade:common:init:prep' )
  if ( ! ( install.running ) ) {
    property ( 'name' : 'tomcat.home' , 'value' : '${application.base.path}/${tomcat.relative.path}' )
    available ( 'file' : '${tomcat.home}' , 'property' : 'tomcat.exists' )
    property ( 'name' : 'read.tomcat.home' , 'value' : '${tomcat.home}' )
  }
}
target ( 'upgrade-cm:jboss' : 'Wrapper target to call all targets required to upgrade jboss container.' ) {
  depends ( 'upgrade:jboss:init' , 'common:init' , 'common:jboss:init' , 'install:jboss:validation:pre-install' , 'install:common:validation:pre-install' , 'install:jboss:stop' , 'install:jboss:validation:pre-install:ports' , 'install:jboss:configure' , 'install:jboss:bda-blueprints-webapp:re-configure' , 'install:jboss:bda-blueprints-webapp' , 'install:jboss:bda-blueprints-webapp:configure' , 'install:jboss:grid' , 'install:jboss:grid:configure' , 'upgrade:post:jboss' , 'install:post:jboss' , 'install:jboss:start' , 'install:jboss:validation:post-install' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'common:tomcat:init' : '' ) {
  depends ( 'common:init:pre' )
  if ( ! ( exclude.tomcat ) ) {
    property ( 'name' : 'tomcat.ssl.enable' , 'value' : 'false' )
    property ( 'name' : 'tomcat.home' , 'value' : '${application.base.path}/${tomcat.relative.path}' )
    property ( 'name' : 'tomcat.application.url' , 'value' : 'http://${tomcat.hostname}:${tomcat.port.http}/${bda-blueprints-webapp.name}' )
    basename ( 'file' : '${tomcat.ssl.keystore.location}' , 'property' : 'tomcat.ssl.keystore.file' )
    dirname ( 'file' : '${tomcat.ssl.keystore.location}' , 'property' : 'tomcat.ssl.keystore.dir' )
    basename ( 'file' : '${tomcat.grid.secure.cert.location}' , 'property' : 'tomcat.grid.secure.cert.file' )
    dirname ( 'file' : '${tomcat.grid.secure.cert.location}' , 'property' : 'tomcat.grid.secure.dir' )
    basename ( 'file' : '${tomcat.grid.secure.key.location}' , 'property' : 'tomcat.grid.secure.key.file' )
    property ( 'name' : 'tomcat.sock.ports' , 'value' : '${tomcat.port.http},${tomcat.port.ajp},${tomcat.port.shutdown}' )
  }
}
target ( 'upgrade:tomcat:readers:bda' : '' ) {
  depends ( 'upgrade:tomcat:init:prep' )
  if ( tomcat.exists ) {
    properties-exist ( 'properties.list' : 'application.base.path,tomcat.home' )
    osfamily ( 'property' : 'os.family' )
    if {
      or {
        equals ( 'arg2' : 'unix' , 'arg1' : '${os.family}' )
        equals ( 'arg2' : 'mac' , 'arg1' : '${os.family}' )
      }
      then {
        property ( 'name' : 'tomcat.hostname' , 'value' : '${env.HOSTNAME}' )
      }
    }
    if {
      equals ( 'arg2' : 'windows' , 'arg1' : '${os.family}' )
      then {
        property ( 'name' : 'tomcat.hostname' , 'value' : '${env.COMPUTERNAME}' )
      }
    }
    tomcat-read-ports ( 'tomcat.home' : '${read.tomcat.home}' )
    var ( 'name' : 'tomcat.ssl.keystore.dir' , 'value' : '${working.dir}/keys/tomcat' )
    tomcat-read-ssl ( 'copied.keystore.dir' : '${tomcat.ssl.keystore.dir}' , 'tomcat.home' : '${read.tomcat.home}' )
    tomcat-read-external-hostname ( 'tomcat.home' : '${read.tomcat.home}' )
    grid-read-index-url ( 'grid.wsrf.dir' : '${read.tomcat.home}/webapps/wsrf' )
    var ( 'name' : 'tomcat.grid.secure.dir' , 'value' : '${working.dir}/keys/tomcat' )
    tomcat-read-grid-secure ( 'copied.keystore.dir' : '${tomcat.grid.secure.dir}' , 'tomcat.home' : '${read.tomcat.home}' )
    grid-read-poc ( 'grid.wsrf.dir' : '${read.tomcat.home}/webapps/wsrf' , 'grid.service.name' : 'Sample' )
    echo ( 'message' : 'All properties after readers' )
    tomcat-read-dbconfig
  }
}
target ( 'bda-blueprints-installer.upgrade-cm:tomcat' : 'Wrapper target to call all targets required to upgrade tomcat container.' ) {
  depends ( 'upgrade:tomcat:init' , 'common:init' , 'common:tomcat:init' , 'install:tomcat:validation:pre-install' , 'install:common:validation:pre-install' , 'install:tomcat:stop' , 'install:tomcat:validation:pre-install:ports' , 'install:tomcat:configure' , 'install:tomcat:bda-blueprints-webapp:re-configure' , 'install:tomcat:bda-blueprints-webapp' , 'install:tomcat:bda-blueprints-webapp:configure' , 'install:tomcat:grid' , 'install:tomcat:grid:configure' , 'upgrade:post:tomcat' , 'install:post:tomcat' , 'install:tomcat:start' , 'install:tomcat:validation:post-install' )
  if ( ! ( exclude.tomcat ) ) {
  }
}
target ( 'install:jboss:validation:post-install' : 'Run post-install checks from bda-utils' ) {
  depends ( 'common:jboss:init' , 'common:init' , 'install:jboss:start' )
  if {
    not {
      isset ( 'property' : 'exclude.start.servers' )
    }
    then {
      validate-post-jboss
    }
  }
}
target ( 'bda-blueprints-installer.common:tomcat:init' : '' ) {
  depends ( 'common:init:pre' )
  if ( ! ( exclude.tomcat ) ) {
    property ( 'name' : 'tomcat.ssl.enable' , 'value' : 'false' )
    property ( 'name' : 'tomcat.home' , 'value' : '${application.base.path}/${tomcat.relative.path}' )
    property ( 'name' : 'tomcat.application.url' , 'value' : 'http://${tomcat.hostname}:${tomcat.port.http}/${bda-blueprints-webapp.name}' )
    basename ( 'file' : '${tomcat.ssl.keystore.location}' , 'property' : 'tomcat.ssl.keystore.file' )
    dirname ( 'file' : '${tomcat.ssl.keystore.location}' , 'property' : 'tomcat.ssl.keystore.dir' )
    basename ( 'file' : '${tomcat.grid.secure.cert.location}' , 'property' : 'tomcat.grid.secure.cert.file' )
    dirname ( 'file' : '${tomcat.grid.secure.cert.location}' , 'property' : 'tomcat.grid.secure.dir' )
    basename ( 'file' : '${tomcat.grid.secure.key.location}' , 'property' : 'tomcat.grid.secure.key.file' )
    property ( 'name' : 'tomcat.sock.ports' , 'value' : '${tomcat.port.http},${tomcat.port.ajp},${tomcat.port.shutdown}' )
  }
}
target ( 'bda-blueprints-installer.upgrade-dac' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'common:jboss:init' , 'common:tomcat:init' , 'install:common:validation:pre-install' , 'install:jboss:validation:pre-install' , 'install:tomcat:validation:pre-install' , 'install:database:validation:pre-install' , 'install:jboss:stop' , 'install:tomcat:stop' , 'upgrade:database' , 'upgrade:jboss' , 'upgrade:tomcat' , 'install:common:validation:post-install' )
}
target ( 'install:common:validation:pre-install' : 'Runs pre-install validation checks bda-utils' ) {
  depends ( 'common:init' )
  validate-pre-install-common ( 'ant.check.version' : '${ant.minimum.version}' , 'java.check.version.major' : '${java.major.version}' , 'java.check.version.minor' : '${java.minor.version}' )
}
target ( 'upgrade' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'upgrade-dac' )
}
target ( 'bda-blueprints-installer.install:common:validation:pre-install' : 'Runs pre-install validation checks bda-utils' ) {
  depends ( 'common:init' )
  validate-pre-install-common ( 'ant.check.version' : '${ant.minimum.version}' , 'java.check.version.major' : '${java.major.version}' , 'java.check.version.minor' : '${java.minor.version}' )
}
target ( 'install:jboss:bda-blueprints-webapp:filesystem-data' : '' ) {
  depends ( 'common:jboss:init' , 'common:init' )
}
target ( 'bda-blueprints-installer.install:tomcat:bda-blueprints-webapp:re-configure' : 'Configure bda-blueprints-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
  }
}
target ( 'upgrade:database:readers:bda' : '' ) {
  depends ( 'upgrade:jboss:init:prep' )
  if ( jboss.exists ) {
    properties-exist ( 'properties.list' : 'application.base.path,jboss.home,jboss.server.name' )
    jboss-read-dbconfig ( 'jboss.home' : '${read.jboss.home}' , 'jboss.ds-xml.file' : 'bda-blueprints-ds.xml' )
  }
}
target ( 'install:tomcat:validation:pre-install:ports' : 'Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop' ) {
  depends ( 'common:init' , 'install:tomcat:stop' )
  validate-pre-tomcat-ports
}
target ( 'bda-blueprints-installer.install:tomcat:start' : 'Start Tomcat' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    if {
      not {
        isset ( 'property' : 'exclude.start.servers' )
      }
      then {
        tomcat-start ( 'tomcat.home' : '${tomcat.home}' )
      }
    }
  }
}
target ( 'bda-blueprints-installer.install:jboss:start' : 'Starts jboss' ) {
  depends ( 'common:jboss:init' , 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    if {
      not {
        isset ( 'property' : 'exclude.start.servers' )
      }
      then {
        jboss-start-jboss
        sleep ( 'seconds' : '15' )
      }
    }
  }
}
target ( 'bda-blueprints-installer.upgrade-cm' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'common:jboss:init' , 'common:tomcat:init' , 'install:common:validation:pre-install' , 'install:jboss:validation:pre-install' , 'install:tomcat:validation:pre-install' , 'install:database:validation:pre-install' , 'install:jboss:stop' , 'install:tomcat:stop' , 'upgrade:database' , 'upgrade:jboss' , 'upgrade:tomcat' , 'install:common:validation:post-install' )
}
target ( 'bda-blueprints-installer.upgrade:tomcat:readers:custom' : '' ) {
  if ( ! ( install.running ) ) {
  }
}
target ( 'bda-blueprints-installer.upgrade:jboss:readers:bda' : '' ) {
  if ( jboss.exists ) {
    properties-exist ( 'properties.list' : 'application.base.path,jboss.home,jboss.server.name' )
    osfamily ( 'property' : 'os.family' )
    if {
      or {
        equals ( 'arg2' : 'unix' , 'arg1' : '${os.family}' )
        equals ( 'arg2' : 'mac' , 'arg1' : '${os.family}' )
      }
      then {
        property ( 'name' : 'jboss.server.hostname' , 'value' : '${env.HOSTNAME}' )
      }
    }
    if {
      equals ( 'arg2' : 'windows' , 'arg1' : '${os.family}' )
      then {
        property ( 'name' : 'jboss.server.hostname' , 'value' : '${env.COMPUTERNAME}' )
      }
    }
    jboss-read-dbconfig ( 'jboss.home' : '${read.jboss.home}' , 'jboss.ds-xml.file' : 'bda-blueprints-ds.xml' )
    jboss-read-ldapconfig ( 'jboss.home' : '${read.jboss.home}' )
    jboss-read-bindings-file-location ( 'jboss.home' : '${read.jboss.home}' )
    jboss-read-ports
    var ( 'name' : 'jboss.ssl.keystore.dir' , 'value' : '${working.dir}/keys/jboss' )
    jboss-read-ssl ( 'jboss.home' : '${read.jboss.home}' , 'copied.keystore.dir' : '${jboss.ssl.keystore.dir}' )
    jboss-read-external-hostname ( 'jboss.home' : '${read.jboss.home}' )
    jboss-read-java_opts ( 'jboss.bin.dir' : '${read.jboss.home}/server/${jboss.server.name}/bin' )
    jboss-read-java_opts ( 'jboss.home' : '${read.jboss.home}' )
    property ( 'name' : 'copied.jboss.log4j.dir' , 'value' : '${working.dir}/copied-log4j' )
    jboss-copy-log4j ( 'jboss.home' : '${read.jboss.home}' , 'copied.jboss.log4j.dir' : '${copied.jboss.log4j.dir}' )
    grid-read-index-url ( 'grid.wsrf.dir' : '${read.jboss.home}/server/${jboss.server.name}/deploy/wsrf' )
    var ( 'name' : 'jboss.grid.secure.dir' , 'value' : '${working.dir}/keys/jboss' )
    jboss-read-grid-secure ( 'jboss.home' : '${read.jboss.home}' , 'copied.keystore.dir' : '${jboss.grid.secure.dir}' )
    grid-read-poc ( 'grid.wsrf.dir' : '${read.jboss.home}/server/${jboss.server.name}/deploy/wsrf' , 'grid.service.name' : 'Sample' )
    read-property-from-properties-service ( 'jboss.home' : '${read.jboss.home}' , 'property.name' : 'property1' )
    read-property-from-properties-service ( 'jboss.home' : '${read.jboss.home}' , 'property.name' : 'property2' )
  }
}
target ( 'bda-blueprints-installer.install:common:clean' : 'Removes all files from the local filesystem' ) {
  depends ( 'common:init' , 'install:jboss:clean' , 'install:tomcat:clean' )
}
target ( 'upgrade-with-dbinstall' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'upgrade-dac:with-dbinstall' )
}
target ( 'install:bda-blueprints-grid' : 'Wrapper target for Grid application targets' ) {
  depends ( 'common:init' , 'install:jboss:grid' , 'install:jboss:grid:configure' )
}
target ( 'bda-blueprints-installer.diag' : '' ) {
  echoproperties
}
target ( 'install:jboss:bda-blueprints-webapp:configure' : 'Configure bda-blueprints-webapp application, copies over externalized properties or configurations that are not part of the jboss configuration' ) {
  depends ( 'common:jboss:init' , 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    copy ( 'todir' : '${jboss.home}/server/${jboss.server.name}/deploy' , 'overwrite' : 'true' , 'file' : '${jboss-conf.dir.dest}/${bda-blueprints-webapp.ds.file}' )
    var ( 'name' : 'property.block' , 'value' : 'property1=${authentication.type}${line.separator}    property2=${env.name}${line.separator}    property3=${jboss.home}${line.separator}    property4=${tomcat.home}${line.separator}    ' )
    copy ( 'overwrite' : 'true' , 'file' : '${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml' , 'tofile' : '${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml.orig' )
    jboss-update-properties-service ( 'property.block' : '${property.block}' )
  }
}
target ( 'bda-blueprints-installer.upgrade:database' : 'Upgrades database using BDA Datbase Upgrade process.' ) {
  depends ( 'upgrade:database:init' , 'common:init' , 'install:database:prep' , 'install:database:validation:pre-install' )
  if ( ! ( exclude.database ) ) {
    database-upgrade ( 'database.changelog.file' : '${os.temp.dir}/${project.name}/db-upgrade.xml' )
    database-tag
  }
}
target ( 'bda-blueprints-installer.install:jboss:bda-blueprints-webapp:configure' : 'Configure bda-blueprints-webapp application, copies over externalized properties or configurations that are not part of the jboss configuration' ) {
  depends ( 'common:jboss:init' , 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    copy ( 'todir' : '${jboss.home}/server/${jboss.server.name}/deploy' , 'overwrite' : 'true' , 'file' : '${jboss-conf.dir.dest}/${bda-blueprints-webapp.ds.file}' )
    var ( 'name' : 'property.block' , 'value' : 'property1=${authentication.type}${line.separator}    property2=${env.name}${line.separator}    property3=${jboss.home}${line.separator}    property4=${tomcat.home}${line.separator}    ' )
    copy ( 'overwrite' : 'true' , 'file' : '${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml' , 'tofile' : '${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml.orig' )
    jboss-update-properties-service ( 'property.block' : '${property.block}' )
  }
}
target ( 'bda-blueprints-installer.install:jboss:grid:configure' : 'Configure tomcat-application' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    jboss-configure-grid
  }
}
target ( 'install' : 'Installs and configures JBOSS, creates database, and deploys application' ) {
  depends ( 'common:jboss:init' , 'common:tomcat:init' , 'common:init' , 'install:jboss:init' , 'install:common:validation:pre-install' , 'install:jboss:validation:pre-install' , 'install:tomcat:validation:pre-install' , 'install:database:validation:pre-install' , 'install:jboss:stop' , 'install:tomcat:stop' , 'install:jboss:validation:pre-install:ports' , 'install:tomcat:validation:pre-install:ports' , 'install:common:clean' , 'install:database' , 'install:tomcat' , 'install:jboss' , 'install:common:post' , 'install:jboss:start' , 'install:common:validation:post-install' )
}
target ( 'upgrade-cm:with-dbinstall' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'common:jboss:init' , 'common:tomcat:init' , 'install:common:validation:pre-install' , 'install:jboss:validation:pre-install' , 'install:tomcat:validation:pre-install' , 'install:database:validation:pre-install' , 'install:jboss:stop' , 'install:tomcat:stop' , 'install:database' , 'upgrade:jboss' , 'upgrade:tomcat' , 'install:common:validation:post-install' )
}
target ( 'upgrade:database:readers:custom' : '' ) {
  if ( ! ( install.running ) ) {
  }
}
target ( 'common:jboss:init' : '' ) {
  depends ( 'common:init:pre' )
  if ( ! ( exclude.jboss ) ) {
    math ( 'result' : 'jboss.ssl.port' , 'operation' : '+' , 'operand2' : '363' , 'operand1' : '${jboss.server.port}' , 'datatype' : 'int' )
    property ( 'name' : 'jboss.ssl.enable' , 'value' : 'false' )
    property ( 'name' : 'jboss.home' , 'value' : '${application.base.path}/${jboss.relative.path}' )
    property ( 'name' : 'jboss.application.url' , 'value' : 'http://${jboss.server.hostname}:${jboss.server.port}/${bda-blueprints-webapp.name}' )
    available ( 'file' : '${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml' , 'property' : 'jboss.exists' )
    basename ( 'file' : '${jboss.ssl.keystore.location}' , 'property' : 'jboss.ssl.keystore.file' )
    dirname ( 'file' : '${jboss.ssl.keystore.location}' , 'property' : 'jboss.ssl.keystore.dir' )
    basename ( 'file' : '${jboss.grid.secure.cert.location}' , 'property' : 'jboss.grid.secure.cert.file' )
    dirname ( 'file' : '${jboss.grid.secure.cert.location}' , 'property' : 'jboss.grid.secure.dir' )
    basename ( 'file' : '${jboss.grid.secure.key.location}' , 'property' : 'jboss.grid.secure.key.file' )
    property ( 'name' : 'jboss.socket.ports' , 'value' : '${jboss.server.port},${jboss.server.rmi.port},${jboss.server.jndi.port},${jboss.service.rmiobject.port},${jboss.jms.port},${jboss.web.service.port}' )
  }
}
target ( 'upgrade:tomcat:readers:custom' : '' ) {
  if ( ! ( install.running ) ) {
  }
}
target ( 'bda-blueprints-installer.install:tomcat:clean' : '' ) {
  depends ( 'common:tomcat:init' )
  if ( ! ( exclude.tomcat ) ) {
    sleep ( 'seconds' : '5' )
    property ( 'name' : 'backup.count' , 'value' : '5' )
    if {
      not {
        equals ( 'arg2' : 'true' , 'arg1' : '${exclude.tomcat.backup}' )
      }
      then {
        property ( 'location' : '${application.base.path}/backup/tomcat' , 'name' : 'backup.tomcat.base.dir' )
        backup-dir ( 'src.dir' : '${tomcat.home}' , 'backup.base.dir' : '${backup.tomcat.base.dir}' , 'backup.count' : '${backup.count}' )
      }
    }
    delete ( 'dir' : '${tomcat.home}' )
  }
}
target ( 'install:jboss:start' : 'Starts jboss' ) {
  depends ( 'common:jboss:init' , 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    if {
      not {
        isset ( 'property' : 'exclude.start.servers' )
      }
      then {
        jboss-start-jboss
        sleep ( 'seconds' : '15' )
      }
    }
  }
}
target ( 'bda-blueprints-installer.install:jboss:clean' : '' ) {
  depends ( 'common:jboss:init' , 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    sleep ( 'seconds' : '5' )
    property ( 'name' : 'backup.count' , 'value' : '5' )
    if {
      not {
        equals ( 'arg2' : 'true' , 'arg1' : '${exclude.jboss.backup}' )
      }
      then {
        property ( 'location' : '${application.base.path}/backup/jboss' , 'name' : 'backup.jboss.base.dir' )
        delete ( 'dir' : '${jboss.home}/server/${jboss.server.name}/work' )
        delete ( 'dir' : '${jboss.home}/server/${jboss.server.name}/tmp' )
        backup-dir ( 'src.dir' : '${jboss.home}' , 'backup.base.dir' : '${backup.jboss.base.dir}' , 'backup.count' : '${backup.count}' )
      }
    }
    delete ( 'dir' : '${jboss.home}' )
  }
}
target ( 'common:init:pre' : '' ) {
  condition ( 'property' : 'application.base.path' , 'value' : '${application.base.path.linux}' ) {
    or {
      os ( 'family' : 'unix' )
      os ( 'family' : 'mac' )
    }
  }
  condition ( 'property' : 'application.base.path' , 'value' : '${application.base.path.windows}' ) {
    os ( 'family' : 'windows' )
  }
  echo ( 'message' : 'application.base.path=${application.base.path}' )
  property ( 'name' : 'jboss.home' , 'value' : '${application.base.path}/${jboss.relative.path}' )
  property ( 'name' : 'tomcat.home' , 'value' : '${application.base.path}/${tomcat.relative.path}' )
}
target ( 'common:init' : '' ) {
  depends ( 'common:init:pre' )
  property ( 'name' : 'install.running' , 'value' : 'true' )
  echoproperties ( 'prefix' : 'database' )
  switch ( 'value' : '${database.type}' ) {
    case ( 'value' : 'oracle' ) {
      property ( 'name' : 'database.dialect' , 'value' : 'org.hibernate.dialect.OracleDialect' )
      property ( 'name' : 'database.driver.file' , 'value' : '${bda-utils.dir}/ojdbc14-10.2.0.4.0.jar' )
      property ( 'name' : 'database.driver' , 'value' : 'oracle.jdbc.driver.OracleDriver' )
      property ( 'name' : 'database.schema' , 'value' : '${database.name}' )
    }
    case ( 'value' : 'mysql' ) {
      property ( 'name' : 'database.dialect' , 'value' : 'org.hibernate.dialect.MySQLDialect' )
      property ( 'name' : 'database.driver.file' , 'value' : '${bda-utils.dir}/mysql-connector-java-5.0.8.jar' )
      property ( 'name' : 'database.driver' , 'value' : 'com.mysql.jdbc.Driver' )
      property ( 'name' : 'database.schema' , 'value' : '${database.name}' )
    }
    case ( 'value' : 'postgresql' ) {
      property ( 'name' : 'database.dialect' , 'value' : 'org.hibernate.dialect.PostgreSQLDialect' )
      property ( 'name' : 'database.driver.file' , 'value' : '${bda-utils.dir}/postgresql-jdbc3-8.3-604.jar' )
      property ( 'name' : 'database.driver' , 'value' : 'org.postgresql.Driver' )
      property ( 'name' : 'database.schema' , 'value' : 'public' )
    }
    default {
      fail ( 'message' : 'Invalid database type ${database.type}' )
    }
  }
  path ( 'id' : 'jdbc.driver.classpath' ) {
    pathelement ( 'location' : '${database.driver.file}' )
  }
  property ( 'name' : 'properties.template.file' , 'value' : '${basedir}/properties.template' )
  filterset ( 'id' : 'embedded.filterset' ) {
    filter ( 'token' : 'application.base.path' , 'value' : '${application.base.path}' )
    filter ( 'token' : 'application.url' , 'value' : '${application.url}' )
    filter ( 'token' : 'database.url' , 'value' : '${database.url}' )
    filter ( 'token' : 'database.user' , 'value' : '${database.user}' )
    filter ( 'token' : 'database.password' , 'value' : '${database.password}' )
    filter ( 'token' : 'database.system.url' , 'value' : '${database.system.url}' )
    filter ( 'token' : 'database.driver' , 'value' : '${database.driver}' )
    filter ( 'token' : 'db-upgrade.run.dir' , 'value' : '${db-upgrade.dir.dest}/${database.type}' )
    filter ( 'token' : 'jboss.home' , 'value' : '${jboss.home}' )
    filter ( 'token' : 'tomcat.home' , 'value' : '${tomcat.home}' )
    filter ( 'token' : 'database.dialect' , 'value' : '${database.dialect}' )
    filter ( 'token' : 'hibernate.cfg.file.path' , 'value' : '${hibernate.cfg.file.path}' )
    filter ( 'token' : 'env.LOGNAME' , 'value' : '${env.LOGNAME}' )
    filter ( 'token' : 'env.JAVA_HOME' , 'value' : '${env.JAVA_HOME}' )
    filter ( 'token' : 'project.name' , 'value' : 'project.name' )
    filter ( 'token' : '' , 'value' : '' )
  }
  condition ( 'property' : 'os.temp.dir' , 'value' : '/tmp' ) {
    or {
      os ( 'family' : 'unix' )
      os ( 'family' : 'mac' )
    }
  }
  condition ( 'property' : 'os.temp.dir' , 'value' : 'c:/temp' ) {
    os ( 'family' : 'windows' )
  }
  copy ( 'todir' : '${common.dir.dest}' , 'filtering' : 'true' ) {
    fileset ( 'dir' : '${common.dir.src}' ) {
      include ( 'name' : '**/*' )
    }
    filterset ( 'refid' : 'embedded.filterset' )
    filterset {
      filtersfile ( 'file' : '${properties.file}' )
      filtersfile ( 'file' : 'project.properties' )
    }
  }
}
target ( 'bda-blueprints-installer.upgrade-with-dbinstall' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'upgrade-dac:with-dbinstall' )
}
target ( 'bda-blueprints-installer.install:jboss:validation:pre-install' : 'Runs pre-install validation checks bda-utils' ) {
  depends ( 'common:jboss:init' , 'common:init' , 'install:common:validation:pre-install' )
  validate-pre-install-jboss
}
target ( 'bda-blueprints-installer.upgrade' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'upgrade-dac' )
}
target ( 'bda-blueprints-installer.common:jboss:init' : '' ) {
  depends ( 'common:init:pre' )
  if ( ! ( exclude.jboss ) ) {
    math ( 'result' : 'jboss.ssl.port' , 'operation' : '+' , 'operand2' : '363' , 'operand1' : '${jboss.server.port}' , 'datatype' : 'int' )
    property ( 'name' : 'jboss.ssl.enable' , 'value' : 'false' )
    property ( 'name' : 'jboss.home' , 'value' : '${application.base.path}/${jboss.relative.path}' )
    property ( 'name' : 'jboss.application.url' , 'value' : 'http://${jboss.server.hostname}:${jboss.server.port}/${bda-blueprints-webapp.name}' )
    available ( 'file' : '${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml' , 'property' : 'jboss.exists' )
    basename ( 'file' : '${jboss.ssl.keystore.location}' , 'property' : 'jboss.ssl.keystore.file' )
    dirname ( 'file' : '${jboss.ssl.keystore.location}' , 'property' : 'jboss.ssl.keystore.dir' )
    basename ( 'file' : '${jboss.grid.secure.cert.location}' , 'property' : 'jboss.grid.secure.cert.file' )
    dirname ( 'file' : '${jboss.grid.secure.cert.location}' , 'property' : 'jboss.grid.secure.dir' )
    basename ( 'file' : '${jboss.grid.secure.key.location}' , 'property' : 'jboss.grid.secure.key.file' )
    property ( 'name' : 'jboss.socket.ports' , 'value' : '${jboss.server.port},${jboss.server.rmi.port},${jboss.server.jndi.port},${jboss.service.rmiobject.port},${jboss.jms.port},${jboss.web.service.port}' )
  }
}
target ( 'bda-blueprints-installer.install:bda-blueprints-grid' : 'Wrapper target for Grid application targets' ) {
  depends ( 'common:init' , 'install:jboss:grid' , 'install:jboss:grid:configure' )
}
target ( 'bda-blueprints-installer.upgrade-dac:jboss' : 'Wrapper target to call all targets required to upgrade jboss container.' ) {
  depends ( 'upgrade:jboss:init' , 'common:init' , 'common:jboss:init' , 'install:jboss:validation:pre-install' , 'install:common:validation:pre-install' , 'install:jboss:stop' , 'install:jboss:validation:pre-install:ports' , 'install:jboss:clean' , 'install:jboss:binaries' , 'install:jboss:configure' , 'install:jboss:bda-blueprints-webapp:re-configure' , 'install:jboss:bda-blueprints-webapp' , 'install:jboss:bda-blueprints-webapp:configure' , 'install:jboss:grid' , 'install:jboss:grid:configure' , 'upgrade:post:jboss' , 'install:post:jboss' , 'install:jboss:start' , 'install:jboss:validation:post-install' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'install:tomcat:bda-blueprints-webapp' : 'Deploy bda-blueprints-webapp and common libraries to tomcat installation' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    delete ( 'dir' : '${tomcat.home}/temp' )
    delete ( 'dir' : '${tomcat.home}/work' )
    copy ( 'todir' : '${tomcat.home}/webapps' , 'overwrite' : 'true' , 'file' : '${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}' )
    copy ( 'todir' : '${tomcat.home}/common/lib' , 'overwrite' : 'true' , 'file' : '${database.driver.file}' )
  }
}
target ( 'bda-blueprints-installer.install:tomcat:configure' : 'Configure tomcat (change ports)' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    tomcat-configure ( 'tomcat.grid.configure' : 'true' )
  }
}
target ( 'upgrade-dac:jboss' : 'Wrapper target to call all targets required to upgrade jboss container.' ) {
  depends ( 'upgrade:jboss:init' , 'common:init' , 'common:jboss:init' , 'install:jboss:validation:pre-install' , 'install:common:validation:pre-install' , 'install:jboss:stop' , 'install:jboss:validation:pre-install:ports' , 'install:jboss:clean' , 'install:jboss:binaries' , 'install:jboss:configure' , 'install:jboss:bda-blueprints-webapp:re-configure' , 'install:jboss:bda-blueprints-webapp' , 'install:jboss:bda-blueprints-webapp:configure' , 'install:jboss:grid' , 'install:jboss:grid:configure' , 'upgrade:post:jboss' , 'install:post:jboss' , 'install:jboss:start' , 'install:jboss:validation:post-install' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'bda-blueprints-installer.-install:jboss:configure:jbossmq-dest' : 'Configure MQ settings based on contents of software/common/resource/jboss-conf/jbossmq-destinations-service.block.xml' ) {
  depends ( 'common:jboss:init' , 'common:init' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'bda-blueprints-installer.install:tomcat:grid' : 'Deploy grid to tomcat' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    mkdir ( 'dir' : '${tomcat.home}/webapps/${grid.dir.dest}' )
    unzip ( 'dest' : '${tomcat.home}/common/lib' , 'src' : '${grid.resource.dir}/${resource.file.jboss-globus-lib}' ) {
      patternset {
        exclude ( 'name' : '**/cog-tomcat.jar' )
      }
    }
    unzip ( 'dest' : '${tomcat.home}/server/lib' , 'src' : '${grid.resource.dir}/${resource.file.jboss-globus-lib}' ) {
      patternset {
        include ( 'name' : '**/cog-tomcat.jar' )
      }
    }
    unzip ( 'dest' : '${tomcat.home}/webapps/${grid.dir.dest}' , 'src' : '${grid.resource.dir}/${resource.file.jboss-globus-war}' )
    unzip ( 'dest' : '${tomcat.home}/webapps/${grid.dir.dest}' , 'src' : '${grid.application.dir}/${grid.artifact.file}' )
  }
}
target ( 'bda-blueprints-installer.upgrade:post:tomcat' : '' ) {
}
target ( 'install:tomcat:bda-blueprints-webapp:configure' : 'Configure bda-blueprints-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
  }
}
target ( 'bda-blueprints-installer.install:tomcat:bda-blueprints-webapp:configure' : 'Configure bda-blueprints-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
  }
}
target ( 'install:jboss:clean' : '' ) {
  depends ( 'common:jboss:init' , 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    sleep ( 'seconds' : '5' )
    property ( 'name' : 'backup.count' , 'value' : '5' )
    if {
      not {
        equals ( 'arg2' : 'true' , 'arg1' : '${exclude.jboss.backup}' )
      }
      then {
        property ( 'location' : '${application.base.path}/backup/jboss' , 'name' : 'backup.jboss.base.dir' )
        delete ( 'dir' : '${jboss.home}/server/${jboss.server.name}/work' )
        delete ( 'dir' : '${jboss.home}/server/${jboss.server.name}/tmp' )
        backup-dir ( 'src.dir' : '${jboss.home}' , 'backup.base.dir' : '${backup.jboss.base.dir}' , 'backup.count' : '${backup.count}' )
      }
    }
    delete ( 'dir' : '${jboss.home}' )
  }
}
target ( 'upgrade-ncm:with-dbinstall' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'common:jboss:init' , 'common:tomcat:init' , 'install:common:validation:pre-install' , 'install:jboss:validation:pre-install' , 'install:tomcat:validation:pre-install' , 'install:database:validation:pre-install' , 'install:jboss:stop' , 'install:tomcat:stop' , 'install:database' , 'upgrade:jboss' , 'upgrade:tomcat' , 'install:common:validation:post-install' )
}
target ( 'bda-blueprints-installer.common:init:pre' : '' ) {
  condition ( 'property' : 'application.base.path' , 'value' : '${application.base.path.linux}' ) {
    or {
      os ( 'family' : 'unix' )
      os ( 'family' : 'mac' )
    }
  }
  condition ( 'property' : 'application.base.path' , 'value' : '${application.base.path.windows}' ) {
    os ( 'family' : 'windows' )
  }
  echo ( 'message' : 'application.base.path=${application.base.path}' )
  property ( 'name' : 'jboss.home' , 'value' : '${application.base.path}/${jboss.relative.path}' )
  property ( 'name' : 'tomcat.home' , 'value' : '${application.base.path}/${tomcat.relative.path}' )
}
target ( 'bda-blueprints-installer.upgrade:common:init:prep' : '' ) {
  if ( ! ( install.running ) ) {
    if {
      not {
        isset ( 'property' : 'application.base.path' )
      }
      then {
        condition ( 'property' : 'application.base.path' , 'value' : '${application.base.path.linux}' ) {
          or {
            os ( 'family' : 'unix' )
            os ( 'family' : 'mac' )
          }
        }
        condition ( 'property' : 'application.base.path' , 'value' : '${application.base.path.windows}' ) {
          os ( 'family' : 'windows' )
        }
        echo ( 'message' : 'application.base.path=${application.base.path}' )
      }
    }
    properties-print ( 'properties.list' : 'application.base.path,jboss.home,tomcat.home,jboss.server.name' )
    var ( 'name' : 'read.properties.list' , 'value' : '' )
    property ( 'name' : 'upgrade.running' , 'value' : 'true' )
  }
}
target ( 'bda-blueprints-installer.upgrade:common:init' : '' ) {
  depends ( 'upgrade:jboss:init' , 'upgrade:tomcat:init' )
  if ( ! ( install.running ) ) {
  }
}
target ( 'bda-blueprints-installer.upgrade:tomcat:readers:bda' : '' ) {
  depends ( 'upgrade:tomcat:init:prep' )
  if ( tomcat.exists ) {
    properties-exist ( 'properties.list' : 'application.base.path,tomcat.home' )
    osfamily ( 'property' : 'os.family' )
    if {
      or {
        equals ( 'arg2' : 'unix' , 'arg1' : '${os.family}' )
        equals ( 'arg2' : 'mac' , 'arg1' : '${os.family}' )
      }
      then {
        property ( 'name' : 'tomcat.hostname' , 'value' : '${env.HOSTNAME}' )
      }
    }
    if {
      equals ( 'arg2' : 'windows' , 'arg1' : '${os.family}' )
      then {
        property ( 'name' : 'tomcat.hostname' , 'value' : '${env.COMPUTERNAME}' )
      }
    }
    tomcat-read-ports ( 'tomcat.home' : '${read.tomcat.home}' )
    var ( 'name' : 'tomcat.ssl.keystore.dir' , 'value' : '${working.dir}/keys/tomcat' )
    tomcat-read-ssl ( 'copied.keystore.dir' : '${tomcat.ssl.keystore.dir}' , 'tomcat.home' : '${read.tomcat.home}' )
    tomcat-read-external-hostname ( 'tomcat.home' : '${read.tomcat.home}' )
    grid-read-index-url ( 'grid.wsrf.dir' : '${read.tomcat.home}/webapps/wsrf' )
    var ( 'name' : 'tomcat.grid.secure.dir' , 'value' : '${working.dir}/keys/tomcat' )
    tomcat-read-grid-secure ( 'copied.keystore.dir' : '${tomcat.grid.secure.dir}' , 'tomcat.home' : '${read.tomcat.home}' )
    grid-read-poc ( 'grid.wsrf.dir' : '${read.tomcat.home}/webapps/wsrf' , 'grid.service.name' : 'Sample' )
    echo ( 'message' : 'All properties after readers' )
    tomcat-read-dbconfig
  }
}
target ( 'bda-blueprints-installer.upgrade:database:rollback' : 'Rolls back database to previous tagged version using rollback scripts.' ) {
  depends ( 'upgrade:database:init' , 'common:init' , 'install:database:prep' )
  if ( ! ( exclude.database ) ) {
    database-rollback
  }
}
target ( 'install:tomcat:validation:post-install' : 'Run post-install checks from bda-utils' ) {
  depends ( 'common:tomcat:init' , 'common:init' , 'install:tomcat:start' )
  if {
    not {
      isset ( 'property' : 'exclude.start.servers' )
    }
    then {
      validate-post-tomcat
    }
  }
}
target ( 'install:jboss:grid' : 'Deploy  to jboss' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    mkdir ( 'dir' : '${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}' )
    unzip ( 'dest' : '${jboss.home}/server/${jboss.server.name}/lib' , 'src' : '${grid.resource.dir}/${resource.file.jboss-globus-lib}' )
    unzip ( 'dest' : '${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}' , 'src' : '${grid.resource.dir}/${resource.file.jboss-globus-war}' )
    unzip ( 'dest' : '${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}' , 'src' : '${grid.application.dir}/${grid.artifact.file}' )
  }
}
target ( 'upgrade-ncm' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'common:jboss:init' , 'common:tomcat:init' , 'install:common:validation:pre-install' , 'install:jboss:validation:pre-install' , 'install:tomcat:validation:pre-install' , 'install:database:validation:pre-install' , 'install:jboss:stop' , 'install:tomcat:stop' , 'upgrade:database' , 'upgrade:jboss' , 'upgrade:tomcat' , 'install:common:validation:post-install' )
}
target ( '-install:jboss:configure:jbossmq-dest' : 'Configure MQ settings based on contents of software/common/resource/jboss-conf/jbossmq-destinations-service.block.xml' ) {
  depends ( 'common:jboss:init' , 'common:init' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'bda-blueprints-installer.install:jboss:configure' : 'Configure JBoss (bindings, login-config.xml, ect)' ) {
  depends ( 'common:jboss:init' , 'common:init' , 'install:jboss:configure:log4j' )
  if ( ! ( exclude.jboss ) ) {
    jboss-configure ( 'jboss.grid.configure' : 'true' )
  }
}
target ( 'bda-blueprints-installer.install:tomcat:stop' : 'Stop Tomcat' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    if {
      available ( 'file' : '${tomcat.home}/bin/shutdown.sh' )
      then {
        echo ( 'message' : 'Shutting down tomcat' )
        tomcat-stop ( 'tomcat.home' : '${tomcat.home}' )
      }
      else {
        echo ( 'message' : 'Tomcat not found , not shutting down tomcat' )
      }
    }
  }
}
target ( 'bda-blueprints-installer.install' : 'Installs and configures JBOSS, creates database, and deploys application' ) {
  depends ( 'common:jboss:init' , 'common:tomcat:init' , 'common:init' , 'install:jboss:init' , 'install:common:validation:pre-install' , 'install:jboss:validation:pre-install' , 'install:tomcat:validation:pre-install' , 'install:database:validation:pre-install' , 'install:jboss:stop' , 'install:tomcat:stop' , 'install:jboss:validation:pre-install:ports' , 'install:tomcat:validation:pre-install:ports' , 'install:common:clean' , 'install:database' , 'install:tomcat' , 'install:jboss' , 'install:common:post' , 'install:jboss:start' , 'install:common:validation:post-install' )
}
target ( 'bda-blueprints-installer.install:database' : 'Runs datbase creation scripts then calls uprade database.' ) {
  depends ( 'common:init' , 'install:database:prep' , 'install:database:validation:pre-install' )
  if ( ! ( exclude.database ) ) {
    database-clean
    switch ( 'value' : '${database.type}' ) {
      case ( 'value' : 'oracle' ) {
        database-install ( 'sql.delimiter' : '/' , 'db.install.create.file.list' : '${db.install.create.oracle.file.list}' , 'sql.delimitertype' : 'row' )
      }
      case ( 'value' : 'postgresql' ) {
        database-install ( 'sql.delimiter' : '/' , 'db.install.create.file.list' : '${db.install.create.postgresql.file.list}' , 'sql.delimitertype' : 'row' )
      }
      case ( 'value' : 'mysql' ) {
        database-install ( 'db.install.create.file.list' : '${db.install.create.mysql.file.list}' )
      }
    }
    database-upgrade ( 'database.changelog.file' : '${os.temp.dir}/${project.name}/db-upgrade.xml' )
    database-tag
  }
}
target ( 'upgrade-dac:with-dbinstall' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'common:jboss:init' , 'common:tomcat:init' , 'install:common:validation:pre-install' , 'install:jboss:validation:pre-install' , 'install:tomcat:validation:pre-install' , 'install:database:validation:pre-install' , 'install:jboss:stop' , 'install:tomcat:stop' , 'install:database' , 'upgrade:jboss' , 'upgrade:tomcat' , 'install:common:validation:post-install' )
}
target ( 'install:jboss:bda-blueprints-webapp' : 'Deploy bda-blueprints-webapp and common libraries to jboss installation' ) {
  depends ( 'common:jboss:init' , 'common:init' , 'install:jboss:bda-blueprints-webapp:filesystem-data' )
  if ( ! ( exclude.jboss ) ) {
    delete ( 'dir' : '${jboss.home}/server/${jboss.server.name}/tmp' )
    delete ( 'dir' : '${jboss.home}/server/${jboss.server.name}/work' )
    move ( 'file' : '${jboss.home}/server/${jboss.server.name}/log/server.log' , 'tofile' : '${jboss.home}/server/${jboss.server.name}/log/server/log.${install.time}' , 'failonerror' : 'false' )
    copy ( 'todir' : '${jboss.home}/server/${jboss.server.name}/deploy' , 'overwrite' : 'true' , 'file' : '${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}' )
    copy ( 'todir' : '${jboss.home}/server/${jboss.server.name}/lib' , 'overwrite' : 'true' , 'file' : '${database.driver.file}' )
  }
}
target ( 'bda-blueprints-installer.install:tomcat:binaries' : 'Install tomcat binaries' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    delete ( 'dir' : '${tomcat.home}' )
    dirname ( 'file' : '${tomcat.home}' , 'property' : 'tomcat.base.dir' )
    unzip ( 'dest' : '${tomcat.base.dir}' , 'src' : '${tools.dir}/${tomcat.binaries.file}' )
    if {
      os ( 'family' : 'unix' )
      then {
        chmod ( 'dir' : '${tomcat.home}/bin' , 'includes' : '**/*.sh' , 'perm' : 'ugo+rx' )
      }
    }
  }
}
target ( 'bda-blueprints-installer.upgrade:tomcat:init:prep' : '' ) {
  depends ( 'upgrade:common:init:prep' )
  if ( ! ( install.running ) ) {
    property ( 'name' : 'tomcat.home' , 'value' : '${application.base.path}/${tomcat.relative.path}' )
    available ( 'file' : '${tomcat.home}' , 'property' : 'tomcat.exists' )
    property ( 'name' : 'read.tomcat.home' , 'value' : '${tomcat.home}' )
  }
}
target ( 'bda-blueprints-installer.upgrade:jboss:readers:custom' : '' ) {
  if ( ! ( install.running ) ) {
  }
}
target ( 'upgrade:database:init' : '' ) {
  depends ( 'upgrade:jboss:init:prep' , 'upgrade:database:readers:bda' , 'upgrade:database:readers:custom' )
  if ( ! ( install.running ) ) {
  }
}
target ( 'bda-blueprints-installer.install:tomcat' : 'Wrapper scripts that calls all required targets to install the tomcat container' ) {
  depends ( 'common:tomcat:init' , 'common:init' , 'install:tomcat:validation:pre-install' , 'install:common:validation:pre-install' , 'install:tomcat:stop' , 'install:tomcat:validation:pre-install:ports' , 'install:tomcat:clean' , 'install:tomcat:binaries' , 'install:tomcat:configure' , 'install:tomcat:bda-blueprints-webapp:re-configure' , 'install:tomcat:bda-blueprints-webapp' , 'install:tomcat:bda-blueprints-webapp:configure' , 'install:tomcat:grid' , 'install:tomcat:grid:configure' , 'install:post:tomcat' , 'install:tomcat:start' , 'install:tomcat:validation:post-install' )
  if ( ! ( exclude.tomcat ) ) {
  }
}
target ( 'install:jboss:grid:configure' : 'Configure tomcat-application' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    jboss-configure-grid
  }
}
target ( 'bda-blueprints-installer.install:tomcat:validation:pre-install:ports' : 'Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop' ) {
  depends ( 'common:init' , 'install:tomcat:stop' )
  validate-pre-tomcat-ports
}
target ( 'install:jboss:stop' : 'Stops jboss' ) {
  depends ( 'common:jboss:init' , 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    if {
      isset ( 'property' : 'jboss.exists' )
      then {
        jboss-stop-jboss ( 'jboss.server.jndi.port' : '${jboss.server.jndi.port}' )
      }
    }
  }
}
target ( 'bda-blueprints-installer.install:database:validation:pre-install' : 'Runs pre-install validation checks bda-utils' ) {
  depends ( 'common:init' , 'install:common:validation:pre-install' )
  validate-pre-install-database ( 'database.version' : '${mysql.minimum.version}' )
}
target ( 'upgrade:database' : 'Upgrades database using BDA Datbase Upgrade process.' ) {
  depends ( 'upgrade:database:init' , 'common:init' , 'install:database:prep' , 'install:database:validation:pre-install' )
  if ( ! ( exclude.database ) ) {
    database-upgrade ( 'database.changelog.file' : '${os.temp.dir}/${project.name}/db-upgrade.xml' )
    database-tag
  }
}
target ( 'upgrade:jboss:readers:bda' : '' ) {
  if ( jboss.exists ) {
    properties-exist ( 'properties.list' : 'application.base.path,jboss.home,jboss.server.name' )
    osfamily ( 'property' : 'os.family' )
    if {
      or {
        equals ( 'arg2' : 'unix' , 'arg1' : '${os.family}' )
        equals ( 'arg2' : 'mac' , 'arg1' : '${os.family}' )
      }
      then {
        property ( 'name' : 'jboss.server.hostname' , 'value' : '${env.HOSTNAME}' )
      }
    }
    if {
      equals ( 'arg2' : 'windows' , 'arg1' : '${os.family}' )
      then {
        property ( 'name' : 'jboss.server.hostname' , 'value' : '${env.COMPUTERNAME}' )
      }
    }
    jboss-read-dbconfig ( 'jboss.home' : '${read.jboss.home}' , 'jboss.ds-xml.file' : 'bda-blueprints-ds.xml' )
    jboss-read-ldapconfig ( 'jboss.home' : '${read.jboss.home}' )
    jboss-read-bindings-file-location ( 'jboss.home' : '${read.jboss.home}' )
    jboss-read-ports
    var ( 'name' : 'jboss.ssl.keystore.dir' , 'value' : '${working.dir}/keys/jboss' )
    jboss-read-ssl ( 'jboss.home' : '${read.jboss.home}' , 'copied.keystore.dir' : '${jboss.ssl.keystore.dir}' )
    jboss-read-external-hostname ( 'jboss.home' : '${read.jboss.home}' )
    jboss-read-java_opts ( 'jboss.bin.dir' : '${read.jboss.home}/server/${jboss.server.name}/bin' )
    jboss-read-java_opts ( 'jboss.home' : '${read.jboss.home}' )
    property ( 'name' : 'copied.jboss.log4j.dir' , 'value' : '${working.dir}/copied-log4j' )
    jboss-copy-log4j ( 'jboss.home' : '${read.jboss.home}' , 'copied.jboss.log4j.dir' : '${copied.jboss.log4j.dir}' )
    grid-read-index-url ( 'grid.wsrf.dir' : '${read.jboss.home}/server/${jboss.server.name}/deploy/wsrf' )
    var ( 'name' : 'jboss.grid.secure.dir' , 'value' : '${working.dir}/keys/jboss' )
    jboss-read-grid-secure ( 'jboss.home' : '${read.jboss.home}' , 'copied.keystore.dir' : '${jboss.grid.secure.dir}' )
    grid-read-poc ( 'grid.wsrf.dir' : '${read.jboss.home}/server/${jboss.server.name}/deploy/wsrf' , 'grid.service.name' : 'Sample' )
    read-property-from-properties-service ( 'jboss.home' : '${read.jboss.home}' , 'property.name' : 'property1' )
    read-property-from-properties-service ( 'jboss.home' : '${read.jboss.home}' , 'property.name' : 'property2' )
  }
}
target ( 'upgrade:post:tomcat' : '' ) {
}
target ( 'bda-blueprints-installer.install:jboss:grid' : 'Deploy  to jboss' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    mkdir ( 'dir' : '${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}' )
    unzip ( 'dest' : '${jboss.home}/server/${jboss.server.name}/lib' , 'src' : '${grid.resource.dir}/${resource.file.jboss-globus-lib}' )
    unzip ( 'dest' : '${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}' , 'src' : '${grid.resource.dir}/${resource.file.jboss-globus-war}' )
    unzip ( 'dest' : '${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}' , 'src' : '${grid.application.dir}/${grid.artifact.file}' )
  }
}
target ( 'upgrade-ncm:tomcat' : 'Wrapper target to call all targets required to upgrade tomcat container.' ) {
  depends ( 'upgrade:tomcat:init' , 'common:init' , 'common:tomcat:init' , 'install:tomcat:validation:pre-install' , 'install:common:validation:pre-install' , 'install:tomcat:stop' , 'install:tomcat:validation:pre-install:ports' , 'install:tomcat:bda-blueprints-webapp:re-configure' , 'install:tomcat:bda-blueprints-webapp' , 'install:tomcat:bda-blueprints-webapp:configure' , 'install:tomcat:grid' , 'install:tomcat:grid:configure' , 'install:post:tomcat' , 'install:tomcat:start' , 'install:tomcat:validation:post-install' )
  if ( ! ( exclude.tomcat ) ) {
  }
}
target ( 'upgrade:common:init' : '' ) {
  depends ( 'upgrade:jboss:init' , 'upgrade:tomcat:init' )
  if ( ! ( install.running ) ) {
  }
}
target ( 'bda-blueprints-installer.install:jboss:validation:pre-install:ports' : 'Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop' ) {
  depends ( 'common:init' , 'install:jboss:stop' )
  validate-pre-jboss-ports
}
target ( 'upgrade:database:tag' : 'Tags current state of database with a tag to allow for rollback of database to previous versions.' ) {
  depends ( 'upgrade:database:init' , 'common:init' , 'install:database:prep' )
  if ( ! ( exclude.database ) ) {
    database-tag
  }
}
target ( 'install:common:validation:post-install' : 'Run post-install checks from bda-utils' ) {
  depends ( 'common:init' )
  validate-post-common
}
target ( 'install:jboss:validation:pre-install:ports' : 'Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop' ) {
  depends ( 'common:init' , 'install:jboss:stop' )
  validate-pre-jboss-ports
}
target ( 'install:jboss:configure' : 'Configure JBoss (bindings, login-config.xml, ect)' ) {
  depends ( 'common:jboss:init' , 'common:init' , 'install:jboss:configure:log4j' )
  if ( ! ( exclude.jboss ) ) {
    jboss-configure ( 'jboss.grid.configure' : 'true' )
  }
}
target ( 'bda-blueprints-installer.upgrade:tomcat:init' : '' ) {
  depends ( 'upgrade:tomcat:init:prep' , 'upgrade:tomcat:readers:bda' , 'upgrade:tomcat:readers:custom' )
  if ( ! ( install.running ) ) {
    properties-print ( 'properties.list' : '${read.properties.list}' )
    properties-exist ( 'properties.list' : '${read.properties.list}' )
    properties-write ( 'properties.list' : '${read.properties.list}' )
  }
}
target ( 'bda-blueprints-installer.upgrade:database:init' : '' ) {
  depends ( 'upgrade:jboss:init:prep' , 'upgrade:database:readers:bda' , 'upgrade:database:readers:custom' )
  if ( ! ( install.running ) ) {
  }
}
target ( 'bda-blueprints-installer.install:tomcat:grid:configure' : 'Configure tomcat-application' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    tomcat-configure-grid
  }
}
target ( 'bda-blueprints-installer.install:jboss:stop' : 'Stops jboss' ) {
  depends ( 'common:jboss:init' , 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    if {
      isset ( 'property' : 'jboss.exists' )
      then {
        jboss-stop-jboss ( 'jboss.server.jndi.port' : '${jboss.server.jndi.port}' )
      }
    }
  }
}
target ( 'install:tomcat:grid' : 'Deploy grid to tomcat' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    mkdir ( 'dir' : '${tomcat.home}/webapps/${grid.dir.dest}' )
    unzip ( 'dest' : '${tomcat.home}/common/lib' , 'src' : '${grid.resource.dir}/${resource.file.jboss-globus-lib}' ) {
      patternset {
        exclude ( 'name' : '**/cog-tomcat.jar' )
      }
    }
    unzip ( 'dest' : '${tomcat.home}/server/lib' , 'src' : '${grid.resource.dir}/${resource.file.jboss-globus-lib}' ) {
      patternset {
        include ( 'name' : '**/cog-tomcat.jar' )
      }
    }
    unzip ( 'dest' : '${tomcat.home}/webapps/${grid.dir.dest}' , 'src' : '${grid.resource.dir}/${resource.file.jboss-globus-war}' )
    unzip ( 'dest' : '${tomcat.home}/webapps/${grid.dir.dest}' , 'src' : '${grid.application.dir}/${grid.artifact.file}' )
  }
}
target ( 'bda-blueprints-installer.install:tomcat:validation:post-install' : 'Run post-install checks from bda-utils' ) {
  depends ( 'common:tomcat:init' , 'common:init' , 'install:tomcat:start' )
  if {
    not {
      isset ( 'property' : 'exclude.start.servers' )
    }
    then {
      validate-post-tomcat
    }
  }
}
target ( 'install:tomcat:binaries' : 'Install tomcat binaries' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    delete ( 'dir' : '${tomcat.home}' )
    dirname ( 'file' : '${tomcat.home}' , 'property' : 'tomcat.base.dir' )
    unzip ( 'dest' : '${tomcat.base.dir}' , 'src' : '${tools.dir}/${tomcat.binaries.file}' )
    if {
      os ( 'family' : 'unix' )
      then {
        chmod ( 'dir' : '${tomcat.home}/bin' , 'includes' : '**/*.sh' , 'perm' : 'ugo+rx' )
      }
    }
  }
}
target ( 'bda-blueprints-installer.install:post:tomcat' : '' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    if {
      not {
        equals ( 'arg2' : 'true' , 'arg1' : '${exclude.tomcat.backup}' )
      }
      then {
        property ( 'location' : '${install-logs.dir}/changeLog-${install.time}.txt' , 'name' : 'changelogFile' )
        property ( 'location' : '${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}' , 'name' : 'compare1.dir' )
        property ( 'location' : '${tomcat.home}' , 'name' : 'compare2.dir' )
        report-dir-diff ( 'reportFile' : '${changelogFile}' , 'dir2' : '${compare2.dir}' , 'dir1' : '${compare1.dir}' )
        mkdir ( 'dir' : '${tomcat.home}/server/${tomcat.server.name}/log' )
        mkdir ( 'dir' : '${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log' )
        copy ( 'todir' : '${tomcat.home}/server/${tomcat.server.name}/log' ) {
          fileset ( 'dir' : '${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log' ) {
            include ( 'name' : '*' )
          }
        }
      }
    }
  }
}
target ( 'bda-blueprints-installer.common:init' : '' ) {
  depends ( 'common:init:pre' )
  property ( 'name' : 'install.running' , 'value' : 'true' )
  echoproperties ( 'prefix' : 'database' )
  switch ( 'value' : '${database.type}' ) {
    case ( 'value' : 'oracle' ) {
      property ( 'name' : 'database.dialect' , 'value' : 'org.hibernate.dialect.OracleDialect' )
      property ( 'name' : 'database.driver.file' , 'value' : '${bda-utils.dir}/ojdbc14-10.2.0.4.0.jar' )
      property ( 'name' : 'database.driver' , 'value' : 'oracle.jdbc.driver.OracleDriver' )
      property ( 'name' : 'database.schema' , 'value' : '${database.name}' )
    }
    case ( 'value' : 'mysql' ) {
      property ( 'name' : 'database.dialect' , 'value' : 'org.hibernate.dialect.MySQLDialect' )
      property ( 'name' : 'database.driver.file' , 'value' : '${bda-utils.dir}/mysql-connector-java-5.0.8.jar' )
      property ( 'name' : 'database.driver' , 'value' : 'com.mysql.jdbc.Driver' )
      property ( 'name' : 'database.schema' , 'value' : '${database.name}' )
    }
    case ( 'value' : 'postgresql' ) {
      property ( 'name' : 'database.dialect' , 'value' : 'org.hibernate.dialect.PostgreSQLDialect' )
      property ( 'name' : 'database.driver.file' , 'value' : '${bda-utils.dir}/postgresql-jdbc3-8.3-604.jar' )
      property ( 'name' : 'database.driver' , 'value' : 'org.postgresql.Driver' )
      property ( 'name' : 'database.schema' , 'value' : 'public' )
    }
    default {
      fail ( 'message' : 'Invalid database type ${database.type}' )
    }
  }
  path ( 'id' : 'jdbc.driver.classpath' ) {
    pathelement ( 'location' : '${database.driver.file}' )
  }
  property ( 'name' : 'properties.template.file' , 'value' : '${basedir}/properties.template' )
  filterset ( 'id' : 'embedded.filterset' ) {
    filter ( 'token' : 'application.base.path' , 'value' : '${application.base.path}' )
    filter ( 'token' : 'application.url' , 'value' : '${application.url}' )
    filter ( 'token' : 'database.url' , 'value' : '${database.url}' )
    filter ( 'token' : 'database.user' , 'value' : '${database.user}' )
    filter ( 'token' : 'database.password' , 'value' : '${database.password}' )
    filter ( 'token' : 'database.system.url' , 'value' : '${database.system.url}' )
    filter ( 'token' : 'database.driver' , 'value' : '${database.driver}' )
    filter ( 'token' : 'db-upgrade.run.dir' , 'value' : '${db-upgrade.dir.dest}/${database.type}' )
    filter ( 'token' : 'jboss.home' , 'value' : '${jboss.home}' )
    filter ( 'token' : 'tomcat.home' , 'value' : '${tomcat.home}' )
    filter ( 'token' : 'database.dialect' , 'value' : '${database.dialect}' )
    filter ( 'token' : 'hibernate.cfg.file.path' , 'value' : '${hibernate.cfg.file.path}' )
    filter ( 'token' : 'env.LOGNAME' , 'value' : '${env.LOGNAME}' )
    filter ( 'token' : 'env.JAVA_HOME' , 'value' : '${env.JAVA_HOME}' )
    filter ( 'token' : 'project.name' , 'value' : 'project.name' )
    filter ( 'token' : '' , 'value' : '' )
  }
  condition ( 'property' : 'os.temp.dir' , 'value' : '/tmp' ) {
    or {
      os ( 'family' : 'unix' )
      os ( 'family' : 'mac' )
    }
  }
  condition ( 'property' : 'os.temp.dir' , 'value' : 'c:/temp' ) {
    os ( 'family' : 'windows' )
  }
  copy ( 'todir' : '${common.dir.dest}' , 'filtering' : 'true' ) {
    fileset ( 'dir' : '${common.dir.src}' ) {
      include ( 'name' : '**/*' )
    }
    filterset ( 'refid' : 'embedded.filterset' )
    filterset {
      filtersfile ( 'file' : '${properties.file}' )
      filtersfile ( 'file' : 'project.properties' )
    }
  }
}
target ( 'bda-blueprints-installer.upgrade:tomcat' : 'Wrapper target to call all targets required to upgrade tomcat container.' ) {
  depends ( 'upgrade:tomcat:init' , 'common:init' , 'upgrade-dac:tomcat' )
  if ( ! ( exclude.tomcat ) ) {
  }
}
target ( 'install:tomcat:bda-blueprints-webapp:re-configure' : 'Configure bda-blueprints-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
  }
}
target ( 'bda-blueprints-installer.upgrade-ncm:tomcat' : 'Wrapper target to call all targets required to upgrade tomcat container.' ) {
  depends ( 'upgrade:tomcat:init' , 'common:init' , 'common:tomcat:init' , 'install:tomcat:validation:pre-install' , 'install:common:validation:pre-install' , 'install:tomcat:stop' , 'install:tomcat:validation:pre-install:ports' , 'install:tomcat:bda-blueprints-webapp:re-configure' , 'install:tomcat:bda-blueprints-webapp' , 'install:tomcat:bda-blueprints-webapp:configure' , 'install:tomcat:grid' , 'install:tomcat:grid:configure' , 'install:post:tomcat' , 'install:tomcat:start' , 'install:tomcat:validation:post-install' )
  if ( ! ( exclude.tomcat ) ) {
  }
}
target ( 'install:jboss:bda-blueprints-webapp:re-configure' : 'Update contents of artifacts if not all properties have been externalized, by extracting artifact, modify it as needed and re-archive it.' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'bda-blueprints-installer.install:jboss:bda-blueprints-webapp' : 'Deploy bda-blueprints-webapp and common libraries to jboss installation' ) {
  depends ( 'common:jboss:init' , 'common:init' , 'install:jboss:bda-blueprints-webapp:filesystem-data' )
  if ( ! ( exclude.jboss ) ) {
    delete ( 'dir' : '${jboss.home}/server/${jboss.server.name}/tmp' )
    delete ( 'dir' : '${jboss.home}/server/${jboss.server.name}/work' )
    move ( 'file' : '${jboss.home}/server/${jboss.server.name}/log/server.log' , 'tofile' : '${jboss.home}/server/${jboss.server.name}/log/server/log.${install.time}' , 'failonerror' : 'false' )
    copy ( 'todir' : '${jboss.home}/server/${jboss.server.name}/deploy' , 'overwrite' : 'true' , 'file' : '${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}' )
    copy ( 'todir' : '${jboss.home}/server/${jboss.server.name}/lib' , 'overwrite' : 'true' , 'file' : '${database.driver.file}' )
  }
}
target ( 'install:tomcat:stop' : 'Stop Tomcat' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    if {
      available ( 'file' : '${tomcat.home}/bin/shutdown.sh' )
      then {
        echo ( 'message' : 'Shutting down tomcat' )
        tomcat-stop ( 'tomcat.home' : '${tomcat.home}' )
      }
      else {
        echo ( 'message' : 'Tomcat not found , not shutting down tomcat' )
      }
    }
  }
}
target ( 'upgrade:post:jboss' : '' ) {
  if ( ! ( install.running ) ) {
    copy ( 'todir' : '${jboss.home}/server/${jboss.server.name}/conf' , 'file' : '${copied.jboss.log4j.dir}/log4j.xml' )
  }
}
target ( 'bda-blueprints-installer.upgrade-cm:jboss' : 'Wrapper target to call all targets required to upgrade jboss container.' ) {
  depends ( 'upgrade:jboss:init' , 'common:init' , 'common:jboss:init' , 'install:jboss:validation:pre-install' , 'install:common:validation:pre-install' , 'install:jboss:stop' , 'install:jboss:validation:pre-install:ports' , 'install:jboss:configure' , 'install:jboss:bda-blueprints-webapp:re-configure' , 'install:jboss:bda-blueprints-webapp' , 'install:jboss:bda-blueprints-webapp:configure' , 'install:jboss:grid' , 'install:jboss:grid:configure' , 'upgrade:post:jboss' , 'install:post:jboss' , 'install:jboss:start' , 'install:jboss:validation:post-install' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'bda-blueprints-installer.install:jboss:configure:log4j' : 'Configure custom entries in system wide log4j' ) {
  depends ( 'common:jboss:init' , 'common:init' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'upgrade:tomcat:init' : '' ) {
  depends ( 'upgrade:tomcat:init:prep' , 'upgrade:tomcat:readers:bda' , 'upgrade:tomcat:readers:custom' )
  if ( ! ( install.running ) ) {
    properties-print ( 'properties.list' : '${read.properties.list}' )
    properties-exist ( 'properties.list' : '${read.properties.list}' )
    properties-write ( 'properties.list' : '${read.properties.list}' )
  }
}
target ( 'upgrade-dac' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'common:jboss:init' , 'common:tomcat:init' , 'install:common:validation:pre-install' , 'install:jboss:validation:pre-install' , 'install:tomcat:validation:pre-install' , 'install:database:validation:pre-install' , 'install:jboss:stop' , 'install:tomcat:stop' , 'upgrade:database' , 'upgrade:jboss' , 'upgrade:tomcat' , 'install:common:validation:post-install' )
}
target ( 'bda-blueprints-installer.upgrade:jboss:init:prep' : '' ) {
  depends ( 'upgrade:common:init:prep' )
  if ( ! ( install.running ) ) {
    property ( 'name' : 'jboss.home' , 'value' : '${application.base.path}/${jboss.relative.path}' )
    if {
      equals ( 'arg2' : 'true' , 'arg1' : '${jboss.ncicb-standard.port-config}' )
      then {
        property ( 'name' : 'jboss.server.binding.template.location' , 'value' : '${basedir}/${jboss-bindings.file}' )
      }
      else {
        property ( 'name' : 'jboss.server.binding.template.location' , 'value' : '${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml' )
      }
    }
    property ( 'name' : 'upgrade.running' , 'value' : 'true' )
    property ( 'name' : 'jboss.ncicb-standard.port-config' , 'value' : 'true' )
    available ( 'file' : '${jboss.home}' , 'property' : 'jboss.exists' )
    property ( 'name' : 'read.jboss.home' , 'value' : '${jboss.home}' )
  }
}
target ( 'install:tomcat:grid:configure' : 'Configure tomcat-application' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    tomcat-configure-grid
  }
}
target ( 'bda-blueprints-installer.install:common:validation:post-install' : 'Run post-install checks from bda-utils' ) {
  depends ( 'common:init' )
  validate-post-common
}
target ( 'bda-blueprints-installer.install:tomcat:bda-blueprints-webapp' : 'Deploy bda-blueprints-webapp and common libraries to tomcat installation' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    delete ( 'dir' : '${tomcat.home}/temp' )
    delete ( 'dir' : '${tomcat.home}/work' )
    copy ( 'todir' : '${tomcat.home}/webapps' , 'overwrite' : 'true' , 'file' : '${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}' )
    copy ( 'todir' : '${tomcat.home}/common/lib' , 'overwrite' : 'true' , 'file' : '${database.driver.file}' )
  }
}
target ( 'upgrade:jboss:init' : '' ) {
  depends ( 'upgrade:jboss:init:prep' , 'upgrade:jboss:readers:bda' , 'upgrade:jboss:readers:custom' )
  if ( ! ( install.running ) ) {
    properties-print ( 'properties.list' : '${read.properties.list}' )
    properties-exist ( 'properties.list' : '${read.properties.list}' )
    properties-write ( 'properties.list' : '${read.properties.list}' )
  }
}
target ( 'install:tomcat:start' : 'Start Tomcat' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    if {
      not {
        isset ( 'property' : 'exclude.start.servers' )
      }
      then {
        tomcat-start ( 'tomcat.home' : '${tomcat.home}' )
      }
    }
  }
}
target ( 'bda-blueprints-installer.upgrade:jboss:init' : '' ) {
  depends ( 'upgrade:jboss:init:prep' , 'upgrade:jboss:readers:bda' , 'upgrade:jboss:readers:custom' )
  if ( ! ( install.running ) ) {
    properties-print ( 'properties.list' : '${read.properties.list}' )
    properties-exist ( 'properties.list' : '${read.properties.list}' )
    properties-write ( 'properties.list' : '${read.properties.list}' )
  }
}
target ( 'bda-blueprints-installer.install:jboss:bda-blueprints-webapp:re-configure' : 'Update contents of artifacts if not all properties have been externalized, by extracting artifact, modify it as needed and re-archive it.' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'install:jboss' : 'Wrapper scripts that calls all required targets to install the jboss container' ) {
  depends ( 'common:jboss:init' , 'common:init' , 'install:jboss:init' , 'install:jboss:validation:pre-install' , 'install:common:validation:pre-install' , 'install:jboss:stop' , 'install:jboss:validation:pre-install:ports' , 'install:jboss:clean' , 'install:jboss:binaries' , 'install:jboss:bda-blueprints-webapp:re-configure' , 'install:jboss:bda-blueprints-webapp' , 'install:jboss:bda-blueprints-webapp:configure' , 'install:jboss:configure' , 'install:jboss:grid' , 'install:jboss:grid:configure' , 'install:post:jboss' , 'install:jboss:start' , 'install:jboss:validation:post-install' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'bda-blueprints-installer.upgrade-ncm' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'common:jboss:init' , 'common:tomcat:init' , 'install:common:validation:pre-install' , 'install:jboss:validation:pre-install' , 'install:tomcat:validation:pre-install' , 'install:database:validation:pre-install' , 'install:jboss:stop' , 'install:tomcat:stop' , 'upgrade:database' , 'upgrade:jboss' , 'upgrade:tomcat' , 'install:common:validation:post-install' )
}
target ( 'bda-blueprints-installer.upgrade:post:jboss' : '' ) {
  if ( ! ( install.running ) ) {
    copy ( 'todir' : '${jboss.home}/server/${jboss.server.name}/conf' , 'file' : '${copied.jboss.log4j.dir}/log4j.xml' )
  }
}
target ( 'upgrade:jboss:readers:custom' : '' ) {
  if ( ! ( install.running ) ) {
  }
}
target ( 'bda-blueprints-installer.upgrade:database:readers:bda' : '' ) {
  depends ( 'upgrade:jboss:init:prep' )
  if ( jboss.exists ) {
    properties-exist ( 'properties.list' : 'application.base.path,jboss.home,jboss.server.name' )
    jboss-read-dbconfig ( 'jboss.home' : '${read.jboss.home}' , 'jboss.ds-xml.file' : 'bda-blueprints-ds.xml' )
  }
}
target ( 'upgrade:jboss' : 'Wrapper target to call all targets required to upgrade jboss container.' ) {
  depends ( 'upgrade:jboss:init' , 'common:init' , 'upgrade-dac:jboss' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'bda-blueprints-installer.upgrade-ncm:with-dbinstall' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'common:jboss:init' , 'common:tomcat:init' , 'install:common:validation:pre-install' , 'install:jboss:validation:pre-install' , 'install:tomcat:validation:pre-install' , 'install:database:validation:pre-install' , 'install:jboss:stop' , 'install:tomcat:stop' , 'install:database' , 'upgrade:jboss' , 'upgrade:tomcat' , 'install:common:validation:post-install' )
}
target ( 'install:tomcat' : 'Wrapper scripts that calls all required targets to install the tomcat container' ) {
  depends ( 'common:tomcat:init' , 'common:init' , 'install:tomcat:validation:pre-install' , 'install:common:validation:pre-install' , 'install:tomcat:stop' , 'install:tomcat:validation:pre-install:ports' , 'install:tomcat:clean' , 'install:tomcat:binaries' , 'install:tomcat:configure' , 'install:tomcat:bda-blueprints-webapp:re-configure' , 'install:tomcat:bda-blueprints-webapp' , 'install:tomcat:bda-blueprints-webapp:configure' , 'install:tomcat:grid' , 'install:tomcat:grid:configure' , 'install:post:tomcat' , 'install:tomcat:start' , 'install:tomcat:validation:post-install' )
  if ( ! ( exclude.tomcat ) ) {
  }
}
target ( 'install:database' : 'Runs datbase creation scripts then calls uprade database.' ) {
  depends ( 'common:init' , 'install:database:prep' , 'install:database:validation:pre-install' )
  if ( ! ( exclude.database ) ) {
    database-clean
    switch ( 'value' : '${database.type}' ) {
      case ( 'value' : 'oracle' ) {
        database-install ( 'sql.delimiter' : '/' , 'db.install.create.file.list' : '${db.install.create.oracle.file.list}' , 'sql.delimitertype' : 'row' )
      }
      case ( 'value' : 'postgresql' ) {
        database-install ( 'sql.delimiter' : '/' , 'db.install.create.file.list' : '${db.install.create.postgresql.file.list}' , 'sql.delimitertype' : 'row' )
      }
      case ( 'value' : 'mysql' ) {
        database-install ( 'db.install.create.file.list' : '${db.install.create.mysql.file.list}' )
      }
    }
    database-upgrade ( 'database.changelog.file' : '${os.temp.dir}/${project.name}/db-upgrade.xml' )
    database-tag
  }
}
target ( 'install:common:clean' : 'Removes all files from the local filesystem' ) {
  depends ( 'common:init' , 'install:jboss:clean' , 'install:tomcat:clean' )
}
target ( 'install:jboss:configure:log4j' : 'Configure custom entries in system wide log4j' ) {
  depends ( 'common:jboss:init' , 'common:init' )
  if ( ! ( exclude.jboss ) ) {
  }
}
target ( 'upgrade:database:rollback' : 'Rolls back database to previous tagged version using rollback scripts.' ) {
  depends ( 'upgrade:database:init' , 'common:init' , 'install:database:prep' )
  if ( ! ( exclude.database ) ) {
    database-rollback
  }
}
target ( 'bda-blueprints-installer.install:jboss:bda-blueprints-webapp:filesystem-data' : '' ) {
  depends ( 'common:jboss:init' , 'common:init' )
}
target ( 'install:database:validation:pre-install' : 'Runs pre-install validation checks bda-utils' ) {
  depends ( 'common:init' , 'install:common:validation:pre-install' )
  validate-pre-install-database ( 'database.version' : '${mysql.minimum.version}' )
}
target ( 'install:database:prep' : 'Copies db files with filtering' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.database ) ) {
    property ( 'name' : 'db.prop.list' , 'value' : 'database.url,database.user,database.password,database.name' )
    echo ( 'message' : 'Checking if database properties exist: ${db.prop.list}' )
    properties-exist ( 'properties.list' : '${db.prop.list}' )
    echoproperties ( 'prefix' : 'database' )
    copy ( 'todir' : '${db.dir.dest}' , 'filtering' : 'true' ) {
      fileset ( 'dir' : '${db.dir.src}' ) {
        include ( 'name' : '**/*' )
      }
      filterset ( 'refid' : 'embedded.filterset' )
      filterset {
        filtersfile ( 'file' : '${properties.file}' )
        filtersfile ( 'file' : 'project.properties' )
      }
    }
    mkdir ( 'dir' : '${os.temp.dir}/${project.name}' )
    copy ( 'todir' : '${os.temp.dir}/${project.name}' , 'overwrite' : 'true' , 'filtering' : 'true' , 'flatten' : 'true' ) {
      fileset ( 'dir' : '${db.dir.dest}' ) {
        include ( 'name' : '**/db-upgrade.xml' )
      }
    }
  }
}
target ( 'bda-blueprints-installer.upgrade-cm:with-dbinstall' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'common:jboss:init' , 'common:tomcat:init' , 'install:common:validation:pre-install' , 'install:jboss:validation:pre-install' , 'install:tomcat:validation:pre-install' , 'install:database:validation:pre-install' , 'install:jboss:stop' , 'install:tomcat:stop' , 'install:database' , 'upgrade:jboss' , 'upgrade:tomcat' , 'install:common:validation:post-install' )
}
target ( 'install:post:tomcat' : '' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    if {
      not {
        equals ( 'arg2' : 'true' , 'arg1' : '${exclude.tomcat.backup}' )
      }
      then {
        property ( 'location' : '${install-logs.dir}/changeLog-${install.time}.txt' , 'name' : 'changelogFile' )
        property ( 'location' : '${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}' , 'name' : 'compare1.dir' )
        property ( 'location' : '${tomcat.home}' , 'name' : 'compare2.dir' )
        report-dir-diff ( 'reportFile' : '${changelogFile}' , 'dir2' : '${compare2.dir}' , 'dir1' : '${compare1.dir}' )
        mkdir ( 'dir' : '${tomcat.home}/server/${tomcat.server.name}/log' )
        mkdir ( 'dir' : '${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log' )
        copy ( 'todir' : '${tomcat.home}/server/${tomcat.server.name}/log' ) {
          fileset ( 'dir' : '${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log' ) {
            include ( 'name' : '*' )
          }
        }
      }
    }
  }
}
target ( 'bda-blueprints-installer.install:common:post' : '' ) {
  depends ( 'common:init' , 'install:post:jboss' , 'install:post:tomcat' )
}
target ( 'upgrade:jboss:init:prep' : '' ) {
  depends ( 'upgrade:common:init:prep' )
  if ( ! ( install.running ) ) {
    property ( 'name' : 'jboss.home' , 'value' : '${application.base.path}/${jboss.relative.path}' )
    if {
      equals ( 'arg2' : 'true' , 'arg1' : '${jboss.ncicb-standard.port-config}' )
      then {
        property ( 'name' : 'jboss.server.binding.template.location' , 'value' : '${basedir}/${jboss-bindings.file}' )
      }
      else {
        property ( 'name' : 'jboss.server.binding.template.location' , 'value' : '${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml' )
      }
    }
    property ( 'name' : 'upgrade.running' , 'value' : 'true' )
    property ( 'name' : 'jboss.ncicb-standard.port-config' , 'value' : 'true' )
    available ( 'file' : '${jboss.home}' , 'property' : 'jboss.exists' )
    property ( 'name' : 'read.jboss.home' , 'value' : '${jboss.home}' )
  }
}
target ( 'upgrade-cm' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'common:jboss:init' , 'common:tomcat:init' , 'install:common:validation:pre-install' , 'install:jboss:validation:pre-install' , 'install:tomcat:validation:pre-install' , 'install:database:validation:pre-install' , 'install:jboss:stop' , 'install:tomcat:stop' , 'upgrade:database' , 'upgrade:jboss' , 'upgrade:tomcat' , 'install:common:validation:post-install' )
}
target ( 'install:jboss:init' : '' ) {
  depends ( 'common:init:pre' )
  if ( ! ( upgrade.running ) ) {
    if {
      isset ( 'property' : 'jboss.ncicb-standard.port-config' )
      then {
        echo ( 'message' : 'Using JBoss NCICB Standard port configurations' )
        property ( 'name' : 'jboss.server.binding.template.location' , 'value' : '${basedir}/${jboss-bindings.file}' )
        jboss-read-ports ( 'jboss.server.bindingfile.location' : '${jboss.server.binding.template.location}' )
        echo ( 'message' : 'http -${jboss.server.port} ' )
        echo ( 'message' : 'http -${jboss.server.jndi.port} ' )
        properties-exist ( 'properties.list' : 'jboss.server.jndi.port,jboss.server.port,jboss.server.ports.name' )
        jboss-bindings-validate ( 'jboss.server.bindingfile.location' : '${jboss.server.binding.template.location}' )
      }
      else {
        echo ( 'message' : 'Using custom JBoss port configurations' )
        property ( 'name' : 'jboss.server.binding.template.location' , 'value' : '${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml' )
        properties-exist ( 'properties.list' : 'jboss.server.jndi.port,jboss.server.port,jboss.cobraorb.port,jboss.ejbinvoker.port,jboss.hajndi.port,jboss.hajrmi.port,jboss.jms.port,jboss.jmx-rmi.port,jboss.messaging.port,jboss.pooledha.port,jboss.remoting.port,jboss.server.bind.port,jboss.server.rmi.port,jboss.service.rmiobject.port,jboss.snmp.port,jboss.snmp-trapd.port,jboss.web.service.port' )
      }
    }
  }
}
target ( 'bda-blueprints-installer.upgrade-dac:with-dbinstall' : 'Upgrades JBoss and Database' ) {
  depends ( 'upgrade:common:init' , 'common:init' , 'common:jboss:init' , 'common:tomcat:init' , 'install:common:validation:pre-install' , 'install:jboss:validation:pre-install' , 'install:tomcat:validation:pre-install' , 'install:database:validation:pre-install' , 'install:jboss:stop' , 'install:tomcat:stop' , 'install:database' , 'upgrade:jboss' , 'upgrade:tomcat' , 'install:common:validation:post-install' )
}
target ( 'install:tomcat:configure' : 'Configure tomcat (change ports)' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.tomcat ) ) {
    tomcat-configure ( 'tomcat.grid.configure' : 'true' )
  }
}
target ( 'install:jboss:validation:pre-install' : 'Runs pre-install validation checks bda-utils' ) {
  depends ( 'common:jboss:init' , 'common:init' , 'install:common:validation:pre-install' )
  validate-pre-install-jboss
}
target ( 'install:post:jboss' : '' ) {
  depends ( 'common:init' )
  if ( ! ( exclude.jboss ) ) {
    if {
      not {
        equals ( 'arg2' : 'true' , 'arg1' : '${exclude.jboss.backup}' )
      }
      then {
        property ( 'location' : '${install-logs.dir}/chagneLog-${install.time}.txt' , 'name' : 'changelogFile' )
        property ( 'location' : '${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}' , 'name' : 'compare1.dir' )
        property ( 'location' : '${jboss.home}' , 'name' : 'compare2.dir' )
        report-dir-diff ( 'reportFile' : '${changelogFile}' , 'dir2' : '${compare2.dir}' , 'dir1' : '${compare1.dir}' )
        mkdir ( 'dir' : '${jboss.home}/server/${jboss.server.name}/log' )
        mkdir ( 'dir' : '${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}/server/${jboss.server.name}/log' )
        move ( 'todir' : '${jboss.home}/server/${jboss.server.name}/log' ) {
          fileset ( 'dir' : '${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}/server/${jboss.server.name}/log' ) {
            include ( 'name' : '*' )
          }
        }
        mkdir ( 'dir' : '${backup.jboss.base.dir}/backup1' )
        zip ( 'basedir' : '${backup.jboss.base.dir}/backup' , 'destfile' : '${backup.jboss.base.dir}/backup1/${jboss.binaries.relative.dir}.zip' )
        delete ( 'dir' : '${backup.jboss.base.dir}/backup' )
      }
    }
  }
}
target ( 'bda-blueprints-installer.install:tomcat:validation:pre-install' : 'Runs pre-install validation checks bda-utils' ) {
  depends ( 'common:tomcat:init' , 'common:init' , 'install:common:validation:pre-install' )
  validate-pre-install-tomcat
}
ant.  description {
'''
		This build file is part of the bda-build-templates project. This is the master install file for the project.  It should be placed in project/software.  This script is copied into the distribution and  executed from the extracted distribution.  It is run by typing "ant" from the master project build.xml or from command line. This script has two flows install and upgrade.
		Install will do the following
 			* Install binaries
			* Configure binaries
			* Install application
			* Configure application
			* Re-create database
			* Upgrade database
		Upgrade will do the following
			* Install application
			* Configure application
			* Upgrade database
		The script includes target that may not be used by all projects, but are included in here becaue it is a template. This script has targets to deal with the following, you can delete targets you don't want to work with
		Application servers (option for grid services also)
			* JBoss
			* Tomcat
		Databases
			* MySQL
			* PostgreSQL
			* Oracle
		This script requires java and ant to run. Every thing else it needs is included in the distribution.
	'''
  }
ant.  property ( 'environment' : 'env' )
ant.  property ( 'file' : 'local.properties' )
ant.  property ( 'file' : 'project.properties' )
ant.  property ( 'name' : 'properties.file' , 'value' : '${basedir}/install.properties' )
ant.  echo ( 'message' : 'Using properties file of ${properties.file}.' )
ant.  available ( 'file' : '${properties.file}' , 'property' : 'properties.file.exists' )
ant.  fail ( 'message' : 'The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail.' , 'unless' : 'properties.file.exists' )
ant.  replaceregexp ( 'match' : '^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$' , 'replace' : '\1=\2' , 'byline' : 'true' , 'file' : '${properties.file}' )
ant.  replaceregexp ( 'match' : '^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$' , 'replace' : '\1=\2' , 'byline' : 'true' , 'file' : '${properties.file}' )
ant.  property ( 'file' : '${properties.file}' )
ant.  property ( 'name' : 'project.name' , 'value' : 'bda-blueprints' )
ant.  property ( 'name' : 'env.name' , 'value' : 'local' )
ant.  property ( 'location' : '${basedir}/logs' , 'name' : 'log.dir' )
ant.  property ( 'location' : '${basedir}/working' , 'name' : 'working.dir' )
ant.  property ( 'location' : '${working.dir}/temp' , 'name' : 'temp.dir' )
ant.  property ( 'location' : '${basedir}/bda-utils' , 'name' : 'bda-utils.dir' )
ant.  property ( 'location' : '${basedir}/${tools.dist.relative.dir}' , 'name' : 'tools.dir' )
ant.  property ( 'location' : '${basedir}/${common.dist.relative.dir}' , 'name' : 'common.dir.src' )
ant.  property ( 'location' : '${working.dir}/${common.dist.relative.dir}' , 'name' : 'common.dir.dest' )
ant.  property ( 'location' : '${basedir}/${db.dist.relative.dir}' , 'name' : 'db.dir.src' )
ant.  property ( 'location' : '${working.dir}/${db.dist.relative.dir}' , 'name' : 'db.dir.dest' )
ant.  property ( 'location' : '${working.dir}/${db-install.dist.relative.dir}' , 'name' : 'db-install.dir.dest' )
ant.  property ( 'location' : '${working.dir}/${db-upgrade.dist.relative.dir}' , 'name' : 'db-upgrade.dir.dest' )
ant.  property ( 'location' : '${basedir}/${jboss-conf.dist.relative.dir}' , 'name' : 'jboss-conf.dir.src' )
ant.  property ( 'location' : '${working.dir}/${jboss-conf.dist.relative.dir}' , 'name' : 'jboss-conf.dir.dest' )
ant.  property ( 'location' : '${basedir}/${bda-blueprints-webapp.dist.relative.dir}' , 'name' : 'bda-blueprints-webapp.dir.dist' )
ant.  property ( 'name' : 'bda-blueprints-webapp.ds.file' , 'value' : 'bda-blueprints-ds.xml' )
ant.  property ( 'name' : 'bda-blueprints-webapp.name' , 'value' : 'bda-blueprints-webapp' )
ant.  property ( 'name' : 'bda-blueprints-webapp.war.file' , 'value' : '${bda-blueprints-webapp.name}.war' )
ant.  property ( 'location' : '${basedir}/${tools.dist.relative.dir}' , 'name' : 'grid.resource.dir' )
ant.  property ( 'location' : '${basedir}/${grid-sample.dist.relative.dir}' , 'name' : 'grid.application.dir' )
ant.  property ( 'name' : 'grid.artifact.file' , 'value' : 'sample-wsrf-war.zip' )
ant.  property ( 'name' : 'grid.dir.dest' , 'value' : 'wsrf' )
ant.  property ( 'name' : 'grid.application.name' , 'value' : 'Sample' )
ant.  property ( 'name' : 'resource.file.jboss-globus-lib' , 'value' : '${cagrid-libs.binaries.file}' )
ant.  property ( 'name' : 'resource.file.jboss-globus-war' , 'value' : '${cagrid-base-war.binaries.file}' )
ant.  path ( 'id' : 'bda-utils.classpath' ) {
    fileset ( 'dir' : '${bda-utils.dir}' ) {
      include ( 'name' : '**/*.jar' )
    }
  }
ant.  taskdef ( 'classpathref' : 'bda-utils.classpath' , 'uri' : 'antlib:org.apache.ant.antunit' , 'resource' : 'org/apache/ant/antunit/antlib.xml' )
ant.  taskdef ( 'name' : 'for' , 'classpathref' : 'bda-utils.classpath' , 'classname' : 'net.sf.antcontrib.logic.ForTask' )
ant.  taskdef ( 'classpathref' : 'bda-utils.classpath' , 'resource' : 'net/sf/antcontrib/antcontrib.properties' )
ant.  taskdef ( 'classpathref' : 'bda-utils.classpath' , 'resource' : 'liquibasetasks.properties' )
ant.  taskdef ( 'name' : 'groovy' , 'classpathref' : 'bda-utils.classpath' , 'classname' : 'org.codehaus.groovy.ant.Groovy' )
ant.  import ( 'file' : '${bda-utils.dir}/bda-build-utils-${bda.version}.xml' )
ant.  delete ( 'dir' : '${working.dir}' , 'failonerror' : 'false' )
ant.  mkdir ( 'dir' : '${working.dir}' )
ant.  property ( 'location' : '${log.dir}' , 'name' : 'install-logs.dir' )
ant.  mkdir ( 'dir' : '${install-logs.dir}' )
ant.  tstamp {
    format ( 'pattern' : 'yyyy-MM-dd-HH-mm' , 'property' : 'install.time' )
  }
ant.  record ( 'name' : '${install-logs.dir}/install-${install.time}.log' , 'action' : 'start' )
ant.  description {
'''
		This build file is part of the bda-build-templates project. This is the master install file for the project.  It should be placed in project/software.  This script is copied into the distribution and  executed from the extracted distribution.  It is run by typing "ant" from the master project build.xml or from command line. This script has two flows install and upgrade.
		Install will do the following
 			* Install binaries
			* Configure binaries
			* Install application
			* Configure application
			* Re-create database
			* Upgrade database
		Upgrade will do the following
			* Install application
			* Configure application
			* Upgrade database
		The script includes target that may not be used by all projects, but are included in here becaue it is a template. This script has targets to deal with the following, you can delete targets you don't want to work with
		Application servers (option for grid services also)
			* JBoss
			* Tomcat
		Databases
			* MySQL
			* PostgreSQL
			* Oracle
		This script requires java and ant to run. Every thing else it needs is included in the distribution.
	'''
  }
ant.  property ( 'environment' : 'env' )
ant.  property ( 'file' : 'local.properties' )
ant.  property ( 'file' : 'project.properties' )
ant.  property ( 'name' : 'properties.file' , 'value' : '${basedir}/install.properties' )
ant.  echo ( 'message' : 'Using properties file of ${properties.file}.' )
ant.  available ( 'file' : '${properties.file}' , 'property' : 'properties.file.exists' )
ant.  fail ( 'message' : 'The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail.' , 'unless' : 'properties.file.exists' )
ant.  replaceregexp ( 'match' : '^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$' , 'replace' : '\1=\2' , 'byline' : 'true' , 'file' : '${properties.file}' )
ant.  replaceregexp ( 'match' : '^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$' , 'replace' : '\1=\2' , 'byline' : 'true' , 'file' : '${properties.file}' )
ant.  property ( 'file' : '${properties.file}' )
ant.  property ( 'name' : 'project.name' , 'value' : 'bda-blueprints' )
ant.  property ( 'name' : 'env.name' , 'value' : 'local' )
ant.  property ( 'location' : '${basedir}/logs' , 'name' : 'log.dir' )
ant.  property ( 'location' : '${basedir}/working' , 'name' : 'working.dir' )
ant.  property ( 'location' : '${working.dir}/temp' , 'name' : 'temp.dir' )
ant.  property ( 'location' : '${basedir}/bda-utils' , 'name' : 'bda-utils.dir' )
ant.  property ( 'location' : '${basedir}/${tools.dist.relative.dir}' , 'name' : 'tools.dir' )
ant.  property ( 'location' : '${basedir}/${common.dist.relative.dir}' , 'name' : 'common.dir.src' )
ant.  property ( 'location' : '${working.dir}/${common.dist.relative.dir}' , 'name' : 'common.dir.dest' )
ant.  property ( 'location' : '${basedir}/${db.dist.relative.dir}' , 'name' : 'db.dir.src' )
ant.  property ( 'location' : '${working.dir}/${db.dist.relative.dir}' , 'name' : 'db.dir.dest' )
ant.  property ( 'location' : '${working.dir}/${db-install.dist.relative.dir}' , 'name' : 'db-install.dir.dest' )
ant.  property ( 'location' : '${working.dir}/${db-upgrade.dist.relative.dir}' , 'name' : 'db-upgrade.dir.dest' )
ant.  property ( 'location' : '${basedir}/${jboss-conf.dist.relative.dir}' , 'name' : 'jboss-conf.dir.src' )
ant.  property ( 'location' : '${working.dir}/${jboss-conf.dist.relative.dir}' , 'name' : 'jboss-conf.dir.dest' )
ant.  property ( 'location' : '${basedir}/${bda-blueprints-webapp.dist.relative.dir}' , 'name' : 'bda-blueprints-webapp.dir.dist' )
ant.  property ( 'name' : 'bda-blueprints-webapp.ds.file' , 'value' : 'bda-blueprints-ds.xml' )
ant.  property ( 'name' : 'bda-blueprints-webapp.name' , 'value' : 'bda-blueprints-webapp' )
ant.  property ( 'name' : 'bda-blueprints-webapp.war.file' , 'value' : '${bda-blueprints-webapp.name}.war' )
ant.  property ( 'location' : '${basedir}/${tools.dist.relative.dir}' , 'name' : 'grid.resource.dir' )
ant.  property ( 'location' : '${basedir}/${grid-sample.dist.relative.dir}' , 'name' : 'grid.application.dir' )
ant.  property ( 'name' : 'grid.artifact.file' , 'value' : 'sample-wsrf-war.zip' )
ant.  property ( 'name' : 'grid.dir.dest' , 'value' : 'wsrf' )
ant.  property ( 'name' : 'grid.application.name' , 'value' : 'Sample' )
ant.  property ( 'name' : 'resource.file.jboss-globus-lib' , 'value' : '${cagrid-libs.binaries.file}' )
ant.  property ( 'name' : 'resource.file.jboss-globus-war' , 'value' : '${cagrid-base-war.binaries.file}' )
ant.  path ( 'id' : 'bda-utils.classpath' ) {
    fileset ( 'dir' : '${bda-utils.dir}' ) {
      include ( 'name' : '**/*.jar' )
    }
  }
ant.  taskdef ( 'classpathref' : 'bda-utils.classpath' , 'uri' : 'antlib:org.apache.ant.antunit' , 'resource' : 'org/apache/ant/antunit/antlib.xml' )
ant.  taskdef ( 'name' : 'for' , 'classpathref' : 'bda-utils.classpath' , 'classname' : 'net.sf.antcontrib.logic.ForTask' )
ant.  taskdef ( 'classpathref' : 'bda-utils.classpath' , 'resource' : 'net/sf/antcontrib/antcontrib.properties' )
ant.  taskdef ( 'classpathref' : 'bda-utils.classpath' , 'resource' : 'liquibasetasks.properties' )
ant.  taskdef ( 'name' : 'groovy' , 'classpathref' : 'bda-utils.classpath' , 'classname' : 'org.codehaus.groovy.ant.Groovy' )
ant.  import ( 'file' : '${bda-utils.dir}/bda-build-utils-${bda.version}.xml' )
ant.  delete ( 'dir' : '${working.dir}' , 'failonerror' : 'false' )
ant.  mkdir ( 'dir' : '${working.dir}' )
ant.  property ( 'location' : '${log.dir}' , 'name' : 'install-logs.dir' )
ant.  mkdir ( 'dir' : '${install-logs.dir}' )
ant.  tstamp {
    format ( 'pattern' : 'yyyy-MM-dd-HH-mm' , 'property' : 'install.time' )
  }
ant.  record ( 'name' : '${install-logs.dir}/install-${install.time}.log' , 'action' : 'start' )
setDefaultTarget ( 'upgrade' )
