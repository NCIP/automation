<?xml version="1.0" encoding="utf-8" ?>

<project name="bda-certification" default="build:project" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle" xmlns:ac="antlib:net.sf.antcontrib">
	<description>
		This build file is part of the bda-build-template project.  This is the master build file for the project.  It should be placed in project/software/.  This script wrappers sub projects to build, test and inspect code.  Additionally this project manges creation of distributions and deployment locally or remotely.  Deployments will call the install.xml from the distribution to install or upgrade the application.  Lastly this script will run include targets that require manipulation of containers (selenium tests because they require starting the application server container (and require a fully deployed application which this process is responsible for). This build script assumes two sub-projects bda-blueprints-webapp and bda-blueprints-api. The API targets are commented out and can be removed if not needed.  Also support for both tomcat and jboss download, install and configure are included.  These scripts require Java, Ant, Database and SVN to work.
	</description>

<!--
	<property file="project.properties" />
-->


    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="../ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <if>
        <available file="${project.name}.properties"/>
        <then>
            <echo>Using file '${project.name}.properties'.</echo>
            <property file="${project.name}.properties" />
        </then>
    </if>


	<property name="build.dir" location="${basedir}" />
	<property name="bda-download.dir" location="${build.dir}/bda-download" />
	<property name="lib.dir" location="${build.dir}/lib" />
	<property name="bda-utils.dir" location="${build.dir}/bda-utils" />
	<property name="log.dir" location="${build.dir}/logs" />

	
	<!-- retrive ivy files then retrieve bda files and librarires -->
	<property name="bda-download.file" value="bda-ivy-build.xml" />
	<mkdir dir="${bda-download.dir}" />
	<property name="bda-download.src.url" value="http://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-download/${bda-download.file}" />
	<get src="${bda-download.src.url}" dest="${bda-download.dir}/${bda-download.file}" />

	<ant inheritAll="false" inheritRefs="false" antfile="${bda-download.file}" target="retrieve-bda" dir="${bda-download.dir}">
		<property name="bda.version" value="${bda.version}" />
		<property name="bda-utils.dir" location="${bda-utils.dir}" />
		<property name="lib.dir" location="${lib.dir}" />
		<property name="software.dir" location="${build.dir}" />
	</ant>

	<!-- Includes- include BDA marcos -->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<taskdef name="antfetch" classname="net.sf.antcontrib.logic.AntFetch">
		<classpath>
			<pathelement location="../ant-contrib.jar"/>
		</classpath>
	</taskdef>


	<echo message="${project.name}"/>
<!--
	<propertycopy name="project.database.type" from="${project.name}.database.type" />
	<propertycopy name="project.database.system.user" from="${project.database.type}.database.system.user" />
	<propertycopy name="project.database.system.password" from="${project.database.type}.database.system.password" />
	<propertycopy name="project.database.server" from="${project.database.type}.database.server" />
	<propertycopy name="project.database.port" from="${project.database.type}.database.port" />
	<propertycopy name="project.database.name" from="${project.database.type}.database.name" />
	<propertycopy name="project.database.user" from="${project.database.type}.database.user" />
	<propertycopy name="project.database.password" from="${project.database.type}.database.password" />		
	<propertycopy name="project.database.url" from="${project.database.type}.database.url" />
	<propertycopy name="project.database.system.url" from="${project.database.type}.database.system.url" />

	<propertycopy name="project.master.build.location" from="${project.name}.master.build.location" />
	<propertycopy name="project.master.install.location" from="${project.name}.master.install.location" />
	<propertycopy name="project.single-command.build.target" from="${project.name}.single-command.build.target" />	
	<propertycopy name="project.single-command.package.target" from="${project.name}.single-command.package.target" />
	<propertycopy name="project.single-command.deployment.target" from="${project.name}.single-command.deployment.target" />
	<propertycopy name="project.single-command.distribution.target" from="${project.name}.single-command.distribution.target" />
	<propertycopy name="project.database.integration.target" from="${project.name}.database.integration.target" />	
	<propertycopy name="project.master.build.file" from="${project.name}.master.build.file" />
	<propertycopy name="project.exploded.dir.location" from="${project.name}.exploded.dir.location" />
	<propertycopy name="project.install.init.target" from="${project.name}.install.init.target" />

	<propertycopy name="project.svn.username" from="${project.name}.svn.username" />
	<propertycopy name="project.svn.password" from="${project.name}.svn.password" />
	<propertycopy name="project.svn.project.url" from="${project.name}.svn.project.url" />
	<propertycopy name="project.svn.local.checkout" from="${project.name}.svn.local.checkout" />
	<propertycopy name="project.svn.private.url" from="${project.name}.svn.private.url" />
	<propertycopy name="project.local.private.checkout" from="${project.name}.local.private.checkout" />
	<propertycopy name="project.ci-server.hostname" from="${project.name}.ci-server.hostname" />
	<propertycopy name="project.ci-server.jobname" from="${project.name}.ci-server.jobname" />
	<propertycopy name="project.ci-server.portnumber" from="${project.name}.ci-server.portnumber" />
	

	
	<echo message="databasetype::${project.database.type}"/>
	<property name="database.type" value="${project.database.type}" />
	<property name="database.system.user" value="${project.database.system.user}" />
	<property name="database.system.password" value="${project.database.system.password}" />
	<property name="database.server" value="${project.database.server}" />
	<property name="database.port" value="${project.database.port}" />
	<property name="database.name" value="${project.database.name}" />
	<property name="database.user" value="${project.database.user}" />
	<property name="database.password" value="${project.database.password}" />
	<property name="database.url" value="${project.database.url}" />
	<property name="database.system.url" value="${project.database.system.url}" />

	<property name="master.build.location" value="${project.master.build.location}" />
	<property name="single-command.build.target" value="${project.single-command.build.target}" />
	<property name="single-command.deployment.target" value="${project.single-command.deployment.target}" />
	<property name="single-command.package.target" value="${project.single-command.package.target}" />
	<property name="single-command.distribution.target" value="${project.single-command.distribution.target}" />
	<property name="database.integration.target" value="${project.database.integration.target}" />
	<property name="master.build.file" value="${project.master.build.file}" />
	<property name="master.install.location" value="${project.master.install.location}" />
	<property name="exploded.dir.location" value="${project.exploded.dir.location}" />
	<property name="install.init.target" value="${project.install.init.target}" />

	<property name="svn.username" value="${project.svn.username}" />
	<property name="svn.password" value="${project.svn.password}" />	
	<property name="svn.project.url" value="${project.svn.project.url}" />
	<property name="svn.local.checkout" value="${project.svn.local.checkout}" />
	<property name="svn.private.url" value="${project.svn.private.url}" />
	<property name="local.private.checkout" value="${project.local.private.checkout}" />
	
	<property name="ci-server.hostname" value="${project.ci-server.hostname}" />
	<property name="ci-server.jobname" value="${project.ci-server.jobname}" />
	<property name="ci-server.portnumber" value="${project.ci-server.portnumber}" />
-->
	
	<property name="certification.directory.name" value="${user.home}/apps"/>
	
	<property name="local.hudson.dir" value="${user.home}/apps/hudson_logs"/>
	
	
	<switch value="${database.type}">
		<case value="oracle">
			<property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
			<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
			<property name="database.schema" value="${database.name}"/>
		</case>
		<case value="mysql">
			<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.5.jar"/>
			<property name="database.driver" value="com.mysql.jdbc.Driver"/>
			<property name="database.schema" value="${database.name}"/>
		</case>
		<case value="postgresql">
			<property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-603.jar"/>
			<property name="database.driver" value="org.postgresql.Driver"/>
			<property name="database.schema" value="public"/>
		</case>
		<default>
			<fail message="Invalid database type ${database.type}"/>
		</default>
	</switch>	


	<!-- Start logging -->
	<mkdir dir="${log.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${log.dir}/install-${install.time}.log" action="start" />


	<path id="jdbc.driver.classpath">
		<pathelement location="${database.driver.file}"/>
	</path>


	<!-- Targets -->


	<target name="init" description="Sets up build are and initalizes variables">		
		<echo message="IN INIT::::${database.type}"/>
	</target>

	<target name="build:project" depends="init,build:single-command-build" description="Sets up build are and initalizes variables">
		<echo message="call build:project target.. "/>
	</target>
	
	<target name="validate:JAD" depends="init,clean-deployments" description="Runs pre-install validation checks bda-utils">
		<validate-environment
			ant.check.version="${ant.minimum.version}"
			java.check.version.major="${java.major.version}"
			java.check.version.minor="${java.minor.version}"		
			/>
		<if>
			<not>
				<equals arg1="${database.type}" arg2="oracle"/>
			</not>
			<then>	
				<database-create
					database.driver="${database.driver}"
					database.system.url="${database.system.url}"
					database.system.user="${database.system.user}"
					database.system.password="${database.system.password}"
					database.url="${database.url}"
					database.user="${database.user}"
					database.password="${database.password}"
					database.name="${database.name}"
					/>
			</then>
		</if>
		<validate-database
			database.driver="${database.driver}"
			database.system.url="${database.system.url}"
			database.system.user="${database.system.user}"
			database.system.password="${database.system.password}"
			database.url="${database.url}"
			database.user="${database.user}"
			database.password="${database.password}"
			database.name="${database.name}"
			/>
	</target>

	
	<target name="validate:svn:checkout-project" depends="init,svn:scorch,svn:init">

		<svn username="${svn.username}" password="${svn.password}">
			<checkout url="${svn.project.url}" revision="HEAD" destPath="${svn.local.checkout}" />
		</svn>
	</target>
	
	<target name="svn:scorch" unless="svn.no.scorch">
		<echo message="Scorching local SVN working directory ${svn.local.checkout}..." />
		<delete dir="${svn.local.checkout}" />
	</target>
	
	<target name="svn:init">
		<delete dir="working"/>
		<mkdir dir="working"/>
	</target>
	
	<target name="build:single-command-build" depends="init">
        <!--output the application.base.path to a local.properties file so-->
        <!--that it is available to all builds and overridden-->
        <echo file="${master.build.location}/local.properties" message="application.base.path=${user.home}/apps/${project.name}"/>
		<exec osfamily="unix" executable="ant" dir="${master.build.location}" failonerror="true">
			<arg value="${single-command.build.target}" />			
		</exec>
		<echo message="START BUILD"/>
		<exec osfamily="windows" executable="ant.bat" dir="${master.build.location}" failonerror="true">
			<arg value="${single-command.build.target}" />
		</exec>
	</target>

	<target name="clean-deployments">		
		<invokegroovymethod groovy-file-location="${build.dir}" groovy-file-name="CertificationUtils.groovy" groovy-method-name="killProcessOnCertificationDir"/>
		<delete dir="${user.home}/apps"/>
	</target>


	<target name="build:single-command-deployment" depends="init">
		<exec osfamily="unix" executable="ant" dir="${master.build.location}" failonerror="true">
			<arg value="${single-command.package.target}" />
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${master.build.location}" failonerror="true">
			<arg value="${single-command.package.target}" />
		</exec>

		<override-properties-prep
			override.properties="${override.properties}"
			override.properties.string.property.name="override.properties.string"
			/>

		<exec osfamily="unix" executable="ant" dir="${exploded.dir.location}" failonerror="true">
			<arg value="-Dproperties.file=install.properties" />
			<arg value="-Dforce.reinstall=true" />
			<arg value="-Ddatabase.system.user=${database.system.user}" />
			<arg value="-Ddatabase.system.password=${database.system.password}" />
			<arg value="-Ddatabase.server=${database.server}" />
			<arg value="-Ddatabase.port=${database.port}" />
			<arg value="-Ddatabase.name=${database.name}" />
			<arg value="-Ddatabase.user=${database.user}" />
			<arg value="-Ddatabase.password=${database.password}" />
			<arg value="-Ddatabase.url=${database.url}" />
			<arg value="-Ddatabase.system.url=${database.system.url}" />
			<arg line="${override.properties.string}"/>
			<arg value="${single-command.deployment.target}" />
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${exploded.dir.location}" failonerror="true">			
			<arg value="-Dproperties.file=install.properties" />			
			<arg value="-Dforce.reinstall=true" />
			<arg value="-Ddatabase.system.user=${database.system.user}" />
			<arg value="-Ddatabase.system.password=${database.system.password}" />
			<arg value="-Ddatabase.server=${database.server}" />
			<arg value="-Ddatabase.port=${database.port}" />
			<arg value="-Ddatabase.name=${database.name}" />
			<arg value="-Ddatabase.user=${database.user}" />
			<arg value="-Ddatabase.password=${database.password}" />
			<arg value="-Ddatabase.url=${database.url}" />
			<arg value="-Ddatabase.system.url=${database.system.url}" />
			<arg line="${override.properties.string}"/>
			<arg value="${single-command.deployment.target}" />			
		</exec>

	</target>

	<target name="build:remote-upgrade" depends="init">
		<invokegroovymethod groovy-file-location="${build.dir}" groovy-file-name="CertificationUtils.groovy" groovy-method-name="killProcessOnCertificationDir"/>
		<antfetch inheritall="false" dir="${exploded.dir.location}" target="${install.init.target}" return="application.base.path"/>
		<antfetch inheritall="false" dir="${exploded.dir.location}" target="${install.init.target}" return="jboss.binaries.relative.dir"/>

		<delete file="${application.base.path}/${jboss.binaries.relative.dir}/server/default/bin/default.pid" failonerror="false" />

		<exec osfamily="unix" executable="ant" dir="${master.build.location}" failonerror="false">
			<arg value="${single-command.package.upgrader.target}" />
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${master.build.location}" failonerror="false">
			<arg value="${single-command.package.upgrader.target}" />
		</exec>			

		<override-properties-prep
			override.properties="${override.properties}"
			override.properties.string.property.name="override.properties.string"
			/>
		<override-properties-prep
			override.properties="${override.remote.properties}"
			override.properties.string.property.name="override.remote.properties.string"
			/>

        <echoxml>
        <exec osfamily="unix" executable="ant" dir="${master.build.location}" failonerror="true">
            <arg value="-Dproperties.file=upgrade.properties" />
            <arg value="-Dforce.reinstall=true" />
            <arg value="-Ddatabase.system.user=${database.system.user}" />
            <arg value="-Ddatabase.system.password=${database.system.password}" />
            <arg value="-Ddatabase.server=${database.server}" />
            <arg value="-Ddatabase.port=${database.port}" />
            <arg value="-Ddatabase.name=${database.name}" />
            <arg value="-Ddatabase.user=${database.user}" />
            <arg value="-Ddatabase.password=${database.password}" />
            <arg value="-Ddatabase.url=${database.url}" />
            <arg value="-Ddatabase.system.url=${database.system.url}" />
            <arg value="-Doverride.properties=${override.properties}" />
            <arg line="${override.properties.string}"/>
            <arg line="${override.remote.properties.string}"/>
            <arg value="${remote-upgrade.target}" />
        </exec>
        </echoxml>

		<exec osfamily="unix" executable="ant" dir="${master.build.location}" failonerror="true">
			<arg value="-Dproperties.file=upgrade.properties" />
			<arg value="-Dforce.reinstall=true" />	
			<arg value="-Ddatabase.system.user=${database.system.user}" />
			<arg value="-Ddatabase.system.password=${database.system.password}" />
			<arg value="-Ddatabase.server=${database.server}" />
			<arg value="-Ddatabase.port=${database.port}" />
			<arg value="-Ddatabase.name=${database.name}" />
			<arg value="-Ddatabase.user=${database.user}" />
			<arg value="-Ddatabase.password=${database.password}" />
			<arg value="-Ddatabase.url=${database.url}" />
			<arg value="-Ddatabase.system.url=${database.system.url}" />
			<arg value="-Doverride.properties=${override.properties}" />
			<arg line="${override.properties.string}"/>
			<arg line="${override.remote.properties.string}"/>
			<arg value="${remote-upgrade.target}" />
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${master.build.location}" failonerror="true">
			<arg value="-Dproperties.file=upgrade.properties" />
			<arg value="-Dforce.reinstall=true" />
			<arg value="-Ddatabase.system.user=${database.system.user}" />
			<arg value="-Ddatabase.system.password=${database.system.password}" />
			<arg value="-Ddatabase.server=${database.server}" />
			<arg value="-Ddatabase.port=${database.port}" />
			<arg value="-Ddatabase.name=${database.name}" />
			<arg value="-Ddatabase.user=${database.user}" />
			<arg value="-Ddatabase.password=${database.password}" />
			<arg value="-Ddatabase.url=${database.url}" />
			<arg value="-Ddatabase.system.url=${database.system.url}" />
			<arg value="-Doverride.properties=${override.properties}" />
			<arg line="${override.properties.string}"/>
			<arg line="${override.remote.properties.string}"/>
			<arg value="${remote-upgrade.target}" />
		</exec>

	
	<!--
		<exec osfamily="unix" executable="ant" dir="${master.build.location}" failonerror="true">
			<arg value="dist:upgrader:prep" />
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${master.build.location}" failonerror="true">
			<arg value="dist:upgrader:prep" />
		</exec>

		<override-properties-prep
			override.properties="${override.properties}"
			override.properties.string.property.name="override.properties.string"
			/>

		<exec osfamily="unix" executable="ant" dir="${exploded.dir.location}" failonerror="true">
			<arg value="-Dproperties.file=upgrade.properties" />
			<arg value="-Dforce.reinstall=true" />
			<arg value="-Ddatabase.system.user=${database.system.user}" />
			<arg value="-Ddatabase.system.password=${database.system.password}" />
			<arg value="-Ddatabase.server=${database.server}" />
			<arg value="-Ddatabase.port=${database.port}" />
			<arg value="-Ddatabase.name=${database.name}" />
			<arg value="-Ddatabase.user=${database.user}" />
			<arg value="-Ddatabase.password=${database.password}" />
			<arg value="-Ddatabase.url=${database.url}" />
			<arg value="-Ddatabase.system.url=${database.system.url}" />
			<arg line="${override.properties.string}"/>
			<arg value="upgrade" />
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${exploded.dir.location}" failonerror="true">			
			<arg value="-Dproperties.file=upgrade.properties" />			
			<arg value="-Dforce.reinstall=true" />
			<arg value="-Ddatabase.system.user=${database.system.user}" />
			<arg value="-Ddatabase.system.password=${database.system.password}" />
			<arg value="-Ddatabase.server=${database.server}" />
			<arg value="-Ddatabase.port=${database.port}" />
			<arg value="-Ddatabase.name=${database.name}" />
			<arg value="-Ddatabase.user=${database.user}" />
			<arg value="-Ddatabase.password=${database.password}" />
			<arg value="-Ddatabase.url=${database.url}" />
			<arg value="-Ddatabase.system.url=${database.system.url}" />
			<arg line="${override.properties.string}"/>
			<arg value="upgrade" />			
		</exec>
	-->
	</target>


	<target name="build:database-integration" depends="init">
	<!--
		<invokegroovymethod groovy-file-location="${build.dir}" groovy-file-name="CertificationUtils.groovy" groovy-method-name="checkDBIntegration"/>		
	-->
		<invokegroovymethod groovy-file-location="${build.dir}" groovy-file-name="CertificationUtils.groovy" groovy-method-name="killProcessOnCertificationDir"/>
		<delete dir="${user.home}/apps"/>
	
		<override-properties-prep
			override.properties="${override.properties}"
			override.properties.string.property.name="override.properties.string"
			/>	
	
		<exec osfamily="unix" executable="ant" dir="${exploded.dir.location}" failonerror="true">
			<arg value="-Dproperties.file=install.properties" />
			<arg value="-Dforce.reinstall=true" />
			<arg value="-Ddatabase.system.user=${database.system.user}" />
			<arg value="-Ddatabase.system.password=${database.system.password}" />
			<arg value="-Ddatabase.server=${database.server}" />
			<arg value="-Ddatabase.port=${database.port}" />
			<arg value="-Ddatabase.name=${database.name}" />
			<arg value="-Ddatabase.user=${database.user}" />
			<arg value="-Ddatabase.password=${database.password}" />
			<arg value="-Ddatabase.url=${database.url}" />
			<arg value="-Ddatabase.system.url=${database.system.url}" />
			<arg line="${override.properties.string}"/>
			<arg value="${single-command.deployment.target}" />
			<arg value="-listener" />
			<arg value="gov.nih.nci.bda.certification.listener.TaskListener" />
			<redirector outputproperty="redirector1.out">
			</redirector>			
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${exploded.dir.location}" failonerror="true">			
			<arg value="-Dproperties.file=install.properties" />			
			<arg value="-Dforce.reinstall=true" />
			<arg value="-Ddatabase.system.user=${database.system.user}" />
			<arg value="-Ddatabase.system.password=${database.system.password}" />
			<arg value="-Ddatabase.server=${database.server}" />
			<arg value="-Ddatabase.port=${database.port}" />
			<arg value="-Ddatabase.name=${database.name}" />
			<arg value="-Ddatabase.user=${database.user}" />
			<arg value="-Ddatabase.password=${database.password}" />
			<arg value="-Ddatabase.url=${database.url}" />
			<arg value="-Ddatabase.system.url=${database.system.url}" />
			<arg line="${override.properties.string}"/>
			<arg value="${single-command.deployment.target}" />
			<arg value="-listener" />
			<arg value="gov.nih.nci.bda.certification.listener.TaskListener" />
			<redirector outputproperty="redirector1.out">
			</redirector>
		</exec>
		<echo message="REDIRECTOR::::${redirector1.out}"/>

		<propertyregex property="task.list"
		      input="${redirector1.out}"
		      regexp="(?s).*START FROM THE TASKLISTENER(.*)END FROM THE TASKLISTENER.*$"
		      select="\1"/>

		<echo message="TASK LIST::::${task.list}"/>		
		
	</target>


	<target name="build:bda-utils" depends="init">				
		<invokegroovymethod groovy-file-location="${build.dir}" groovy-file-name="CertificationUtils.groovy" groovy-method-name="getBdaUtilsVersion"/>
	</target>


	<target name="build:template-properties" depends="init">

		<exec osfamily="unix" executable="ant" dir="${master.build.location}" failonerror="true">
			<arg value="${single-command.package.target}" />
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${master.build.location}" failonerror="true">
			<arg value="${single-command.package.target}" />
		</exec>

		<antfetch inheritall="false" dir="${exploded.dir.location}" target="${install.init.target}" return="properties.template.file"/>
		<echo message="${properties.template.file}"/>

		<invokegroovymethod groovy-file-location="${build.dir}" groovy-file-name="CertificationUtils.groovy" groovy-method-name="checkTemplateFiles"/>

	</target>


	<target name="build:private-repository-properties" depends="init">

		<svn username="${svn.username}" password="${svn.password}">
			<checkout url="${svn.private.url}" revision="HEAD" destPath="${local.private.checkout}" />
		</svn>
				
		<invokegroovymethod groovy-file-location="${build.dir}" groovy-file-name="CertificationUtils.groovy" groovy-method-name="checkPrivateRepositoryProperties"/>
	</target>

	<target name="build:ci-server" depends="init">				
		<echo message="Verifying the job from :${ci-server.url}/hudson/job/${ci-server.jobname}/lastBuild"/>
		<if>
			<http url="${ci-server.url}"/>
			<then>
				<get src="${ci-server.url}/hudson/job/${ci-server.jobname}/lastBuild" dest="${master.build.location}/ciBuildLog.xml"/>
				<invokegroovymethod groovy-file-location="${build.dir}" groovy-file-name="CertificationUtils.groovy" groovy-method-name="parseAndFormatDate"/>
			</then>
			<else>
				<fail message="CI SERVER NOT REACHABLE"/>
			</else>
		</if>	
	</target>
	
	
	<target name="build:check-bdafied" depends="init">
		<invokegroovymethod groovy-file-location="${build.dir}" groovy-file-name="CertificationUtils.groovy" groovy-method-name="checkBdaEnabled"/>
	</target>

	<target name="build:validate-app-servers" depends="init,test:seleniumrc:stop">
	
		<taskdef resource="selenium-ant.properties">
		    <classpath>
			<pathelement location="../selenium-server.jar"/>
			<pathelement location="../selenium-server-coreless.jar"/>
			<pathelement location="../selenium-server-sources.jar"/>
			<pathelement location="../selenium-server-tests.jar"/>
			<pathelement location="../selenium-server-test-sources.jar"/>	
			<pathelement location="../selenium-java-client-driver.jar"/>
			<pathelement location="../selenium-java-client-driver-sources.jar"/>
			<pathelement location="../selenium-java-client-driver-tests.jar"/>
			<pathelement location="../selenium-java-client-driver-test-sources.jar"/>
		    </classpath>
		</taskdef>
		
		<invokegroovymethod groovy-file-location="${build.dir}" groovy-file-name="CertificationUtils.groovy" groovy-method-name="checkDeploymentShakeout"/>
	</target>

	<target name="test:seleniumrc:stop">
		<get taskname="selenium-shutdown" src="http://localhost:4444/selenium-server/driver/?cmd=shutDown" dest="${user.home}\selenium-test-cases\shutdown_result.txt" ignoreerrors="true"/>
		<sleep seconds="10"/>     
	</target>

	<target name="build:check-commandline-installer" depends="init">				
		<exec osfamily="unix" executable="ant" dir="${master.build.location}" failonerror="true">
			<arg value="${single-command.distribution.target}" />
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${master.build.location}" failonerror="true">
			<arg value="${single-command.distribution.target}" />
		</exec>
		
		<invokegroovymethod groovy-file-location="${build.dir}" groovy-file-name="CertificationUtils.groovy" groovy-method-name="checkCommandLineInstaller"/>

				
		<invokegroovymethod groovy-file-location="${build.dir}" groovy-file-name="CertificationUtils.groovy" groovy-method-name="killProcessOnCertificationDir"/>
		<delete dir="${user.home}/apps"/>

		<override-properties-prep
			override.properties="${override.properties}"
			override.properties.string.property.name="override.properties.string"
			/>	


		<exec osfamily="unix" executable="ant" dir="${master.install.location}" failonerror="true">
			<arg value="-Dforce.reinstall=true" />
			<arg line="${override.properties.string}"/>
			<arg value="${single-command.deployment.target}" />
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${master.install.location}" failonerror="true">			
			<arg value="-Dforce.reinstall=true" />
			<arg line="${override.properties.string}"/>
			<arg value="${single-command.deployment.target}" />
		</exec>

	</target>


	<macrodef name="runseliniumtest" description="run a selenium test">
	<attribute name="hostname" />
		<sequential>
			<selenese 
				suite="../certification-tests/tests/certification-test-suite.html"
				browser="*chrome /usr/lib64/firefox-3.0.18/firefox-bin"
				results="../certification-tests/results/results.html"
				timeoutInSeconds="90"
				startURL="@{hostname}" />
		</sequential>
	</macrodef>
	
	<macrodef name="invokegroovymethod" description="run a selenium test">
	<attribute name="groovy-file-location" />
	<attribute name="groovy-file-name" />
	<attribute name="groovy-method-name" />
		<sequential>
            <echo>groovy-file-location=@{groovy-file-location}</echo>
            <echo>groovy-file-name=@{groovy-file-name}</echo>
            <echo>groovy-method-name=@{groovy-method-name}</echo>            
			<groovy>
				import org.codehaus.groovy.runtime.InvokerHelper
				<arg line="@{groovy-file-location}"/>
				<arg line="@{groovy-file-name}"/>
				<arg line="@{groovy-method-name}"/>
				println "Invoking method: "+args[2]+" on Class: "+args[0]+"/"+args[1]
				def loader = new GroovyClassLoader(getClass().getClassLoader())
				def testClass = loader.parseClass(new File(args[0]+"/"+args[1]))			
				InvokerHelper.invokeMethod(testClass.newInstance(ant,project),args[2],null)
			</groovy>
		</sequential>
	</macrodef>


</project>
