<project name="projectname">
	<project-details>
		<contacts>
			<contact name="" type="tech|pm"/>
		</contacts>
		<repository-url/>
		<sub-projects numberofsub-projects="">
		</sub-projects>
		<database-containers numofcontainers="" use-bda="">
			<database-container prefix="prefix" database-type="">
				<database-types type="" minimum-version=""/>
			</database-container>
		</database-containers>
		<jboss-containers numofcontainers="">
			<jboss-container prefix="prefix" version="version"/>
		</jboss-containers>
		<tomcat-containers numofcontainers="">
			<tomcat-container prefix="prefix" version="version"/>
		</tomcat-containers>
		<!-- Allows us to define certain types used by all builds, we will have our own validation classs or target. These will be our custom types in addition to a base type of number, string boolean or list.
			email
			hostname
			ip-address
			url
		-->
		<property-types>
			<property-type name="" base-type="number|string|boolean|list" validation-class="" validation-target="">
				<!-- if you want to provide a list of values add below -->
				<list-type value="single|multiple"/>
				<property-item value=""/>
			</property-type>
		</property-types>
	</project-detail>
	<build-steps>
		<!-- descriptions maybe be show on web-ui -->
		<!-- plugin -->
		<build>
			<description></description>
			<sub-projects>
				<!-- Anything that the dev team wants to include in a distribution need to be done in this target -->
				<!-- install time considerations...
					For BDA Projects
						Build-time - Call dist:installer/upgrader:prep targets
						Install-time - Call the standard install:{container}:{webapp}* as default target for install and configure of application.
					For non-BDA Projects
						Build time- must copy install-time build file, resource and properties files into distribution
						Install time- 
				-->
				<sub-project prefix="" builder="ant|maven|ect" build-base-dir="" build-file="" build-target="">
					<property-maps>
						<property-map sub-project.property.name="" bda-project.property.name=""/>
					</proeprty-maps>
				</sub-project>
			</sub-projects>
		</build>
		<!-- plugin -->
		<test>
			<description></description>
			<sub-projects>
				<sub-project prefix="" builder="ant|maven|ect" test-base-dir="" test-file="" test-target="" test-output-dir="" >
					<property-maps>
						<property-map sub-project.property.name="" bda-project.property.name=""/>
					</proeprty-maps>
				</sub-project>
			</sub-projects>
		</test>
		<!-- plugin -->
		<static-analysis>
			<description></description>
			<sub-projects>
				<sub-project prefix="" builder="ant|maven|ect" sa-base-dir="" sa-file="" sa-target="" sa-output-dir="" >
					<property-maps>
						<property-map sub-project.property.name="" bda-project.property.name=""/>
					</proeprty-maps>
				</sub-project>
			</sub-projects>
		</static-analysis>
		 
		<dist>
			<obfuscate-properties>
				<required.property.list>
				</required.property.list>
				<optional.property.list>
				</optional.property.list>
				<delete.property.list>
				</delete.property.list>
				<comment.property.list>
				</comment.property.list>
				<uncomment.property.list>
				</uncomment.property.list>
			</obfuscate-properties>
			<containers>
				<!-- All products will have 
					bda-utils.dir
					install.xml renamed to build.xml and modified
					properties files
					commmon.dir	
				-->
				<!-- Sub-project deterimes which artifacts from projects are included -->
				<!-- plugin -->
				<container type="jboss" prefix="">
					<!-- inlcudes jboss binaries/patches and grid files if install-grid=true -->
					<sub-project prefix="" build-artifact-dir="" build-artifact-pattern="" install-grid="true|false"/>
				</container>
				<!-- plugin -->
				<container type="tomcat" prefix="">
					<!-- inlcudes tomcat binaries/patches and grid files if install-grid=true -->
					<sub-project prefix="" build-artifact-dir="" build-artifact-pattern="" install-grid="true|false"/>
				</container>
				<!-- plugin -->
				<container type="database" prefix="">
					<!-- Requires install scripts in one directory and upgrade in another.
					     Requires child directory for each type of db supported with files under them.
					     So teams may need to restructure
						sub-poject/db-(install|upgrade)/${database.type}/*.sql
					-->
					<sub-project prefix="" db-install-dir="" db-upgrade-dir=""/>
				</container>
			</containers>
			<distributions>
				<!-- plugin -->
				<distribution name="complete-installer">
					<!-- loops through containers, packages them  into one dist -->
				</distribution>
				<!-- plugin -->
				<distribution name="complete-upgrader">
					<!-- loops through containers, packages them  into one dist -->
				</distribution>
				<!-- plugin -->
				<distribution name="container-installer">
					<!-- loops through containers, packages them into sepearate distributions -->
				</distribution>
				<!-- plugin -->
				<distribution name="container-upgrader">
					<!-- loops through containers, packages them into sepearate distributions -->
				</distribution>
				<!-- plugin -->
				<distribution name="gui-installer">
					<!-- consumes complete-installer -->
				</distribution>
				<!-- plugin -->
				<distribution name="source">
					<!-- source for whole project -->
					<source builder="ant|maven|ect" build-base-dir="" build-file="" build-target="">
						<property-maps>
							<property-map sub-project.property.name="" bda-project.property.name=""/>
						</proeprty-maps>
					</source>
				</distribution>
			</distributions>
		</dist>
			
		<deploy>
			<description></description>
			<!-- Plugin -->
			<!-- Always uses complete-(installer|upgrader) -->
			<local-install/>
			<!-- Plugin -->
			<remote-install dist-type="complete-installer|...">
				<!-- Validation pre-deploy validatiion
				Copies over deploy-tools to remote machine, deploy-tools includes setup shell script, validation script (groovy?), version file, ant, java and support libraries.
				Executes script which extracts ant, java and support libs (if version file is not up to date or does not exist).
				Executes validation script which:
					checks space avaliable 
				-->
			</remote-install>
			<!-- Plugin -->
			<!-- Always uses complete-(installer|upgrader) -->
			<local-upgrade/>
			<!-- Plugin -->
			<remote-upgrade dist-type="complete-upgrader|..."/>
				<!-- Validation pre-deploy validatiion
				Copies over deploy-tools to remote machine, deploy-tools includes setup shell script, validation script (groovy?), version file, ant, java and support libraries.
				Executes script which extracts ant, java and support libs (if version file is not up to date or does not exist).
				Executes validation script which:
					checks space avaliable 
				-->
			</remote-upgrade>
		 </deploy>
		 <utility>
		 </utility>
		 <other>
		 </other>
	</build-steps>
	<install-steps>
		<!-- Install steps are broken down into phases -->
		<!-- Initialization steps -->
		<initialization>
			<common>
				<!-- plugin -->
				<!-- Loads props from files and environment, also adds properties which reference other property values (have embedded ${}) to the a filter set used when copying files.  -->
				<properties-load/>
				<!-- plugin -->
				<!-- Sets up global properties, split (basename,dirname)  and os derived props (like application.base.path) -->
				<properties-init-global/>
				<!-- plugin -->
				<!-- Do any "bda-utils" like import or taskdefs -->
				<libraries-init/>
				<!-- plugin -->
				<!--  -->
				<x/>
			</common>
			<database>
				<!-- plugin -->
				<!-- Sets up db properties, split (basename,dirname)  and os derived props (like application.base.path) -->
				<properties-init-db/>
			</database>
			<jboss>
				<!-- plugin -->
				<!-- Sets up jboss properties, split (basename,dirname)  and os derived props (like application.base.path) -->
				<properties-init-jboss/>
			</jboss>
			<tomcat>
				<!-- plugin -->
				<!-- Sets up tomcat properties, split (basename,dirname)  and os derived props (like application.base.path) -->
				<properties-init-tomcat/>
			</tomcat>
		</initialization>
		<!-- Validation for all containers happens during pre-validation -->
		<pre-validation>
			<common>
			</common>
			<database>
				<!-- plugin -->
				<db-verify-connect prefix="" disable="false" override="false" pre-run="false" post-run="false">
					<!-- properties for basedir, build.file.location and build target could be specified here-->
					<property type="" name="db-verify-version.dist.relative.base.dir" value=""/>
				</db-verify-version>
				<!-- plugin -->
				<db-verify-version prefix="" disable="false" override="false" pre-run="false" post-run="false">
					<!-- properties for basedir, build.file.location and build target could be specified here-->
					<property type="" name="db-verify-version.dist.relative.base.dir" value=""/>
				</db-verify-version>
			</database>
			<jboss>
			</jboss>
			<tomcat>
			</tomcat>
		</pre-validation>
		<backup>
			<common>
			</common>
			<database>
			</database>
			<jboss>
			</jboss>
			<tomcat>
			</tomcat>
		</backup>
		<execution>
			<common>
			</common>
			<database>
			</database>
			<jboss>
			</jboss>
			<tomcat>
			</tomcat>
		</execution>
		<post-validation>
			<common>
			</common>
			<database>
			</database>
			<jboss>
			</jboss>
			<tomcat>
			</tomcat>
		</post-validation>
	</install-steps>
</project>
