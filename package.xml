<?xml version="1.0" encoding="utf-8" ?>


<project name="package" default="build:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" >

	<target name="dist:installer:prep" depends="build:all,dist:tools:retrieve" description="Copies artifacts not generated by sub-project builds into the install distribution area">
		<copy todir="${db-install.dist.dir}" overwrite="true">
			<fileset dir="${db-install.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${db-upgrade.dist.dir}" overwrite="true">
			<fileset dir="${db-upgrade.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

		<!-- Copy over librarires -->
		<echo message="Copying bda-lib dir"/>
		<copy todir="${dist.exploded.dir}/bda-lib" overwrite="true">
			<fileset dir="${bda-lib.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

		<delete>
			<fileset dir="${dist.exploded.dir}">
				<include name="build.xml" />
				<include name="*properties*" />
			</fileset>
		</delete>

		<!-- Copy install related xml and properties files -->
		<echo message="Copying build and property files"/>
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="install.xml" />
				<include name="install.properties" />
				<include name="upgrade.properties" />
				<include name="properties.template" />
				<include name="project.properties" />
				<include name="database-tasks.xml" />
				<include name="application-server-tasks.xml" />
				<include name="validation-tasks.xml" />
				<include name="utils.xml" />
				<include name="taskdefs.xml" />
				<include name="init.xml" />
			</fileset>
		</copy>

		<!-- Set default target and properyties.file to install and install.properties -->
		<basename file="${properties.file}" property="properties.file.name"/>
		<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true" match="(.project.*default=.)\w+(.\s+.*)" replace="\1install\2" />
		<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true" match="(.*)install.properties(.*)" replace="\1${properties.file.name}\2" />

		<move file="${dist.exploded.dir}/install.xml" tofile="${dist.exploded.dir}/build.xml" />

		<copy todir="${dist.exploded.dir}/common" overwrite="true">
			<fileset dir="${common.dir}">
				<include name="**/resources/**/*" />
			</fileset>
		</copy>

		<copy todir="${dist.exploded.dir}/tools" overwrite="true">
			<fileset dir="${download.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<target name="dist:installer" depends="dist:installer:prep" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${petstore.install.zip.file}" />
		<delete file="${dist.exploded.dir}/upgrade.properties"/>
		<replaceregexp file="${dist.exploded.dir}/build.xml" byline="true" match="(&lt;property name=&quot;properties.file&quot;\s+value=&quot;).*(&quot;\s*\/&gt;)" replace="\1install.properties\2" />		
		<zip destfile="${dist.dir}/${petstore.install.zip.file}" basedir="${dist.exploded.dir}" />
	</target>

	<target name="dist:upgrader:prep" depends="build:all,dist:tools:retrieve" description="Copies artifacts not generated by sub-project builds into the install distribution area">
		<copy todir="${db-upgrade.dist.dir}" overwrite="true">
			<fileset dir="${db-upgrade.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<delete>
			<fileset dir="${dist.exploded.dir}">
				<include name="build.xml" />
				<include name="*properties*" />
			</fileset>
		</delete>

		<!-- Copy over librarires -->
		<echo message="Copying bda-lib dir"/>
		<copy todir="${dist.exploded.dir}/bda-lib" overwrite="true">
			<fileset dir="${bda-lib.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

		<!-- Copy install related xml and properties files -->
		<echo message="Copying build and property files"/>
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="install.xml" />
				<include name="install.properties" />
				<include name="upgrade.properties" />
				<include name="properties.template" />
				<include name="project.properties" />
				<include name="database-tasks.xml" />
				<include name="application-server-tasks.xml" />
				<include name="validation-tasks.xml" />
				<include name="utils.xml" />
				<include name="taskdefs.xml" />
				<include name="init.xml" />				
			</fileset>
		</copy>

		<!-- Set default target and properyties.file to install and install.properties -->
		<basename file="${properties.file}" property="properties.file.name"/>
		<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true" match="(.project.*default=.)\w+(.\s+.*)" replace="\1upgrade\2" />
		<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true" match="(.*)install.properties(.*)" replace="\1${properties.file.name}\2" />

		<move file="${dist.exploded.dir}/install.xml" tofile="${dist.exploded.dir}/build.xml" />

		<copy todir="${dist.exploded.dir}/common" overwrite="true">
			<fileset dir="${common.dir}">
				<include name="**/resources/**/*" />
			</fileset>
		</copy>

		<copy todir="${dist.exploded.dir}/tools" overwrite="true">
			<fileset dir="${download.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<target name="dist:upgrader" depends="dist:upgrader:prep" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${petstore.upgrade.zip.file}" />
		<!-- Set environment name to external -->
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="upgrade.properties" />
			</fileset>              
		</copy>         
		<delete file="${dist.exploded.dir}/install.properties"/>
		<replaceregexp file="${dist.exploded.dir}/build.xml" byline="true" match="(&lt;property name=&quot;properties.file&quot;\s+value=&quot;).*(&quot;\s*\/&gt;)" replace="\1upgrade.properties\2" />
		<zip destfile="${dist.dir}/${petstore.upgrade.zip.file}" basedir="${dist.exploded.dir}" />

	</target>

	<target name="dist:tools:retrieve" description="Downloads binary applications from commonlibrary repository" depends="
		init,
		dist:tools:retrieve:jboss
		" >
	</target>

	<target name="dist:tools:retrieve:jboss" unless="jboss.tools.exists" description="Downloads JBOSS from binary repository and verifies checksum">
		<get src="${jboss.src.url}" dest="${jboss.dest.file}" />
		<get src="${jboss.src.url}.MD5" dest="${jboss.dest.file}.MD5" />
		<checksum file="${jboss.dest.file}" verifyProperty="jboss.cksum.ok" />
		<if>
			<equals arg1="${jboss.cksum.ok}" arg2="true" />
			<then>
				<echo message="Downloaded jboss sucessfully" />
			</then>
			<else>
				<fail message="Failed to download jboss file sucessfully." />
			</else>
		</if>
	</target>	

	<target name="dist:gui-installer" description="Makes Gui-Installer distribution">
		<delete>
			<fileset dir="${dist.dir}">
				<include name="*.jar"/>
			</fileset>
		</delete>
		<gui-installer-prep
			product.name="${bda-blueprints-webapp.install.name}"
			product.version="${bda-blueprints-webapp.version}"
			/>
		<ant inheritAll="false" inheritRefs="false" 
			antfile="install.xml"
			target="build:installer"
			dir="${build.dir}/gui-installer"
			>
			<property name="compile.jar.dir" value="${target.dir}/izpack-4.3"/>
		</ant>
	</target>

<!-- Macros -->

	<macrodef name="gui-installer-prep">
		<attribute name="bda-lib.dir" default="${bda-lib.dir}" />
		<attribute name="gui-installer.dir" default="${gui-installer.dir}" />
		<attribute name="target.dir" default="${target.dir}"/>
		<attribute name="download.dir" default="${download.dir}" />
		<attribute name="dist.dir" default="${dist.dir}"/>
		<attribute name="izpack.binary.name" default="izpack-4.3" />
		<attribute name="izpack.binary.file" default="izpack-4.3.zip" />
		<attribute name="izpack.binary.uri" default="https://wush.net/svn/stelligentsda/course/student00/course_files/libraries/binaries" />
		<attribute name="izpack-custom.svn.url" default="https://wush.net/svn/stelligentsda/course/student00/course_files/bda-installer/src-custom-4.3"/>
		<attribute name="izpack-custom.svn.dir" default="${target.dir}/izpack-custom"/>
		<attribute name="product.name" default="petstore-installer" />
		<attribute name="product.version" default="2.1.0" />
		<attribute name="ant.binary.file" default="apache-ant-1.7.0-bin.zip"/>
		<attribute name="ant.binary.url" default="http://gforge.nci.nih.gov/svnroot/commonlibrary/trunk/techstack-2007/os-independent/apache-ant-1.7.0-bin.zip"/>
		<attribute name="ant.binary.dir" default="${target.dir}/apache-ant-1.7.0"/>
		<sequential>
			<tstamp>
				<format property="JAR_STAMP" pattern="MMddyyyyhhmmss" unit="millisecond" />
			</tstamp>

			<!-- Cleanup target area -->
			<delete dir="@{target.dir}/@{izpack.binary.name}" />

			<!-- Extract izpack -->
			<get src="@{izpack.binary.uri}/@{izpack.binary.file}" dest="@{download.dir}/@{izpack.binary.file}" usetimestamp="true"/>
			<unzip dest="@{target.dir}" src="@{download.dir}/@{izpack.binary.file}" />

			<!-- Check out izpack custom code and copy into extracted izpack dist -->
			<osfamily property="os.family"/>
			<switch value="${os.family}">
				<case value="windows">
					<echo message="Retreiving izpack custom code from svn task."/>
					<svn-co
						svn.checkout.url="@{izpack-custom.svn.url}"
						svn.checkout.dir="@{izpack-custom.svn.dir}"
						/>
				</case>
				<case value="unix">
					<echo message="Retreiving izpack custom code from svn command line."/>
					<mkdir dir="@{izpack-custom.svn.dir}"/>
					<exec osfamily="unix" executable="svn" spawn="true">
						<arg line="co @{izpack-custom.svn.url} @{izpack-custom.svn.dir}" />
					</exec>
				</case>
				<default>
					<fail message="Unexpected OS type ${os.family}"/>
				</default>
			</switch>
			<sleep seconds="10"/>

			<copy todir="@{target.dir}/@{izpack.binary.name}/src/lib" overwrite="true">
				<fileset dir="@{izpack-custom.svn.dir}" />
			</copy>

			<!-- customize izpack  -->
			<xmltask preservetype="true" failWithoutMatch="true" source="@{target.dir}/@{izpack.binary.name}/src/build.xml"
				dest="@{target.dir}/@{izpack.binary.name}/src/build.xml">
				<xmlcatalog refid="bda.xml.catalog"/>
				<insert path="//target[@name='build.listeners']" file="@{izpack-custom.svn.dir}/resources/ProgressBarInstallerListener.xml"/>
			</xmltask>
			<copy file="@{izpack-custom.svn.dir}/resources/eng.xml" todir="@{target.dir}/@{izpack.binary.name}/bin/langpacks/installer" overwrite="true" />

			<!-- Copy over library files -->
			<mkdir dir="@{target.dir}/@{izpack.binary.name}/lib"/>
			<copy todir="@{target.dir}/@{izpack.binary.name}/lib">
				<fileset dir="@{bda-lib.dir}">
					<include name="ant-1.7.0.jar"/>
					<include name="ant-launcher-1.7.0.jar"/>
					<include name="ant-nodeps-1.7.0.jar"/>
				</fileset>
			</copy>

			<!-- Compile the izpack with custom code -->
			<ant inheritall="false" antfile="@{target.dir}/@{izpack.binary.name}/src/build.xml" />

			<if>
				<os family="unix" />
				<then>
					<chmod dir="@{target.dir}/@{izpack.binary.name}/bin" perm="ugo+rx" includes="compile" />
				</then>
			</if>
			<get src="@{ant.binary.url}" dest="@{download.dir}/@{ant.binary.file}" usetimestamp="true"/>
			<unzip dest="@{target.dir}" src="@{download.dir}/@{ant.binary.file}" />
		</sequential>
	</macrodef>
	
	<macrodef name="svn-co" description="based on properties passed to macro, clean the destination directory, then check out the tag specified into the destination directory.">
		<attribute name="svn.checkout.url" />
		<attribute name="svn.checkout.dir"/>
		<attribute name="svn.checkout.user" default="anonymous"/>
		<attribute name="svn.checkout.pass" default=""/>
		<attribute name="delete" default="true"/>
		<sequential>
			<if>
				<equals arg1="@{delete}" arg2="true" />
				<then>
					<echo message="Scorching temporary checkout directory @{svn.checkout.dir}."/>
					<delete dir="@{svn.checkout.dir}" failonerror="false"/>
					<mkdir dir="@{svn.checkout.dir}"/>
				</then>
			</if>
			<echo message="Checking out @{svn.checkout.url} to @{svn.checkout.dir}."/>
			<svn username="@{svn.checkout.user}" password="@{svn.checkout.pass}">
				<!-- <checkout url="@{svn.checkout.url}" revision="HEAD" destPath="@{svn.checkout.dir}" />-->
				<checkout url="@{svn.checkout.url}"  destPath="@{svn.checkout.dir}" />
			</svn>
		</sequential>
	</macrodef>
</project>
