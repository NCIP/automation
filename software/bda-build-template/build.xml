<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: build.xml 4753 2008-05-15 18:24:16Z saksass $
$HeadURL: http://gforge.nci.nih.gov/svnroot/generic/trunk/software/build.xml $
-->
<project name="generic-build" default="build-all" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>
	<description>
		This file ...
	</description>

	<!-- Property file related properties and tasks -->
	<property name="project.name" value="generic"/>
	<property environment="env" />
	<property file="project.properties" />
	<property name="properties.file" value="${basedir}/install.properties"/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
	<property file="${properties.file}" />
	<!-- added for remote deployments since file is copied to root of install dir -->
	<basename property="properties.file.name" file="${properties.file}"/>

	<!-- Generic build time properties -->
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="resources.dir" value="${basedir}/resources" />
	<property name="reports.dir" value="${basedir}/reports" />
	<property name="temp.dir" value="${basedir}/temp" />
	<property name="global.ivy.settings.file" location="ivysettings.xml" />
	
	<!-- Properties that relate to how to call build targets from sub-projects-->
	<property name="software.base.dir" value="."/>
	<property name="generic-web.base.dir" value="${software.base.dir}/generic-web"/>
	<property name="generic-api.base.dir" value="${software.base.dir}/generic-api" />

	<property name="generic.build.file" value="build.xml"/>
	
	<property name="generic-query-grid.dir.target" value="wsrf.war" />
	<property name="resource.file.jboss-globus-lib" value="jboss-globus-libs-cagrid1_1.zip" />
	<property name="resource.file.jboss-globus-war" value="jboss-globus-wsrf-war-cagrid1_1.zip" />

	<property name="generic-core-grid.build.target" value="deployJBoss"/>
	<property name="generic-web.build.target" value="run"/>

	<property name="generic.dist.dir" value="${basedir}/target" />
	<property name="generic-core-grid.artifact.dir" value="${generic-core-grid.base.dir}/target" />
	<property name="generic-query-grid.artifact.dir" value="${generic-query-grid.base.dir}/target" />
	<property name="generic-resource.artifact.dir" value="resources/deploy" />
	<property name="generic-db-install.artifact.dir" value="${generic-services-commons.base.dir}/db" />
	<property name="generic-db-incr.artifact.dir" value="${generic-services-commons.base.dir}/db-incr" />

	<!-- Properties related to creating the distribution -->
	<property name="generic-core-grid.dist.dir" value="${generic.dist.dir}/${generic-core-grid.install.dir}"/>
	<property name="generic-query-grid.dist.dir" value="${generic.dist.dir}/${generic-query-grid.install.dir}"/>
	<property name="generic-db.dist.dir" value="${generic.dist.dir}/${generic-db.install.dir}" />
	<property name="generic-db-incr.dist.dir" value="${generic.dist.dir}/${generic-db-incr.install.dir}" />
	<property name="tools.dist.dir" value="${generic.dist.dir}/${tools.install.dir}" />

	<property name="generic-install.name" value="generic_distribution" />
	<property name="generic-upgrade.name" value="generic_upgrade" />
	<property name="generic.version" value="3.1" />
	<property name="generic-upgrade.zip.file" value="${generic-upgrade.name}${generic.version}.zip" />
	<property name="generic-install.zip.file" value="${generic-install.name}${generic.version}.zip" />
	<property name="dist.dir" value="dist"/>

	<!-- locally used paths, not needed by install -->
	<property name="tomcat.dest.file" value="${tools.dist.dir}/${tomcat.binaries.file}"/>
	<property name="jboss.dest.file" value="${tools.dist.dir}/${jboss.binaries.file}"/>
	<property name="release-notes.dist.dir" value="${generic.dist.dir}/release-notes"/>

	<!-- Default install time targets passed by deploy targets to the installer, can be overridden by being set on the command line if different target is desitred.  -->
	<property name="install.target" value="install"/>
	<property name="upgrade.target" value="upgrade"/>

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<!-- retrive ivy files then retrieve bda files and librarires -->
	<mkdir dir="lib"/>
	<ant inheritAll="false" inheritRefs="false" antfile="bda-ivy-build.xml"
		target="retrieve-bda">
		<property name="bda-utils.dir" value="${bda-utils.dir}"/>
		<property name="lib.dir" value="${lib.dir}"/>
	</ant>

	<!-- Task definitions -->
	<taskdef resource="simiantask.properties" classpathref="bda-utils.classpath" />
	<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml">
		<classpath>
			<pathelement location="${bda-utils.dir}/antunit-1.0.jar" />
		</classpath>
	</taskdef>
	<taskdef name="xmlconfig" classname="com.xmlconfig.anttask.XmlConfig" classpathref="bda-utils.classpath" />
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="bda-utils.classpath"/>
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
		<classpath>
			<pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<!-- Includes- include BDA marcos -->
	<import file="${bda-utils.dir}/bda-build-utils-0.1.xml" />

	<!-- Start logging --> 
	<mkdir dir="${log.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${log.dir}/install-${install.time}.log" action="start"/>

	<!-- Targets -->
	<target name="diagnostics" description="diagnostics">
		<echoproperties/>
		<diagnostics/>
	</target>

	<target name="clean">
		<delete dir="${dist.dir}"/>
		<delete dir="${temp.dir}"/>
		<delete dir="${generic-core-grid.artifact.dir}"/>
		<delete dir="${generic-query-grid.artifact.dir}"/>
		<delete dir="${generic.dist.dir}"/>
	</target>

	<target name="init" >
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${generic-core-grid.artifact.dir}"/>
		<mkdir dir="${generic-query-grid.artifact.dir}"/>
		<mkdir dir="${generic-core-grid.dist.dir}"/>
		<mkdir dir="${generic-query-grid.dist.dir}"/>
		<mkdir dir="${generic-mirc.dist.dir}"/>
		<mkdir dir="${generic-web.dist.dir}"/>
		<mkdir dir="${generic-resource.dist.dir}"/>
		<mkdir dir="${generic-db.dist.dir}"/>
		<mkdir dir="${generic-db-incr.dist.dir}"/>
		<mkdir dir="${tools.dist.dir}"/>
		<mkdir dir="${release-notes.dist.dir}"/>
		
		<!-- start from scratch to make sure no stale
		     lib definitinos, esp during dev -->
		<available file="${jboss.dest.file}" property="jboss.tools.exists"/>
		<available file="${tomcat.dest.file}" property="tomcat.tools.exists"/>
	</target>

	<target name="ivy:clean" description="Clean">
		<ivy:settings file="${global.ivy.settings.file}" />
		<ivy:cleancache />
		<ant inheritAll="false" inheritRefs="false" antfile="bda-ivy-build.xml"
			target="ivy-cleancache">
			<property name="bda-utils.dir" value="${bda-utils.dir}"/>
			<property name="lib.dir" value="${lib.dir}"/>
		</ant>
		
	</target>

	<!-- Wrapper build target, call appropriate builds for sub-projects -->
	<target name="build-all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions"
		depends="
		clean,
		init,
		build:generic-web,
		build:generic-core-grid,
		static-analysis
	        "/>

	<!-- Build generic-query-grid sub-project produces project level artifact -->
	<target name="build:generic-query-grid" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${generic.build.file}"
			target="${generic-query-grid.build.target}"
			dir="${generic-query-grid.base.dir}" >
			<property name="project.name" value="${project.name}"/>
			<property name="jboss.dir" value="target"/>
		</ant>
		<zip update="false" destfile="${generic-query-grid.dist.dir}/${generic-query-grid.artifact.file}">
			<zipfileset dir="${generic-query-grid.artifact.dir}/server/default/deploy/wsrf.war/"/>
		</zip>
		<delete dir="${generic-query-grid.artifact.dir}/server"/>
	</target>


	<!-- Produces all distributions: installer, upgrader and source -->
	<target name="dist" description="Makes all distributions: installer, upgrader and source"
		depends="
		build-all,
		dist:installer,
		dist:upgrader,
		dist:src"
	      	/>

	<target name="dist:src">
		<!-- Add tasks here to zip up src into a distribution, may require some additoinal properties for distribution name" -->
	</target>

	<!-- Wrapper target that downloads all required binaries from Common Tools Repository -->
	<target name="dist:tools:retrieve" description="Downloads binary support tools form common tools repository"
		depends="
		init,
		dist:tools:retrieve:tomcat,
		dist:tools:retrieve:jboss,
		dist:tools:retrieve:release-notes" 
		/>

	<!-- Downloads the release notes for the project, not specifically a tool from the tools module, but downloaded simliar to other tools so added here -->
	<target name="dist:tools:retrieve:release-notes">
		<get src="${release-notes.doc.src.url}"
			dest="${release-notes.dist.dir}/${release-notes.doc.file}"/>
		<get src="${release-notes.txt.src.url}"
			dest="${release-notes.dist.dir}/${release-notes.txt.file}"/>
	</target>

	<!-- Downloads tomcat from tools repository and compares checksum, based on properties set in project.properties -->
	<target name="dist:tools:retrieve:tomcat" unless="tomcat.tools.exists">
		<get src="${tomcat.src.url}"
			dest="${tomcat.dest.file}"/>
		<get src="${tomcat.src.url}.MD5"
			dest="${tomcat.dest.file}.MD5"/>
		<checksum file="${tomcat.dest.file}" verifyProperty="tomcat.cksum.ok"/>
		<if>
			<equals arg1="${tomcat.cksum.ok}" arg2="true"/>
			<then>
				<echo message="Downloaded tomcat sucessfully"/>
			</then>
			<else>
				<fail message="Failed to download tomcat file sucessfully."/>
			</else>
		</if>
	</target>

	<!-- Downloads jboss from tools repository and compares checksum, based on properties set in project.properties -->
	<target name="dist:tools:retrieve:jboss" unless="jboss.tools.exists">
		<get src="${jboss.src.url}"
			dest="${jboss.dest.file}"/>
		<get src="${jboss.src.url}.MD5"
			dest="${jboss.dest.file}.MD5"/>
		<checksum file="${jboss.dest.file}" verifyProperty="jboss.cksum.ok"/>
		<if>
			<equals arg1="${jboss.cksum.ok}" arg2="true"/>
			<then>
				<echo message="Downloaded jboss sucessfully"/>
			</then>
			<else>
				<fail message="Failed to download jboss file sucessfully."/>
			</else>
		</if>
	</target>

	<!-- Copies install time resources into distribution tree -->
	<target name="dist:installer:prep" depends="dist:tools:retrieve">
		<!-- added for incremental database build -->
		<database-build-filelist 
			sqlfiles.list.file="${generic.dist.dir}/${db-incr.mysql.list.file}"
			build.properties.file="${generic.dist.dir}/${db-incr.mysql.conf.file}"
			incr.sql.dir="${generic-db-incr.artifact.dir}/mysql" />
		<database-build-filelist 
			sqlfiles.list.file="${generic.dist.dir}/${db-incr.oracle.list.file}"
			build.properties.file="${generic.dist.dir}/${db-incr.oracle.conf.file}"
			incr.sql.dir="${generic-db-incr.artifact.dir}/oracle" />
		<!-- added for incremental database build -->
		<copy tofile="${generic.dist.dir}/db-integrate.xml" file="${bda-utils.dir}/resource/template-db-integrate.xml"/>
		<!-- Copy install related xml and properties files -->
		<copy todir="${generic.dist.dir}" overwrite="true">
			<fileset dir="${basedir}">
				<include name="install.xml" />
				<include name="install.properties" />
				<include name="*properties.template" />
				<include name="project.properties" />
			</fileset>
		</copy> 
		<!-- Set default target on install xml to install -->
		<replaceregexp file="${generic.dist.dir}/install.xml" byline="true"
			match="(.project.*default=.)\w+(.\s+.*)"
			replace="\1upgrade\2"/>
		<!-- Rename install.xml to build.xml so manual installs will not need to include the -f optoin on ant, simplifying the install proces. -->
		<move file="${generic.dist.dir}/install.xml" tofile="${generic.dist.dir}/build.xml"/>

		<!-- Copy over BDA macrodefs and librarires -->
		<copy todir="${generic.dist.dir}/bda-utils" overwrite="true">
			<fileset dir="${bda-utils.dir}">
				<include name="**/*"/>
			</fileset>
		</copy>

		<!-- Copy over the oracle and mysql full database build scripts -->
		<copy todir="${generic-db.dist.dir}" overwrite="true">
			<fileset dir="${generic-db-install.artifact.dir}">
				<include name="**/*.sql"/>
			</fileset>
		</copy>

		<!-- Copy over the oracle and mysql incremental database build scripts -->
		<copy todir="${generic-db-incr.dist.dir}" overwrite="true">
			<fileset dir="${generic-db-incr.artifact.dir}">
				<include name="**/*.sql"/>
			</fileset>
		</copy>
		<!-- copy over install time resource files, like xml blocks inserted into jboss configuration files -->
		<copy todir="${generic-resource.dist.dir}" overwrite="true">
			<fileset dir="${generic-resource.artifact.dir}">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<!-- Creates the installer distribution used by automated or manual remote installations -->
	<target name="dist:installer" depends="dist:installer:prep">
		<delete file="${dist.dir}/${generic-install.zip.file}"/>
		<zip destfile="${dist.dir}/${generic-install.zip.file}" basedir="${generic.dist.dir}"/>
	</target>

	<!-- Copies install time resources into distribution tree -->
	<target name="dist:upgrader:prep">
		<!-- Cleans up files copied by dist:*:prep targets to ensure only required files are present becaue this target is run after dist:installer:prep -->
		<delete dir="${generic.dist.dir}/bda-utils"/>
		<delete dir="${generic-db.dist.dir}"/>
		<delete dir="${generic-resource.dist.dir}"/>
		<delete dir="${tools.dist.dir}"/>
		<delete>
			<fileset dir="${generic.dist.dir}">
				<include name="*.xml" />
				<include name="*properties*" />
			</fileset>
		</delete>


		<!-- added for incremental database build -->
		<copy tofile="${generic.dist.dir}/db-integrate.xml" file="${bda-utils.dir}/resource/template-db-integrate.xml"/>
		<!-- added for incremental database build -->
		<database-build-filelist 
			sqlfiles.list.file="${generic.dist.dir}/${db-incr.mysql.list.file}"
			build.properties.file="${generic.dist.dir}/${db-incr.mysql.conf.file}"
			incr.sql.dir="${generic-db-incr.artifact.dir}/mysql" />
		<database-build-filelist 
			sqlfiles.list.file="${generic.dist.dir}/${db-incr.oracle.list.file}"
			build.properties.file="${generic.dist.dir}/${db-incr.oracle.conf.file}"
			incr.sql.dir="${generic-db-incr.artifact.dir}/oracle" />
		<!-- Copy install related xml and properties files -->
		<copy todir="${generic.dist.dir}" overwrite="true">
			<fileset dir="${basedir}">
				<include name="install.xml" />
				<include name="upgrade.properties" />
				<include name="*properties.template" />
				<include name="project.properties" />
			</fileset>
		</copy> 
		<!-- Change default target of install.xml to upgrade -->
		<replaceregexp file="${generic.dist.dir}/install.xml" byline="true"
			match="(.project.*default=.)\w+(.\s+.*)"
			replace="\1install\2"/>
		<!-- Rename install.xml to build.xml to simply install but not having to provide -f option to ant command line -->
		<move file="${generic.dist.dir}/install.xml" tofile="${generic.dist.dir}/build.xml"/>

		<!-- Copy BDA macrodefs and library files -->
		<copy todir="${generic.dist.dir}/bda-utils" overwrite="true">
			<fileset dir="${bda-utils.dir}">
				<exclude name="**/*.zip"/>
			</fileset>
		</copy>

		<!-- Copy only incremental database files -->
		<copy todir="${generic-db-incr.dist.dir}" overwrite="true">
			<fileset dir="${generic-db-incr.artifact.dir}">
				<include name="**/*.sql"/>
			</fileset>
		</copy>

		<!-- Inlcude install time resources -->
		<copy todir="${generic-resource.dist.dir}" overwrite="true">
			<fileset dir="${generic-resource.artifact.dir}">
				<include name="jboss-globus*"/>
			</fileset>
		</copy>
	</target>

	<!-- Creates upgrader distribution -->
	<target name="dist:upgrader" depends="dist:upgrader:prep">
		<delete file="${dist.dir}/${generic-upgrade.zip.file}"/>
		<zip destfile="${dist.dir}/${generic-upgrade.zip.file}" basedir="${generic.dist.dir}"/>

	</target>


	<!-- Installs the application locally. Requires a local instance of mysql. Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).  Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. This target will use differnt properties based on linux (linux-install.properties) or windows (windows-install.properties) installs. It only supports using those properties files for now, so if you want to change install time properites edit these files. -->
	<target name="deploy:local:install" depends="dist:installer:prep" description="Installs the application and required binaries on the local machine, used for developer desktops and ci environments" >
		<!-- deploy:local fails about basedirectory in real strange place macrodefs:319, this should fix it -->
		<mkdir dir="${generic.dist.dir}/lib"/>
		<copy todir="${generic.dist.dir}">
			<fileset dir="${basedir}">
				<include name="*.properties"/>
			</fileset>
		</copy>
		<exec os="Linux, Max OS X" executable="ant" dir="${generic.dist.dir}">
			<!-- use alternate properties file since default has replace values -->
			<arg value="-Dproperties.file=linux-install.properties"/>
			<!-- force reinstall of database and jboss without prompting -->
			<arg value="-Dforce.reinstall=true"/>
			<arg value="${install.target}"/>
		</exec> 
		<exec os="Windows XP, Windows 2000, Windows 2003"
			executable="ant.bat" dir="${generic.dist.dir}">
			<!-- use alternate properties file since default has replace values -->
			<arg value="-Dproperties.file=windows-install.properties"/>
			<!-- force reinstall of database and jboss without prompting -->
			<arg value="-Dforce.reinstall=true"/>
			<arg value="${install.target}"/>
		</exec> 

	</target>

	<!-- Upgrades the application locally. Requires a local instance of mysql. Will use the target from install.xml specified in ${upgrade.target} (defaults to upgrade unless passed in on command line).  Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. This target will use differnt properties based on linux (linux-install.properties) or windows (windows-install.properties) upgrades. It only supports using those properties files for now, so if you want to change install time properites edit these files. -->
	<target name="deploy:local:upgrade" depends="dist:upgrader:prep" description="Upgrades the application on the local machine, used for developer desktops and ci environments" >
		<!-- deploy:local fails about basedirectory in real strange place macrodefs:319, this should fix it -->
		<mkdir dir="${generic.dist.dir}/lib"/>
		<copy todir="${generic.dist.dir}">
			<fileset dir="${basedir}">
				<include name="*.properties"/>
			</fileset>
		</copy>
		<if>
			<isset property="ci.server"/>
			<then>
				<replaceregexp file="${generic.dist.dir}/linux-upgrade.properties" byline="true"
					match="exclude.start.servers=true"
					replace=""/>
				<replaceregexp file="${generic.dist.dir}/windows-upgrade.properties" byline="true"
					match="exclude.start.servers=true"
					replace=""/>
			</then>
		</if>
		<exec os="Linux, Max OS X" executable="ant" dir="${generic.dist.dir}">
			<!-- use alternate properties file since default has replace values -->
			<arg value="-Dproperties.file=linux-upgrade.properties"/>
			<!-- force reinstall of database and jboss without prompting -->
			<arg value="-Dforce.reinstall=true"/>
			<arg value="-Dlocal.install=true"/>
			<arg value="${upgrade.target}"/>
		</exec> 
		<exec os="Windows XP, Windows 2000, Windows 2003"
			executable="ant.bat" dir="${generic.dist.dir}">
			<!-- use alternate properties file since default has replace values -->
			<arg value="-Dproperties.file=windows-upgrade.properties"/>
			<!-- force reinstall of database and jboss without prompting -->
			<arg value="-Dforce.reinstall=true"/>
			<arg value="-Dlocal.install=true"/>
			<arg value="${upgrade.target}"/>
		</exec> 
		<echo message="The server is not started as part of local deployment.  You will need to run $JBOSS_HOME/bin/run.bat (or run.sh if you are linux)."/>
	</target>

	<!-- Cleans remote deployment area and ensure required directorys are created -->
	<target name="deploy:remote:prep">
		<property name="ssh.prop.list" value="ssh.server.username,ssh.server.hostname,ssh.port,ssh.key.file,ssh.dir.temp"/>
		<properties-exist properties.list="${ssh.prop.list}"/>
		<!-- add call to bad directory checker once it is a separate macro on macrodefs.xml -->
		<remote-ssh remotesshcommand="rm -rf ${ssh.dir.temp};mkdir -p ${ssh.dir.temp}" />
		<!-- work around for issue where basedir is required but is not currently used -->
		<remote-ssh remotesshcommand="mkdir -p ${ssh.dir.temp}/lib" />
	</target>

	<!-- Copies the distrbution to the remote system -->
	<target name="deploy:remote:install:copy">
		<remote-scp remoteScpFileToCopy="${dist.dir}/${generic-install.zip.file}" remoteScpToDir="${ssh.server.username}@${ssh.server.hostname}:${ssh.dir.temp}" />
		<remote-scp remoteScpFileToCopy="${properties.file}" remoteScpToDir="${ssh.server.username}@${ssh.server.hostname}:${ssh.dir.temp}" />
	</target>

	<!-- Extracts the distribution on the remote system -->
	<target name="deploy:remote:install:extract">
		<remote-ssh remotesshcommand="cd ${ssh.dir.temp}; unzip -q ${generic-install.zip.file}" />
	</target>

	<!-- Install the application remotely. Depends on above targets to copy and extract distribution. Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).  Calls ant from sshexec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. Requires specifying -Dproperties.file=@file@ on the command line to point installer to correct enviornment to install into -->
	<target name="deploy:remote:install"
		depends="
		build-all,
		dist:installer,
		deploy:remote:prep,
		deploy:remote:install:copy,
		deploy:remote:install:extract
		">
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${install.target}" />
	</target>

	<!-- Copies distribution to remote system -->
	<target name="deploy:remote:upgrade:copy">
		<remote-scp remoteScpFileToCopy="${dist.dir}/${generic-upgrade.zip.file}" remoteScpToDir="${ssh.server.username}@${ssh.server.hostname}:${ssh.dir.temp}" />
		<remote-scp remoteScpFileToCopy="${properties.file}" remoteScpToDir="${ssh.server.username}@${ssh.server.hostname}:${ssh.dir.temp}" />
	</target>
	<!-- Extracts distribution on remote system -->
	<target name="deploy:remote:upgrade:extract">
		<remote-ssh remotesshcommand="cd ${ssh.dir.temp}; unzip -q ${generic-upgrade.zip.file}" />
	</target>

	<!-- Upgrades the application remotely. Depends on above targets to copy and extract distribution. Will use the target from install.xml specified in ${upgrade.target} (defaults to upgrade unless passed in on command line).  Calls ant from sshexec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. Requires specifying -Dproperties.file=@file@ on the command line to point upgrader to correct enviornment to upgrade -->
	<target name="deploy:remote:upgrade"
		depends="
		build-all,
		dist:upgrader,
		deploy:remote:prep,
		deploy:remote:upgrade:copy,
		deploy:remote:upgrade:extract
		">
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${upgrade.target}" />
	</target>

	<target name="usage" description="Explains how to use this build script">
		<echo message="To run a remote upgrade type: ant deploy:remote:upgrade -Dproperties.file=[path to environment proeprty file]" />
	</target>

	<!-- Scorches checkout area and then checks out the generic project from svn. Serval propeties influence what is checked out.  Each of the properites have defaults, which will check out trunk.  This target uses the svn-co macro from bda -->
	<target name="svn:co">
		<property name="svn.project.base.url" value="http://gforge.nci.nih.gov/svnroot/generic"/>
		<property name="svn.project.name" value="generic"/>
		<property name="svn.tag" value="trunk"/>
		<property name="svn.co.base.dir" value="${user.home}/tmp"/>

		<svn-co
			svn.project.base.url="${svn.project.base.url}"
			svn.project.name="${svn.project.name}"
			svn.tag="${svn.tag}"
			svn.co.base.dir="${svn.co.base.dir}"
			/>
	</target>
	<target name="report:grand" description="Generates grand graphs for build.xml files">
		<report-grand
			build.file.location="build.xml"
			output.file.dir="."
			output.file.name="generic-root-build.xml"
			/>
	</target>
	<!-- Static Analysis  & testing targets -->
	<target name="static-analysis:simian" description="Performs code duplication analysis">
		<simian>
			<fileset dir="${basedir}/generic-services-commons/src" includes="**/*.java"/>
			<fileset dir="${basedir}/generic-services-grid/src" includes="**/*.java"/>
			<fileset dir="${basedir}/generic-web/src" includes="**/*.java"/>
			<formatter type="xml" toFile="${reports.dir}/simian-log.xml"/>
		</simian>
		<xslt in="${reports.dir}/simian-log.xml" out="${reports.dir}/simian-log.html" style="${resources.dir}/simian.xsl" />
	</target>
	<!-- mostly taken from ncia unit testing script -->
	<target name="static-analysis:init">
		<property name="src.test.dir" value="${basedir}/test" />
		<property name="test.classes.dir" value="${basedir}/test-classes" />
		<property name="instrumented.dir" value="${basedir}/instrumented" />
		<property name="cobertura.ser.file" value="${instrumented.dir}/cobertura.ser" />
		<property name="reports.dir" value="${common.dir}reports"/>
		<property name="junit.reports.dir" value="${reports.dir}/junit"/>
		<property name="cobertura.reports.dir" value="${reports.dir}/cobertura"/>
		<fail unless="classes.to.test.dir" message="must define classes.to.test.dir for unittesting.xml to work.  it's typically same as classes.dir in host build file"/>
		<fail unless="common.dir" message="must define common.dir for unittesting.xml to work"/>
		<path id="ivy.classpath">
			<fileset dir="${common.dir}/lib">
				<include name="*.jar" />
			</fileset>
		</path>
		<fail unless="lib.dir" message="must define lib.dir for unittesting.xml to work"/>
		<path id="project.test.classpath">
			<fileset dir="${lib.dir}/test">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="project.test.pmd.classpath">
			<fileset dir="${lib.dir}/test-pmd">
				<include name="*.jar" />
			</fileset>
		</path>
		<echo>ci: ${ci.server}</echo>

	</target>
	<target name="ivy-test" depends="ivy-settings" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test" />
	</target>
	<target name="ivy-test-pmd" if="ci.server" depends="ivy-settings" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-pmd" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-pmd" />
	</target>
	<target name="post-clean-test" if="ci.server">
		<delete dir="${instrumented.dir}" quiet="false" />
		<delete dir="${test.classes.dir}" quiet="false" />
	</target>
	<target name="init-test" if="ci.server">
		<mkdir dir="${test.classes.dir}" />
		<mkdir dir="${instrumented.dir}" />
		<mkdir dir="${junit.reports.dir}" />
		<mkdir dir="${reports.dir}/javancss" />
		<mkdir dir="${reports.dir}/checkstyle" />
		<mkdir dir="${reports.dir}/pmd" />
	</target>
	<target name="compile-test" if="ci.server" depends="-pre-clean, -init, ivy-test" description="Compiles the Java source code">
		<javac srcdir="${src.test.dir}" destdir="${test.classes.dir}" debug="true">
			<classpath refid="project.test.classpath" />
			<classpath path="${classes.to.test.dir}" />
		</javac>
	</target>
	<target name="test" if="ci.server" depends="compile-test, -cobertura-instrument" description="Runs all unit tests">
		<junit printsummary="on" failureproperty="junit.failure" fork="true" forkmode="once" maxmemory="256m">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.ser.file}" />
			<classpath location="${instrumented.dir}" />
			<classpath location="${classes.to.test.dir}" />
			<classpath location="${test.classes.dir}" />
			<classpath refid="project.test.classpath" />
			<formatter type="xml" />
			<!-- perhaps break down by project name if there are collisions? -->
			<batchtest todir="${junit.reports.dir}">
				<fileset dir="${src.test.dir}">
					<!--
					<include name="**/*Test.java" />
					<include name="**/Test*.java" />
					<exclude name="**/Abstract*Test.java" />
					<exclude name="**/Test*Impl.java" />
					-->
					<exclude name="**/*.java" />
				</fileset>
			</batchtest>
		</junit>
		<!--
		<junitreport todir="${junit.reports.dir}">
			<fileset dir="${junit.reports.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${junit.reports.dir}"/>
		</junitreport>          
		-->
		<!--
		<fail if="junit.failure" message="There were JUnit failures" />
		-->
	</target>

	<target name="static-analysis:java-ncss" if="ci.server">
		<taskdef name="javancss" classpathref="project.test.classpath" classname="javancss.JavancssAntTask" />
		<javancss srcdir="${src.java.dir}"
			includes="**/*.java"
			generatereport="true"
			outputfile="${reports.dir}/javancss/javancss_metrics_${ant.project.name}.xml"
			ccnPerFuncMax="10"
			format="xml"/>
		<xslt taskname="javancss"
			in="${reports.dir}/javancss/javancss_metrics_${ant.project.name}.xml"
			out="${reports.dir}/javancss/javancss_report_${ant.project.name}.html"
			style="../common/javancss/javancss2methodhtml.xsl"/>
	</target>
	<target name="static-analysis:pmd" if="ci.server" depends="ivy-test-pmd">
		<taskdef name="pmd" 
			classname="net.sourceforge.pmd.ant.PMDTask"
			classpathref="project.test.pmd.classpath"/>
		<pmd shortFilenames="true" 
			rulesetfiles="${common.dir}/common/pmd/pmd-ruleset-basic.xml">
			<formatter type="xml"
				toFile="${reports.dir}/pmd/pmd_out_${ant.project.name}.xml" />
			<fileset dir="${src.java.dir}">
				<include name="**/*.java"/>
			</fileset>
		</pmd>
		<xslt taskname="pmd"
			in="${reports.dir}/pmd/pmd_out_${ant.project.name}.xml"
			out="${reports.dir}/pmd/pmd_report_${ant.project.name}.html"
			style="../common/pmd/pmd-report.xslt"/>
	</target>
	<target name="static-analysis:checkstyle" if="ci.server">
		<taskdef resource="checkstyletask.properties"
			uri="antlib:com.puppycrawl.tools.checkstyle"
			classpathref="project.test.classpath"/>
		<cs:checkstyle config="../common/checkstyle/checkstyle_minimal.xml"
			failOnViolation="false">
			<formatter type="xml" 
				tofile="${reports.dir}/checkstyle/checkstyle_${ant.project.name}.xml"/>
			<fileset dir="${src.java.dir}">
				<include name="**/*.java"/>
			</fileset>
		</cs:checkstyle>
		<xslt taskname="checkstyle"
			in="${reports.dir}/checkstyle/checkstyle_${ant.project.name}.xml"
			out="${reports.dir}/checkstyle/checkstyle_report_${ant.project.name}.html"
			style="../common/checkstyle/checkstyle-simple.xsl"/>
	</target>

	<target name="static-analysis:cobertura:instrument" if="ci.server" description="Instruments Cobertura test classes">
		<!-- wait to do this until ivy has populated the directory -->
		<taskdef classpathref="project.test.classpath" resource="tasks.properties" />
		<cobertura-instrument todir="${instrumented.dir}" datafile="${cobertura.ser.file}">
			<fileset dir="${classes.to.test.dir}">
				<include name="gov/nih/nci/ncia/**" />
			</fileset>
		</cobertura-instrument>
	</target>
	<target name="static-analysis:cobertura:report" if="ci.server" depends="-cobertura-instrument" description="Creates Cobertura report">
		<cobertura-report datafile="${cobertura.ser.file}" format="html" destdir="${cobertura.reports.dir}/${ant.project.name}">
			<fileset dir="${src.java.dir}">
				<include name="gov/nih/nci/ncia/**" />
			</fileset>
		</cobertura-report>
	</target>
	<target name="static-analysis:cobertura:check" if="ci.server" depends="-cobertura-report">
		<cobertura-check failureproperty="cobertura.failure" datafile="${cobertura.ser.file}" haltonfailure="false" linerate="0" packagebranchrate="0" packagelinerate="0" totalbranchrate="25" totallinerate="30" />
	</target>
	<!-- Static Analysis wrapper, calls all statict analysis targets -->
	<target name="static-analysis" description="Performs static analysis"
		depends="
		static-analysis:simian,
		static-analysys:java-ncss
		static-analysys:pmd,
		static-analysys:checkstyle,
		static-analysys:cobertura:instrument,
		static-analysys:cobertura:report,
		static-analysys:cobertura:check
		"/>
</project>
