<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: install.xml 4757 2008-05-15 20:43:31Z zengje $
$HeadURL: http://gforge.nci.nih.gov/svnroot/ncia/trunk/software/install.xml $
-->
<project name="ncia-installer" default="upgrade" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>
	<description>
		This ant build file is used to install the NCIA application.  It includes two main paths, install and upgrade.  All targets will begin with install: or upgrade:.  The default install target install will drop and create the ncia database and user, install JBOSS, configure JBOSS, deploy the application to JBOSS, configure the application, install Tomcat binaries for ncia-core-grid, configure Tomcat, install the ncia-core-crid application to Tomcat, configure the application and lastly install and configure a Tomcat instance for MIRC.  The upgrade target will upgrade the database and deploy and configure the applications to both JBOSS and the ncia-core-grid instance of Tomcat.  The upgrade target uses many of the install targets.  There install and upgrade paths include sub-paths for individual containers, JBOSS, database, ncia-core-grid Tomcat.  The BDA Macros are in use in the project that means that the user will be prompted to contiue if the application or database already exist, this can be overridden by the property force.reinstall.  Also any container can be skipped by setting the exlude.@container@ (exlcude.jboss) property.
	</description>

	<!-- Properties file related properties and tasks -->
	<property environment="env" />
	<property file="project.properties"/>
	<property name="properties.file" value="${basedir}/install.properties"/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
	<property file="${properties.file}" />
	
	<!-- Generic properties -->
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="temp.dir" value="${basedir}/temp" />


	<!-- Install Time properties -->
	<!-- Source and target directories -->
	<property name="database.dir.src" value="${basedir}/${ncia-db.install.dir}/${database.type}" />
	<property name="database-incr.dir.src" value="${basedir}/${ncia-db-incr.install.dir}/${database.type}" />
	<property name="database.dir.target" value="${temp.dir}/${ncia-db.install.dir}" />
	<property name="database-incr.dir.target" value="${temp.dir}/${ncia-db-incr.install.dir}" />
	<property name="resource.dir.src" value="${basedir}/${ncia-resource.install.dir}" />
	<property name="resource.dir.target" value="${temp.dir}/${ncia-resource.install.dir}" />
	<property name="resource.dir.temp" value="${temp.dir}/temp" />
	<property name="ncia-query-grid.dir.src" value="${basedir}/${ncia-query-grid.install.dir}" />
	<property name="ncia-query-grid.dir.target" value="wsrf.war" />
	<property name="ncia-core-grid.dir.src" value="${basedir}/${ncia-core-grid.install.dir}" />
	<property name="ncia-core-grid.dir.target" value="wsrf.war" />
	<property name="ncia-mirc.dir.src" value="${basedir}/${ncia-mirc.install.dir}" />
	<property name="ncia-ear.dir.src" value="${basedir}/${ncia-web.install.dir}"/>
	<property name="bda-utils.dir.src" value="${bda-utils.dir}" />
	<property name="tools.dir.src" value="${basedir}/${tools.install.dir}" />

	<!-- File name properties -->
	<property name="ncia-api.file.src" value="ncia-${database.type}.war" />
	<property name="ncia-api.file.target" value="ncia-api.war" />
	<property name="resource.file.ds-xml" value="ncia-ds.xml" />
	<property name="resource.file.jboss-globus-lib" value="jboss-globus-libs-cagrid1_1.zip" />
	<property name="resource.file.jboss-globus-war" value="jboss-globus-wsrf-war-cagrid1_1.zip" />

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Task definitions -->
	<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml">
		<classpath>
			<pathelement location="${bda-utils.dir}/antunit-1.0.jar" />
		</classpath>
	</taskdef>
	<taskdef name="xmlconfig" classname="com.xmlconfig.anttask.XmlConfig" classpathref="bda-utils.classpath" />
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
		<classpath>
			<pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
			<pathelement location="${bda-utils.dir}/bcel-5.1.jar"/>
			<pathelement location="${bda-utils.dir}/commons-httpclient-3.0.1.jar"/>
			<pathelement location="${bda-utils.dir}/commons-logging-1.0.4.jar"/>
			<pathelement location="${bda-utils.dir}/ivy-1.3.1.jar"/>
		</classpath>
	</taskdef>

	<!-- Conditionals -->
	<available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
	<!-- NCIA can use either Oracle or MySQL as it's database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
	<if>
		<equals arg1="${database.type}" arg2="oracle"/>
		<then>
			<property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
			<property name="is.oracle" value="true"/>
			<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
			<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
			<property name="db-incr.list.file" value="${db-incr.oracle.list.file}"/>
			<property name="db-incr.conf.file" value="${db-incr.oracle.conf.file}"/>
		</then>
		<else>
			<if>
				<equals arg1="${database.type}" arg2="mysql"/>
				<then>
					<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
					<property name="is.mysql" value="true"/>
					<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.5.jar"/>
					<property name="database.driver" value="com.mysql.jdbc.Driver"/>
					<property name="db-incr.list.file" value="${db-incr.mysql.list.file}"/>
					<property name="db-incr.conf.file" value="${db-incr.mysql.conf.file}"/>
				</then>
				<else>
					<fail message="Invalid database type ${database.type}"/>
				</else>
			</if>
		</else>
	</if>
	<!-- figure out whether to use install-properties.template or upgrade-proprties.template -->
	<propertyregex property="properties.file.type"
		input="${properties.file}"
		regexp=".*(install|upgrade).*"
		select="\1"
		/>
	<echo message="Properties file type = ${properties.file.type}"/>
	<if>
		<equals arg1="${properties.file.type}" arg2="install" />
		<then>
			<property name="properties.template.file" value="install-properties.template" />
		</then>
		<elseif>
			<equals arg1="${properties.file.type}" arg2="upgrade" />
			<then>
				<property name="properties.template.file" value="upgrade-properties.template" />
			</then>
		</elseif>
	</if>
	<!-- Includes-->
	<import file="${bda-utils.dir}/bda-build-utils-0.1.xml" />
	<!-- Generated and used by database incremental build process -->
	<import file="db-integrate.xml" />

	<!-- Read db configs from existing ds.xml if it exists -->
	<available file="${jboss.home}/server/${jboss.server.name}/deploy/${resource.file.ds-xml}" property="ds.exists"/>
	<if>
		<isset property="ds.exists"/>
		<then>
			<jboss-read-dbconfig
				jboss.ds-xml.file="${resource.file.ds-xml}"
				/>
		</then>
		<else>
			<echo message="Warning- could not find ${jboss.home}/server/${jboss.server.name}/deploy/${resource.file.ds-xml}"/>
		</else>
	</if>

	<!-- Used to ensure that properties in the properties file that have variables in them are expanded (application.base.path=${user.home}/apps/ncia).  As properties like this are added they should be added to this list. -->
	<filterset id="filterset.pre">
		<filter token="application.base.path" value="${application.base.path}"/>
		<filter token="application.url" value="${application.url}"/>
		<filter token="database.url" value="${database.url}"/>
		<filter token="database.system.url" value="${database.system.url}"/>
		<filter token="jboss.home" value="${jboss.home}"/>
		<filter token="tomcat.ncia-core-grid.base.path" value="${tomcat.ncia-core-grid.base.path}"/>
		<filter token="tomcat.ncia-core-grid.home" value="${tomcat.ncia-core-grid.home}"/>
		<filter token="tomcat.mirc.base.path" value="${tomcat.mirc.base.path}"/>
		<filter token="tomcat.mirc.home" value="${tomcat.mirc.home}"/>
		<!-- added internal properties that may be used in a filtered copy -->
		<filter token="database.driver" value="${database.driver}"/>
		<filter token="database.dialect" value="${database.dialect}"/>
	</filterset>
	

	<!-- Start logging --> 
	<mkdir dir="${log.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${log.dir}/install-${install.time}.log" action="start"/>


	<!-- Installer section -->
	<target name="diag">
		<echoproperties/>
	</target>

	<!-- Clean up destination directory -->
	<target name="install:clean" description="Removes all files from the local filesystem">
		<sleep seconds="5" />
		<delete dir="${application.base.path}" quiet="false" />
	</target>

	<!-- Does directory management and copy some files with filtering to ensure token expansion -->
	<target name="install:init" description="Does directory management to initialize install">
		<delete dir="${temp.dir}" quiet="false" />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${database.dir.target}"/>
		<mkdir dir="${database-incr.dir.target}"/>
		<mkdir dir="${resource.dir.temp}"/>
		<!-- Copy files to ensure values containing variables are expanded, such properties are stored in filterset.pre -->
		<copy todir="${resource.dir.temp}" filtering="true">
			<fileset dir="${resource.dir.src}">
				<include name="**/*.xml"/>
			</fileset>
			<filterset refid="filterset.pre"/>
		</copy> 
		<copy todir="${resource.dir.target}" filtering="true">
			<fileset dir="${resource.dir.temp}">
				<include name="**/*.xml"/>
			</fileset>
			<filterset>
				<filtersfile file="${properties.file}"/>
			</filterset>
		</copy> 
	</target>

	<!-- Wrapper install database target, depends on both MySQL and Oracle sub-targets, ifs should ensure only one is run.  Target path can be skipped by exlude.database also calls upgrade:database -->
	<target name="install:database" description="Re-creates database and users from baseline and applys incremental database changes." unless="exclude.database"
		depends="
		install:clean,
		install:init,
		-install:database:oracle,
		-install:database:mysql
		">
		<antcall target="upgrade:database" inheritAll="false"/>
	</target>

	<target name="-install:database:oracle" if="is.oracle" unless="exclude.database">

		<copy todir="${database.dir.target}">
			<filterset>
				<filtersfile file="${properties.file}" />
			</filterset>
			<filterset refid="filterset.pre"/>
			<fileset dir="${database.dir.src}" includes="**/*.sql" />
		</copy>

		<run-sql-script database.url="${database.url}"
		                database.user="${database.user}" 
		                database.password="${database.password}" 
		                sql.delimiter="/" 
		                sql.delimitertype="row"
		                sql.file="${database.dir.target}/nciaTblsOnly_a.sql"
		                onerror="continue"/>

		<run-sql-script database.url="${database.url}" 
		                database.user="${database.user}" 
		                database.password="${database.password}" 
		                sql.delimiter="/" 
		                sql.delimitertype="row"
		                sql.file="${database.dir.target}/nciaCsmTbl_b.sql"
		                onerror="continue" />
		                
		<run-sql-script database.url="${database.url}" 
		                database.user="${database.user}"
		                database.password="${database.password}" 
		                sql.delimiter="/" 
		                sql.delimitertype="row"
		                sql.file="${database.dir.target}/nciaIdxWConstrain_c.sql"
		                onerror="continue"/>
		<run-sql-script database.url="${database.url}" 
		                database.user="${database.user}" 
		                database.password="${database.password}" 
		                sql.delimiter="/" 
		                sql.delimitertype="row"
		                sql.file="${database.dir.target}/nciaView_d.sql" 
		                onerror="continue"/>
		<run-sql-script database.url="${database.url}" 
		                database.user="${database.user}" 
		                database.password="${database.password}" 
		                sql.delimiter="/" 
		                sql.delimitertype="row"
		                sql.file="${database.dir.target}/nciaDbInit_e.sql"
		                onerror="continue"/>	
		<run-sql-script database.url="${database.url}" 
		                database.user="${database.user}" 
		                database.password="${database.password}" 
		                sql.delimiter="/" 
		                sql.delimitertype="row"
		                sql.file="${database.dir.target}/addVDateToGITbl.sql"
		                onerror="continue"/>		                
               
    		                
	</target>

	<target name="-install:database:mysql" if="is.mysql" unless="exclude.database">
		<copy todir="${database.dir.target}">
			<filterset>
				<filtersfile file="${properties.file}" />
			</filterset>
			<filterset refid="filterset.pre"/>
			<fileset dir="${database.dir.src}" includes="**/*.sql" />
		</copy>
		<!-- <run-sql-script database.url="${database.system.url}" database.user="${database.system.user}" database.password="${database.system.password}" sql.file="${database.dir.target}/create_database_and_user.sql" />  -->
		<database-create/>
		<run-sql-script database.url="${database.url}" database.user="${database.user}" database.password="${database.password}" sql.file="${database.dir.target}/nciaTbl_a.sql" />
		<run-sql-script database.url="${database.url}" database.user="${database.user}" database.password="${database.password}" sql.file="${database.dir.target}/nciaTbl_b.sql" />
		<run-sql-script database.url="${database.url}" database.user="${database.user}" database.password="${database.password}" sql.file="${database.dir.target}/nciaCsmTbl_c.sql" />
		<run-sql-script database.url="${database.url}" database.user="${database.user}" database.password="${database.password}" sql.file="${database.dir.target}/nciaView_d.sql" />
		<run-sql-script database.url="${database.url}" database.user="${database.user}" database.password="${database.password}" sql.file="${database.dir.target}/nciaDbInit_e.sql" />
		<run-sql-script database.url="${database.url}" database.user="${database.user}" database.password="${database.password}" sql.file="${database.dir.target}/nciaAlterTblForPrecision_f.sql" />
	</target>

	<!-- Installs the ncia-query-grid application to JBOSS -->
	<target name="install:ncia-query-grid:application" description="Deploy NCIA Query Grid application to JBOSS" unless="exclude.ncia-query-grid">
		<mkdir dir="${jboss.home}/server/${jboss.server.name}/deploy/${ncia-query-grid.dir.target}"/>

		<unzip dest="${jboss.home}/server/${jboss.server.name}/lib" src="${resource.dir.src}/${resource.file.jboss-globus-lib}" />
		<unzip dest="${jboss.home}/server/${jboss.server.name}/deploy/${ncia-query-grid.dir.target}" src="${resource.dir.src}/${resource.file.jboss-globus-war}" />

		<unzip dest="${jboss.home}/server/${jboss.server.name}/deploy/${ncia-query-grid.dir.target}" src="${ncia-query-grid.dir.src}/${ncia-query-grid.artifact.file}" />
	</target>

	<!-- Configures installed ncia-query-grid application -->
	<target name="install:ncia-query-grid:configure" description="Configure ncia-query-grid service based on properties" unless="exclude.ncia-query-grid">
		<replace dir="${jboss.home}/server/${jboss.server.name}/deploy/${ncia-query-grid.dir.target}" token="localhost:8080" value="${jboss.server.hostname}:${jboss.server.port}">
			<include name="**/*.wsdl" />
		</replace>
		<replace file="${jboss.home}/server/${jboss.server.name}/deploy/${ncia-query-grid.dir.target}/WEB-INF/etc/globus_resolution_service/jndi-config.xml" token="localhost:8080" value="${jboss.server.hostname}:${jboss.server.port}"/>
		<replace file="${jboss.home}/server/${jboss.server.name}/deploy/${ncia-query-grid.dir.target}/WEB-INF/web.xml" token="8080" value="${jboss.server.port}"/>

		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/deploy/${ncia-query-grid.dir.target}/WEB-INF/etc/cagrid_NciaQueryService/jndi-config.xml" 
			match="..appservice.url." 
			replace="http://${jboss.server.hostname}:${jboss.server.port}/ncia/http/remoteService" 
			flags="g"/>
		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/deploy/${ncia-query-grid.dir.target}/WEB-INF/etc/cagrid_NciaQueryService/NciaQueryService_registration.xml" 
			match="(\s+.wsa:Address.).*(.\/wsa:Address.)" 
			replace="\1${grid.index.url}\2"
			flags="g"/>
	</target>

	<target name="install:jboss:binaries" description="Unzip JBoss binary" unless="exclude.jboss">
		<unzip dest="${application.base.path}" src="${tools.dir.src}/${jboss.binaries.file}" />
	</target>

	<target name="install:jboss:ncia" description="Deploy NCIA ncia.ear, ncia-api.war and common libraries" unless="exclude.jboss">
		<!-- added to ensure temp dirs are fresh for our install -->
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>
		<delete dir="${jboss.home}/server/${jboss.server.name}/work"/>

		<copy file="${basedir}/ncia-ear/ncia.ear" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		<copy file="${ncia-core-grid.dir.src}/${ncia-api.file.src}" tofile="${jboss.home}/server/${jboss.server.name}/deploy/${ncia-api.file.target}" overwrite="true" />
		<copy file="${database.driver.file}" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
		<copy file="${bda-utils.dir.src}/clm-3.2.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
	</target>

	<target name="install:jboss:ncia:configure" description="Configure NCIA application" unless="exclude.jboss">
		<copy file="${resource.dir.target}/properties-service.xml" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" >
		</copy>
		<copy file="${resource.dir.target}/${resource.file.ds-xml}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" >
		</copy>
	</target>

	<!-- Wrapper target to configure jboss container, not deployed application -->
	<target name="install:jboss:configure" description="Configure ncia" unless="exclude.jboss"
		depends="install:jboss:binaries,
		-install:jboss:configure:ports,
		-install:jboss:configure:login-conf,
		-install:jboss:configure:jbossmq-dest,
		-install:jboss:configure:log4j,
		-install:jboss:remove:jfs,
		-install:jboss:configure:update-shutdown
		"/>

	<!-- Remove JSF files that conflict with NCIA Application -->
	<target name="-install:jboss:remove:jfs" description="Remove JSF library files from jbossweb to allow NCIA JSF to work" unless="exclude.jboss">
		<delete file="${jboss.home}/server/default/deploy/jbossweb-tomcat55.sar/jsf-libs/myfaces-api.jar" />
		<delete file="${jboss.home}/server/default/deploy/jbossweb-tomcat55.sar/jsf-libs/myfaces-impl.jar" />
	</target>

	<!-- Configure ports used by JBOSS (either bindings or editing jboss config.files) -->
	<target name="-install:jboss:configure:ports" description="Configure ncia" unless="exclude.jboss">
		<jboss-bindings
			jboss.server.bindingfile.location="${jboss.home}/server/${jboss.server.name}/conf/bindings.xml"
			/>
		<!-- not wokring completly right now, once it is the rest can be deleted
		** ${jboss.home}/server/default/conf/jboss-service.xml 
		<xmlconfig in="${jboss.home}/server/default/conf/jboss-service.xml" verbose="false">
			<update path="(//mbean)[@code='org.jboss.web.WebService']/attribute[@name='Port']" value="${jboss.web.service.port}" />
			<update path="(//mbean)[@code='org.jboss.naming.NamingService']/attribute[@name='Port']" value="${jboss.server.jndi.port}" />
			<update path="(//mbean)[@code='org.jboss.naming.NamingService']/attribute[@name='RmiPort']" value="${jboss.server.rmi.port}" />
			<update path="(//mbean)[@code='org.jboss.invocation.jrmp.server.JRMPInvoker']/attribute[@name='RMIObjectPort']" value="${jboss.service.rmiobject.port}" />
			<update path="(//mbean)[@code='org.jboss.invocation.pooled.server.PooledInvoker']/attribute[@name='ServerBindPort']" value="${jboss.server.bind.port}" />
		</xmlconfig>
		** ${jboss.home}/server/default/deploy/jbossweb-tomcat55.sar/server.xml
		<xmlconfig in="${jboss.home}/server/default/deploy/jbossweb-tomcat55.sar/server.xml" verbose="false">
			<update path="(//Connector)[@port=8080]/@port" value="${jboss.server.port}" />
			<update path="(//Connector)[@redirectPort=8443]/@redirectPort" value="${jboss.server.redirect.port}" />
			<update path="(//Connector)[@port=8009]/@port" value="${jboss.server.ajp.port}" />
			<update path="(//Connector)[@port=8443]/@port" value="${jboss.server.redirect.port}" />
		</xmlconfig>
		** ${jboss.home}/server/default/deploy/jms/uil2-service.xml
		<xmlconfig in="${jboss.home}/server/default/deploy/jms/uil2-service.xml" verbose="false">
			<update path="(//mbean)[@code='org.jboss.mq.il.uil2.UILServerILService']/attribute[@name='ServerBindPort']" value="${jboss.jms.port}" />
		</xmlconfig>
		-->
	</target>

	<!-- Add custom login-config.xml content from snippet from ncia/software/resources/deploy/login-config.${auth.type}-block.xml -->
	<target name="-install:jboss:configure:login-conf" unless="exclude.jboss">
		<if>    
			<equals arg1="${authentication.type}" arg2="ldap"/>
			<then>  
				<property name="login-config.block.file" value="${resource.dir.target}/login-config.ldap-block.xml"/>
			</then> 
			<else>  
				<if>    
					<equals arg1="${authentication.type}" arg2="db"/>
					<then>  
						<property name="login-config.block.file" value="${resource.dir.target}/login-config.db-block.xml"/>
					</then> 
					<else>  
						<fail message="${authentication.type} is not a valid authentiation type, please change to db or ldap and re-run the build."/>
					</else> 
				</if>   
			</else> 
		</if>   
		<echo message="Inserting ${login-config.block.file} into ${jboss.home}/server/${jboss.server.name}/conf/login-config.xml"/>
		<xmlconfig in="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml" verbose="false">
			<insertbranch path="//policy" srcxmlfile="${login-config.block.file}" srcpath="//application-policy" />
		</xmlconfig>
	</target>

	<!-- Configure NCIA MQ settings based on contents of ncia/software/resrouces/deploy/jbossmq-destinations-service.block.xml -->
	<target name="-install:jboss:configure:jbossmq-dest" unless="exclude.jboss">
		<property name="jboss-mq.block.file" value="${resource.dir.target}/jbossmq-destinations-service.block.xml"/>
		<xmlconfig in="${jboss.home}/server/${jboss.server.name}/deploy/jms/jbossmq-destinations-service.xml" verbose="false">
			<insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[1]" />
			<insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[2]" />
		</xmlconfig>
	</target>

	<!-- Configure log4j settings based on contents of ncia/software/resrouces/deploy/log4j.block.xml -->
	<target name="-install:jboss:configure:log4j" unless="exclude.jboss">
		<!-- Initially tried to do with xmlconfig but it failed because DOCTYPE log4j:configuration SYSTEM "log4j.dtd" in the header of the file -->
		<property name="log4j.block.file" value="${resource.dir.target}/log4j.block.xml"/>
		<loadfile 
			property="xml.content"
			srcFile="${log4j.block.file}"/>

		<replaceregexp file="${jboss.home}/server/default/conf/log4j.xml" byline="true"
			match="(^.*\/log4j:configuration.)"
			replace="${xml.content}${line.separator}\1"/>
	</target>

	<!-- Calls to bda macros for basic functionality -->
	<target name="install:jboss:stop" if="jboss.exists" unless="exclude.jboss">
		<!-- not working after using bindings
		<xmlconfig in="${jboss.home}/server/default/conf/jboss-service.xml" verbose="false">
			<read path="(//mbean)[@code='org.jboss.naming.NamingService']/attribute[@name='Port']" property="jboss.server.jndi.port.existing" />
		</xmlconfig>
		<jboss-stop-jboss jboss.server.jndi.port="${jboss.server.jndi.port.existing}"/>
		-->
		<jboss-stop-jboss jboss.server.jndi.port="${jboss.server.jndi.port}"/>
		<jboss-stop-jboss />
	</target>
	<target name="install:jboss:start"  unless="exclude.jboss">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<jboss-start-jboss />
			</then>
		</if>
	</target>
	<target name="install:validation:pre-install">
		<validate-pre-install />
	</target>
	<target name="install:validation:pre-install:ports">
		<validate-ports-preinstall />
	</target>
	<target name="install:validation:post-install">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<validate-post-install />
			</then>
		</if>
	</target>
	<target name="-install:jboss:configure:update-shutdown" unless="exclude.jboss">
		<jboss-update-shutdown />
	</target>

	<!-- Wrapper target to deploy JBOSS container -->
	<target name="install:jboss" unless="exclude.jboss"
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:clean,
		install:init,
		install:jboss:binaries,
		install:jboss:ncia:re-configure,
		install:jboss:ncia,
		install:jboss:ncia:configure,
		install:jboss:configure,
		install:ncia-query-grid:application,
		install:ncia-query-grid:configure,
		install:jboss:start
		" />

	<!-- Wrapper target to deploy ncia-core-grid tomcat container -->
	<target name="install:ncia-core-grid" unless="exclude.ncia-core-grid"
		depends="
		install:validation:pre-install,
		install:ncia-core-grid:tomcat:stop,
		install:validation:pre-install:ports,
		install:clean,
		install:init,
		install:ncia-core-grid:binaries,
		install:ncia-core-grid:configure,
		install:ncia-core-grid:application,
		install:ncia-core-grid:application:configure,
		install:ncia-core-grid:tomcat:start
		" />

	<!-- Wrapper target to deploy mirc tomcat container -->
	<target name="install:mirc" unless="exclude.mirc"
		depends="
		install:validation:pre-install,
		install:mirc:tomcat:stop,
		install:validation:pre-install:ports,
		install:clean,
		install:init,
		install:mirc:binaries,
		install:mirc:configure,
		install:mirc:tomcat:start
		" /> 

	<!-- Wrapper target to deploy all containers to one server -->
	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application" 
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:ncia-core-grid:tomcat:stop,
		install:mirc:tomcat:stop,
		install:validation:pre-install:ports,
		install:clean,
		install:init,
		install:database,
		install:jboss,
		install:ncia-core-grid,
		install:mirc,
		install:validation:post-install
		"/>

	<!-- Fixes hibernate dialect and other configurations in code generated at build time.  This is requred because the properties/options selected at build time can be different than those used at install time. -->
	<target name="install:jboss:ncia:re-configure" unless="exclude.jboss">
		<!-- Clean up working area -->
		<delete dir="${temp.dir}/ncia-ear"/>
		<delete dir="${temp.dir}/ncia-war"/>
		<delete dir="${temp.dir}/${ncia-api.file.src}"/>
		<delete dir="${temp.dir}//ncia/imageZippingMDB-jar"/>

		<!-- Make working directories -->
		<mkdir dir="${temp.dir}/ncia-ear"/>
		<mkdir dir="${temp.dir}/ncia-war"/>
		<mkdir dir="${temp.dir}/${ncia-api.file.src}"/>
		<mkdir dir="${temp.dir}/ncia/imageZippingMDB.jar"/>

		<!-- Extract required archives -->
		<unzip src="${basedir}/ncia-ear/ncia.ear" dest="${temp.dir}/ncia-ear"/>
		<unzip src="${temp.dir}/ncia-ear/ncia.war" dest="${temp.dir}/ncia-war"/>
		<unzip src="${ncia-core-grid.dir.src}/${ncia-api.file.src}" dest="${temp.dir}/${ncia-api.file.src}"/>
		<unzip src="${temp.dir}/ncia-ear/imageZippingMDB.jar" dest="${temp.dir}/imageZippingMDB-jar"/>

		<!-- Update hibernate configurations -->
		<xmlconfig in="${temp.dir}/ncia-war/WEB-INF/classes/NCIA.csm.new.hibernate.cfg.xml" verbose="false">
			<update path="(//session-factory)/property[@name='dialect']" value="${database.dialect}"/>
		</xmlconfig>

		<xmlconfig in="${temp.dir}/ncia-war/WEB-INF/classes/ncia.csm.new.hibernate.cfg.xml" verbose="false">
			<update path="(//session-factory)/property[@name='dialect']" value="${database.dialect}"/>
		</xmlconfig>
		<xmlconfig in="${temp.dir}/ncia-war/WEB-INF/classes/ncia.hibernate.cfg.xml" verbose="false">
			<update path="(//session-factory)/property[@name='dialect']" value="${database.dialect}"/>
		</xmlconfig>

		<replaceregexp file="${temp.dir}/ncia-war/WEB-INF/classes/hibernate.properties" byline="true"
			match="^(hibernate.dialect.*)"
			replace="#\1"/>
		<replaceregexp file="${temp.dir}/ncia-war/WEB-INF/classes/hibernate.properties" byline="true"
			match="^(hibernate.connection.driver_class.*)"
			replace="#\1"/>
		<replaceregexp file="${temp.dir}/ncia-war/WEB-INF/classes/hibernate.properties" byline="true"
			match="^#+(hibernate.dialect ${database.dialect})"
			replace="\1"/>
		<replaceregexp file="${temp.dir}/ncia-war/WEB-INF/classes/hibernate.properties" byline="true"
			match="^#+(hibernate.connection.driver_class ${database.driver})"
			replace="\1"/>

		<replaceregexp file="${temp.dir}/ncia-war/WEB-INF/conf/hibernate.properties" byline="true"
			match="^(hibernate.dialect.*)"
			replace="#\1"/>
		<replaceregexp file="${temp.dir}/ncia-war/WEB-INF/conf/hibernate.properties" byline="true"
			match="^(hibernate.connection.driver_class.*)"
			replace="#\1"/>
		<replaceregexp file="${temp.dir}/ncia-war/WEB-INF/conf/hibernate.properties" byline="true"
			match="^#+(hibernate.dialect ${database.dialect})"
			replace="\1"/>
		<replaceregexp file="${temp.dir}/ncia-war/WEB-INF/conf/hibernate.properties" byline="true"
			match="^#+(hibernate.connection.driver_class ${database.driver})"
			replace="\1"/>
		
		<replaceregexp file="${temp.dir}/${ncia-api.file.src}/WEB-INF/classes/hibernate.properties" byline="true"
			match="^(hibernate.dialect.*)"
			replace="#\1"/>
		<replaceregexp file="${temp.dir}/${ncia-api.file.src}/WEB-INF/classes/hibernate.properties" byline="true"
			match="^(hibernate.connection.driver_class.*)"
			replace="#\1"/>
		<replaceregexp file="${temp.dir}/${ncia-api.file.src}/WEB-INF/classes/hibernate.properties" byline="true"
			match="^#+(hibernate.dialect ${database.dialect})"
			replace="\1"/>
		<replaceregexp file="${temp.dir}/${ncia-api.file.src}/WEB-INF/classes/hibernate.properties" byline="true"
			match="^#+(hibernate.connection.driver_class ${database.driver})"
			replace="\1"/>

		<!-- Make additional changes, added from mahi's version -->
		<replaceregexp file="${temp.dir}/ncia/nciawar/WEB-INF/classes/mail.properties" byline="true"
			match="^(host)=(.*)"
			replace="\1=${mail.smtp.server}"/>
		<replace dir="${temp.dir}" token="localhost:59080" value="${jboss.server.hostname}:${jboss.server.port}">
			<include name="**/database.properties" />
			<include name="**/remoteService.xml" />
		</replace>

		<xmlconfig in="${temp.dir}/imageZippingMDB-jar/ncia.hibernate.cfg.xml" verbose="false">
			<update path="(//property)[@name='dialect']" value="${database.dialect}" />
		</xmlconfig>

		<!-- Backup un-modified version of archives -->
		<move file="${basedir}/ncia-ear/ncia.ear" tofile="${basedir}/ncia-ear/ncia.ear.orig"/>
		<move file="${ncia-core-grid.dir.src}/${ncia-api.file.src}" tofile="${ncia-core-grid.dir.src}/${ncia-api.file.src}.orig"/>

		<!-- Regenerate archives -->
		<jar jarfile="${temp.dir}/ncia-ear/imageZippingMDB.jar" compress="false" manifest="${temp.dir}/imageZippingMDB-jar/META-INF/MANIFEST.MF">
			<fileset dir="${temp.dir}/imageZippingMDB-jar">
				<include name="*/**" />
			</fileset>
		</jar>
		<war destfile="${temp.dir}/ncia-ear/ncia.war" compress="false" webxml="${temp.dir}/ncia-war/WEB-INF/web.xml" >
			<fileset dir="${temp.dir}/ncia-war">
				<include name="*/**" />
			</fileset>
		</war>

		<ear compress="false" destfile="${basedir}/ncia-ear/ncia.ear" appxml="${temp.dir}/ncia-ear/META-INF/application.xml">
			<fileset dir="${temp.dir}/ncia-ear">
				<include name="*/**" />
			</fileset>
		</ear>

		<war destfile="${ncia-core-grid.dir.src}/${ncia-api.file.src}" compress="false" webxml="${temp.dir}/${ncia-api.file.src}/WEB-INF/web.xml" >
			<fileset dir="${temp.dir}/${ncia-api.file.src}">
				<include name="*/**" />
			</fileset>
		</war>
	</target>

	<target name="install:ncia-core-grid:binaries" description="Install tomcat for ncia-core-grid" unless="exclude.ncia-core-grid">
		<delete dir="${tomcat.ncia-core-grid.base.path}"/>
		<unzip dest="${tomcat.ncia-core-grid.base.path}" src="${tools.dir.src}/${tomcat.binaries.file}" />
		<if>
			<os family="unix"/>
			<then>
				<chmod dir="${tomcat.ncia-core-grid.home}/bin" perm="ugo+rx" 
		      			 includes="**/*.sh"/>
			 </then>
		 </if>
	</target>

	<target name="install:ncia-core-grid:configure" description="Configure tomcat for use with ncia-core-grid (change ports)" unless="exclude.ncia-core-grid">
		<xmlconfig in="${tomcat.ncia-core-grid.home}/conf/server.xml" verbose="false">
			<update path="(//Connector)[@port=8080]/@port" value="${tomcat.ncia-core-grid.port.http}" />
			<update path="(//Connector)[@redirectPort=8443]/@redirectPort" value="${tomcat.ncia-core-grid.port.ssl}" />
			<update path="(//Connector)[@port=8009]/@port" value="${tomcat.ncia-core-grid.port.ajp}" />
			<update path="(//Connector)[@port=8443]/@port" value="${tomcat.ncia-core-grid.port.ssl}" />
			<update path="(//Server)[@port=8005]/@port" value="${tomcat.ncia-core-grid.port.shutdown}" />
		</xmlconfig>
	</target>

	<target name="install:ncia-core-grid:application" description="Deploy ncia-core-grid to tomcat" unless="exclude.ncia-core-grid">
		<mkdir dir="${tomcat.ncia-core-grid.home}/webapps/${ncia-core-grid.dir.target}"/>

	<!-- <unzip dest="${tomcat.ncia-core-grid.home}/common/lib" src="${resource.dir.src}/${resource.file.jboss-globus-lib}" />  -->
		<unzip dest="${tomcat.ncia-core-grid.home}/webapps/${ncia-core-grid.dir.target}" src="${resource.dir.src}/${resource.file.jboss-globus-war}" />

		<unzip dest="${tomcat.ncia-core-grid.home}/webapps/${ncia-core-grid.dir.target}" src="${ncia-core-grid.dir.src}/${ncia-core-grid.artifact.file}" />
	</target>

	<target name="install:ncia-core-grid:application:configure" description="Configure ncia-core-grid-application" unless="exclude.ncia-core-grid">
		<replace dir="${tomcat.ncia-core-grid.home}/webapps/${ncia-core-grid.dir.target}" token="localhost:8080" value="${tomcat.ncia-core-grid.hostname}:${tomcat.ncia-core-grid.port.http}">
			<include name="**/*.wsdl" />
		</replace>

		<replace file="${tomcat.ncia-core-grid.home}/webapps/${ncia-core-grid.dir.target}/WEB-INF/etc/globus_resolution_service/jndi-config.xml" token="localhost:8080" value="${tomcat.ncia-core-grid.hostname}:${tomcat.ncia-core-grid.port.http}"/>
		<replace file="${tomcat.ncia-core-grid.home}/webapps/${ncia-core-grid.dir.target}/WEB-INF/web.xml" token="8080" value="${tomcat.ncia-core-grid.port.http}"/>

		<replaceregexp file="${tomcat.ncia-core-grid.home}/webapps/${ncia-core-grid.dir.target}/WEB-INF/etc/cagrid_NCIACoreService/jndi-config.xml" 
			match="(\s+.value.)http://.*(.\/value.)" 
			replace="\1http://${tomcat.ncia-core-grid.hostname}:${tomcat.ncia-core-grid.port.http}/ncia-api/http/remoteService\2" 
			flags="g"/>
		<replaceregexp file="${tomcat.ncia-core-grid.home}/webapps/${ncia-core-grid.dir.target}/WEB-INF/etc/cagrid_NCIACoreService/NCIACoreService_registration.xml"
			match="(\s+.wsa:Address.).*(.\/wsa:Address.)" 
			replace="\1${grid.index.url}\2"
		       	flags="g"/>
	</target>

	<target name="install:mirc:binaries" description="Install tomcat binaries for mirc" unless="exclude.mirc">
		<delete dir="${tomcat.mirc.base.path}"/>
		<unzip dest="${tomcat.mirc.base.path}" src="${tools.dir.src}/${tomcat.binaries.file}" />
		<if>
			<os family="unix"/>
			<then>
				<chmod dir="${tomcat.mirc.home}/bin" perm="ugo+rx" 
		      			 includes="**/*.sh"/>
			 </then>
		 </if>
	</target>
	<target name="install:mirc:configure" description="Configure tomcat for mirc (ports)" unless="exclude.mirc">
		<xmlconfig in="${tomcat.mirc.home}/conf/server.xml" verbose="false">
			<update path="(//Connector)[@port=8080]/@port" value="${tomcat.mirc.port.http}" />
			<update path="(//Connector)[@redirectPort=8443]/@redirectPort" value="${tomcat.mirc.port.ssl}" />
			<update path="(//Connector)[@port=8009]/@port" value="${tomcat.mirc.port.ajp}" />
			<update path="(//Connector)[@port=8443]/@port" value="${tomcat.mirc.port.ssl}" />
			<update path="(//Server)[@port=8005]/@port" value="${tomcat.mirc.port.shutdown}" />
		</xmlconfig>
	</target>

	<!-- Wrapper target to upgrade jboss container. Does not install or configure binaries -->
	<target name="upgrade:jboss" unless="exclude.jboss"
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:init,
		install:jboss:ncia:re-configure,
		install:jboss:ncia,
		install:ncia-query-grid:application,
		install:ncia-query-grid:configure,
		install:jboss:start
		" />

	<!-- Wrapper target to upgrade ncia-core-grid tomcat container. Does not install or configure binaries -->
	<target name="upgrade:ncia-core-grid" unless="exclude.ncia-core-grid"
		depends="
		install:validation:pre-install,
		install:ncia-core-grid:tomcat:stop,
		install:init,
		install:ncia-core-grid:application,
		install:ncia-core-grid:application:configure,
		install:ncia-core-grid:tomcat:start
		" />

	<!-- Wrapper target to upgrade all container. Does not install or configure binaries -->
	<target name="upgrade" description="Deploys application and runs incremental database build" 
		depends="
		upgrade:init,
		install:validation:pre-install,
		install:jboss:stop,
		install:ncia-core-grid:tomcat:stop,
		install:init,
		upgrade:database,
		upgrade:jboss,
		upgrade:ncia-core-grid,
		install:validation:post-install
		"/>

	<!-- Wrapper upgrade database target, depends on both MySQL and Oracle sub-targets, ifs should ensure only one is run.  Target path can be skipped by exlude.database. -->
	<target name="upgrade:database" description="Apply incremental DB changes" unless="exclude.database"
		depends="
		install:init,
		upgrade:init,
		upgrade:database:oracle,
		upgrade:database:mysql
		"/>

	<target name="upgrade:database:oracle" if="is.oracle" unless="exclude.database">

    <!-- **figure out the changes/scripts based upon current version IN the database, if any ** -->
		<copy todir="${database-incr.dir.target}">
			<filterset>
				<filtersfile file="${properties.file}" />
			</filterset>
			<filterset refid="filterset.pre"/>
			<fileset dir="${database-incr.dir.src}" includes="**/*.sql" />
		</copy>

		<database-create-control-table
			database.url="${database.url}"
			database.user="${database.user}"
			database.password="${database.password}"
			/>		
		<database-identify-scripts
			sqlfiles.list.file="${db-incr.list.file}"
			build.properties.file="${db-incr.conf.file}"
			sql.delimiter="/" 
			sql.delimitertype="row"
			database.sql.dir="${database-incr.dir.target}"/>
		       	
				<!-- **make the changes to the db aka invoke the proper scripts ** -->
		<antcall target="database-integrate" />
		
				<!-- ** make sure the versioning information IN the database is updated to reflect what we just did ** -->
		<database-update-version-table database.driver="${database.driver}"
		                               database.url="${database.url}"
		                               database.user="${database.user}"
		                               database.password="${database.password}"/>		
  		                              
	</target>

	<target name="upgrade:database:mysql" if="is.mysql" unless="exclude.database">
		<copy todir="${database-incr.dir.target}">
			<filterset>
				<filtersfile file="${properties.file}" />
			</filterset>
			<filterset refid="filterset.pre"/>
			<fileset dir="${database-incr.dir.src}" includes="**/*.sql" />
		</copy>
		<database-create-control-table
			database.url="${database.url}"
			database.user="${database.user}"
			database.password="${database.password}"
			/>
		<database-identify-scripts
			sqlfiles.list.file="${db-incr.list.file}"
			build.properties.file="${db-incr.conf.file}"
			database.sql.dir="${database-incr.dir.target}"/>
		<antcall target="database-integrate" />
		<database-update-version-table
			database.driver="${database.driver}"
			database.url="${database.url}"
			database.user="${database.user}"
			database.password="${database.password}"
			/>
	</target>

	<!-- Wrapper targets for calling bda macros -->
	<target name="install:ncia-core-grid:tomcat:stop" if="tomcat.ncia-core-grid.exists" unless="exclude.ncia-core-grid">
		<tomcat-stop tomcat.home="${tomcat.ncia-core-grid.home}"/>
	</target>
	<target name="install:ncia-core-grid:tomcat:start" unless="exclude.ncia-core-grid">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<tomcat-start tomcat.home="${tomcat.ncia-core-grid.home}"/>
			</then>
		</if>
	</target>
	<target name="install:mirc:tomcat:stop" if="tomcat.mirc.exists" unless="exclude.mirc">
		<tomcat-stop tomcat.home="${tomcat.mirc.home}"/>
	</target>
	<target name="install:mirc:tomcat:start"  unless="exclude.mirc">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<tomcat-start tomcat.home="${tomcat.mirc.home}"/>
			</then>
		</if>
	</target>
	<target name="upgrade:init">
		<echo  message="Checking if database properties exist.  If they do not on an upgrade install then ${jboss.home}/server/${jboss.server.name}/deploy/${resource.file.ds-xml} may not exist."/>
		<property name="db.prop.list" value="database.url,database.user,database.password,database.name"/>
		<properties-exist properties.list="${db.prop.list}"/>
	</target>
</project>
