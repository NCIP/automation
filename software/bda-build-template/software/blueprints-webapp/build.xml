<!-- *********************************************************************** -->
<!-- ** PROJECT:   BDA Blueprints Web Application                         ** -->
<!-- *********************************************************************** -->

<project name="bda-blueprints-webapp" default="build:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns="antlib:org.apache.tools.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">

	<!-- ******************************************************************* -->
	<!-- ** PROPERTIES / PATHS                                            ** -->
	<!-- ******************************************************************* -->

	<!-- Main -->
	<property name="root.dir" location="${basedir}/../.." />
	<property name="docs.dir" location="${root.dir}/docs" />
	<property name="software.dir" location="${root.dir}/software" />
	<property name="lib.dir" location="${software.dir}/target/lib" />
	<property name="runtime.lib.dir" location="${lib.dir}/runtime" />
	<property name="compile.lib.dir" location="${lib.dir}/compile" />
	<property name="resource.dir" location="${software.dir}/common/resources" />
	<property name="target.dir" value="${software.dir}/target" />
	<property name="reports.dir" location="${software.dir}/target/reports" />
	<property name="common.dir" value="${software.dir}/common" />
	<property name="bda-download.dir" value="${target.dir}/bda-download" />
	<property name="tests.dir" value="${basedir}/tests" />
	<property name="tests.acceptance.classes.dir" value="${basedir}/target/tests-acceptance/classes" />
	<property name="tests.acceptance.jar.name" value="bda-blueprints-acceptance-tests.jar" />

	<property name="tests.acceptance.input.dir" value="${tests.dir}/acceptance/resources/input" />
	<property name="tests.acceptance.output.dir" value="${reports.dir}/acceptance" />

	<property name="tests.acceptance.fitnesse.dir" value="${tests.dir}/acceptance" />
	<property name="fitnesse.output.file" value="${tests.acceptance.output.dir}/fitnesse-test-results" />
	<property name="fitnesse.port" value="8085" />
	<property name="Fitnesse.Test.Page.Path" value="JavaExamples.WebTest.AlertTest" />


	<property name="war.name" value="bda-blueprints-webapp.war" />

	<property name="project.properties.file" value="${software.dir}/build/project.properties" />

	<property file="${basedir}/local.properties" />
	<property file="${project.properties.file}" />
	<property file="${envpropertyfile}" />


	<!-- Ivy -->
	<property name="ivy-cacore.file" value="ivy-cacore-2.0.0-beta2.jar" />
	<property name="ivy.settings.file" location="${common.dir}/ivysettings.xml" />

	<property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />
	<property name="bda-utils.dir" location="${software.dir}/target/bda-utils" />

	<property name="blueprints-webapp.java.dir" value="${basedir}/src" />
	<property name="blueprints-webapp.web.src.dir" location="${blueprints-webapp.java.dir}/web" />
	<property name="blueprints-webapp.classes.dir" value="${basedir}/target/classes" />

	<!-- Get the three BDA files needed to set the Ivy environment up -->
	<get src="${build.bda.src.url}" dest="${bda-download.dir}/bda-ivy-build.xml" />
	<get src="${ivy.bda.settings.src.url}" dest="${bda-download.dir}/ivy-bda-settings.xml" />
	<get src="${ivy.bda.src.url}" dest="${bda-download.dir}/ivy-bda.xml" />

	<!-- Run the DBA build script to get the remaining Ivy dependencies needed for BDA -->
	<mkdir dir="${bda-download.dir}" />
	<property name="bda-download.file" value="bda-ivy-build.xml" />
	<property name="bda-download.src.url" value="http://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-download/${bda-download.file}" />
	<get src="${bda-download.src.url}" dest="${bda-download.dir}/${bda-download.file}" />

	<ant inheritAll="false" inheritRefs="false" antfile="${bda-download.file}" target="retrieve-bda" dir="${bda-download.dir}">
		<property name="bda.version" value="${bda.version}" />
		<property name="bda-utils.dir" location="${bda-utils.dir}" />
		<property name="lib.dir" location="${lib.dir}" />
		<property name="software.dir" location="${software.dir}" />
	</ant>

	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<property name="reports.dir" value="${software.dir}/reports" />
	<property name="reports.simian.dir" value="${reports.dir}/simian" />
	<property name="reports.pmd.dir" value="${reports.dir}/pmd" />
	<property name="reports.checkstyle.dir" value="${reports.dir}/checkstyle" />
	<property name="reports.javancss.dir" value="${reports.dir}/javancss" />
	<property name="reports.findbugs.dir" value="${reports.dir}/findbugs" />


	<!-- BDA -->
	<property name="bda-utils.dir" location="${software.dir}/target/bda-utils" />

	<path id="project.compile.classpath">
		<fileset dir="${lib.dir}/compile">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- ******************************************************************* -->
	<!-- ** IVY TARGETS AND DEPENDENCY PATHS                              ** -->
	<!-- ******************************************************************* -->

	<property name="ivy.jar" location="${lib.dir}/ivy-2.0.0-beta2.jar" />

	<property name="ivy.settings.file" location="${common.dir}/ivysettings.xml" />
	<property name="ivy.def.file" location="ivy-blueprints.xml" />
	<property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />

	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${ivy.jar}" />

	<property name="acceptance.lib.dir" location="${lib.dir}/test-acceptance" />
	<property name="checkstyle.lib.dir" location="${lib.dir}/test-checkstyle" />
	<property name="cobertura.lib.dir" location="${lib.dir}/test-cobertura" />
	<property name="findbugs.lib.dir" location="${lib.dir}/test-findbugs" />
	<property name="javancss.lib.dir" location="${lib.dir}/test-javancss" />
	<property name="junit.lib.dir" location="${lib.dir}/test-junit" />
	<property name="pmd.lib.dir" location="${lib.dir}/test-pmd" />
	<property name="selenium.lib.dir" location="${lib.dir}/test-selenium" />
	<property name="simian.lib.dir" location="${lib.dir}/test-simian" />

	<target name="ivy:init">
		<property name="ivy.dep.file" value="${ivy.def.file}" />
		<ivy:settings file="${ivy.settings.file}" override="true" />
	</target>

	<target name="ivy:clean" depends="clean:dependencies" description="Clean">
		<ivy:settings file="${ivy.settings.file}" />
		<ivy:cleancache />
	</target>

	<target name="clean:dependencies">
		<delete dir="${compile.lib.dir}" />
		<delete dir="${runtime.lib.dir}" />
		<delete dir="${acceptance.lib.dir}" />
		<delete dir="${checkstyle.lib.dir}" />
		<delete dir="${cobertura.lib.dir}" />
		<delete dir="${findbugs.lib.dir}" />
		<delete dir="${javancss.lib.dir}" />
		<delete dir="${junit.lib.dir}" />
		<delete dir="${pmd.lib.dir}" />
		<delete dir="${selenium.lib.dir}" />
		<delete dir="${simian.lib.dir}" />
	</target>







	<!-- ******************************************************************* -->
	<!-- ** MAIN TARGETS                                                  ** -->
	<!-- ******************************************************************* -->

	<target name="ivy:setup" depends="ivy:setup-runtime, 
	        ivy:setup-compile,
			test:ivy-init,
	        ivy:setup-static-analysis" description="Updates the local ivy repository for all build and test dependencies." />

	<target name="ivy:setup-runtime" depends="ivy:init">
		<ivy:resolve refresh="true" conf="runtime" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="runtime" />
	</target>

	<target name="ivy:setup-compile" depends="ivy:init">
		<ivy:resolve refresh="true" conf="compile" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="compile" />
	</target>

	<target name="build:all" depends="-pre-clean, -init, war, test, post-clean" description="Default target" />

	<!-- This will delete all of the files created by the build process -->
	<target name="-pre-clean">
		<delete dir="${classes.dir}" quiet="true" />
		<delete file="${target.dir}/${war.name}" quiet="false" />
	</target>

	<!-- This sets up all of the neccessary directories -->
	<target name="-init" depends="-pre-clean">
		<mkdir dir="${blueprints-webapp.classes.dir}" />
		<mkdir dir="${tests.acceptance.classes.dir}" />
		<mkdir dir="${tests.acceptance.output.dir}" />
	</target>

	<target name="compile:application-code" depends="-init, ivy:setup-compile" description="Compiles all subproject code">
		<javac srcdir="${blueprints-webapp.java.dir}" destdir="${blueprints-webapp.classes.dir}" debug="true">
			<classpath refid="project.compile.classpath" />
		</javac>
	</target>

	<target name="war" depends="compile:application-code, ivy:setup-runtime">
		<war destfile="${target.dir}/${war.name}">
			<fileset dir="${blueprints-webapp.web.src.dir}" />
			<lib dir="${runtime.lib.dir}" includes="*.jar" />
			<classes dir="${blueprints-webapp.classes.dir}" />
		</war>
	</target>

	<target name="dist" depends="war, test" description="Copies WAR file to distribution folder">
		<copy todir="${dist.dir}" file="${target.dir}/${war.name}" />
	</target>

	<target name="post-clean">
		<delete dir="${blueprints-webapp.classes.dir}" quiet="false" />
	</target>







	<!-- ******************************************************************* -->
	<!-- ** TESTING TARGETS                                               ** -->
	<!-- ******************************************************************* -->

	<!-- This is a wrapper target for all test targets. TODO: Add unit, functional tests! -->
	<target name="test" description="Runs all tests" depends="
				-init,
				test:ivy-init,
				test:acceptance:fit,
				test:acceptance:fitnesse
				">
	</target>

	<!-- Fit:Begin -->
	<target name="test:acceptance:fit" depends="test:ivy-init, test:jar-acceptance-tests" description="Runs acceptance tests">
		<echo message="Running FIT tests..." />
		<java classname="fitlibrary.runner.FolderRunner" fork="yes" failonerror="yes">
			<arg value="${tests.acceptance.input.dir}" />
			<arg value="${tests.acceptance.output.dir}" />
			<classpath refid="project.test.acceptance.classpath" />
		</java>
	</target>

	<target name="test:compile-acceptance-tests" description="Compiles acceptance tests">
		<echo message="Compiling acceptance tests..." />
		<javac srcdir="${tests.dir}/acceptance/java" destdir="${tests.acceptance.classes.dir}" debug="true">
			<classpath refid="project.test.acceptance.classpath" />
		</javac>
	</target>

	<target name="test:jar-acceptance-tests" depends="test:compile-acceptance-tests" description="Packages acceptance tests into a JAR">
		<echo message="Packaging acceptance tests..." />
		<jar basedir="${tests.acceptance.classes.dir}" destfile="${lib.dir}/test-acceptance/${tests.acceptance.jar.name}" />
	</target>
	<!-- Fit:End -->


	<!-- Fitnesse:Begin -->
	<target name="test:acceptance:fitnesse" depends="-init, test:ivy-init"  description="Runs fitnesse acceptance tests">
		<echo message="Starting FitNesse server..." />

		<parallel>

			<daemons>
				<java classname="fitnesse.FitNesse" classpathref="project.test.acceptance.classpath">
					<arg value="-l" />
					<arg value="${tests.acceptance.output.dir}" />
					<arg value="-p" />
					<arg value="${fitnesse.port}" />
					<arg value="-e" />
					<arg value="0" />
					<arg value="-d" />
					<arg value="${tests.acceptance.fitnesse.dir}" />
				</java>
			</daemons>

			<sequential>
				<echo message="Starting ${Fitnesse.Test.Page.Path} test suite..." level="info" />

				<sleep seconds="5" />
				<java classpath="${lib.dir}/test-acceptance/fitnesse.jar" classname="fitnesse.runner.TestRunner" fork="true" resultproperty="fit.test.failures">
					<arg value="-debug" />
					<arg value="-xml" />
					<arg value="${fitnesse.output.file}.xml" />
					<arg value="-html" />
					<arg value="${fitnesse.output.file}.html" />
					<arg value="-nopath" />
					<arg value="localhost" />
					<arg value="${fitnesse.port}" />
					<arg value="${Fitnesse.Test.Page.Path}" />
				</java>

				<!--
				<replace file="${fitnesse.output.file}.html" token="localhost:${fitnesse.port}" />
				-->

				<echo message="Finished FitNesse tests: ${fit.test.failures} failures/exceptions" level="info" />
				<fail message="Fitnesse test failures/exceptions: ${fit.test.failures}">
					<condition>
						<not>
							<equals arg1="${fit.test.failures}" arg2="0" />
						</not>
					</condition>
				</fail>
				<!-- This will fail the build if the return code was not Zero, which means there were errors or exceptions -->
			</sequential>

		</parallel>
	</target>
	<!-- Fitnesse:End -->

	<target name="test:ivy-init" depends="
			ivy:init,
			test:ivy-test-junit,
			test:ivy-test-selenium,
			test:ivy-test-acceptance,
			test:ivy-test-cobertura
			" />

	<target name="test:ivy-test-junit" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-junit" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-junit" />
		<path id="project.test.junit.classpath">
			<fileset dir="${lib.dir}/test-junit">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="test:ivy-test-selenium" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-selenium" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-selenium" />
		<path id="project.test.selenium.classpath">
			<fileset dir="${lib.dir}/test-selenium">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="test:ivy-test-acceptance" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-acceptance" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-acceptance" />
		<path id="project.test.acceptance.classpath">
			<fileset dir="${lib.dir}/test-acceptance">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="test:ivy-test-cobertura" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-cobertura" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-cobertura" />
		<path id="cobertura.classpath">
			<fileset dir="${lib.dir}/test-cobertura">
				<include name="*.jar" />
			</fileset>
		</path>
		<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
	</target>











	<!-- ******************************************************************* -->
	<!-- ** STATIC ANALYSIS                                               ** -->
	<!-- ******************************************************************* -->

	<!-- This is a wrapper target for all static analysis targets -->
	<target name="static-analysis" description="Performs static analysis" depends="
			static-analysis:ivy-init,
			static-analysis:init,
			static-analysis:findbugs-init,
			static-analysis:simian,
			static-analysis:pmd,
			static-analysis:checkstyle,
			static-analysis:javancss,
			static-analysis:findbugs,
			static-analysis:diff:pmd,
			static-analysis:diff:checkstyle
			">
		<fail if="checkstyle.failure" message="There were Checkstyle failures." />
		<fail if="pmd.failure" message="There were PMD failures." />
	</target>

	<target name="ivy:setup-static-analysis" depends="ivy:init">
		<ivy:resolve refresh="true" conf="test-javancss" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-javancss" />
		<path id="javancss.classpath">
			<fileset dir="${lib.dir}/test-javancss">
				<include name="*.jar" />
			</fileset>
		</path>
		<ivy:resolve refresh="true" conf="test-checkstyle" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-checkstyle" />
		<path id="project.test.checkstyle.classpath">
			<fileset dir="${lib.dir}/test-checkstyle">
				<include name="*.jar" />
			</fileset>
		</path>
		<ivy:resolve refresh="true" conf="test-pmd" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-pmd" />
		<path id="project.test.pmd.classpath">
			<fileset dir="${lib.dir}/test-pmd">
				<include name="*.jar" />
			</fileset>
		</path>
		<ivy:resolve refresh="true" conf="test-simian" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-simian" />
		<path id="project.test.simian.classpath">
			<fileset dir="${lib.dir}/test-simian">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="static-analysis:ivy-init" depends="
		ivy:init,
		static-analysis:ivy-test-javancss,
		static-analysis:ivy-test-checkstyle,
		static-analysis:ivy-test-simian,
		static-analysis:ivy-test-pmd
		" />
	<target name="static-analysis:ivy-test-javancss" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-javancss" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-javancss" />
		<path id="project.test.javancss.classpath">
			<fileset dir="${lib.dir}/test-javancss">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="static-analysis:ivy-test-checkstyle" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-checkstyle" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-checkstyle" />
		<path id="project.test.checkstyle.classpath">
			<fileset dir="${lib.dir}/test-checkstyle">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="static-analysis:ivy-test-pmd" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-pmd" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-pmd" />
		<path id="project.test.pmd.classpath">
			<fileset dir="${lib.dir}/test-pmd">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="static-analysis:ivy-test-simian" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-simian" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-simian" />
		<path id="project.test.simian.classpath">
			<fileset dir="${lib.dir}/test-simian">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>




	<!-- Creates paths and  directories -->
	<target name="static-analysis:init">
		<mkdir dir="${reports.dir}" />
		<mkdir dir="${reports.simian.dir}" />
		<mkdir dir="${reports.pmd.dir}" />
		<mkdir dir="${reports.checkstyle.dir}" />
		<mkdir dir="${reports.javancss.dir}" />
		<mkdir dir="${reports.findbugs.dir}" />
	</target>

	<!-- Findbugs is realy a full application that has ant support.  This target downloads the binaries for this distribution for use by ant target.  Additionaly setups a jboss installation to uses in the classpath of findbugs to cover runtime libraries -->
	<target name="static-analysis:findbugs-init">
		<property name="temp.dir" value="${software.dir}/temp" />
		<mkdir dir="${temp.dir}" />
		<property name="findbugs.home.dir" value="${lib.dir}/${findbugs.binaries.relative.dir}" />
		<if>
			<not>
				<available file="${findbugs.home.dir}/lib/findbugs.jar" />
			</not>
			<then>
				<echo message="Findbugs is missing, downloading and isnstalling in ${findbugs.home.dir}" />
				<get src="${findbugs.src.url}" dest="${temp.dir}/${findbugs.binaries.file}" />
				<unzip dest="${lib.dir}" src="${temp.dir}/${findbugs.binaries.file}" />
			</then>
		</if>
		<path id="project.test.findbugs.classpath">
			<fileset dir="${findbugs.home.dir}">
				<include name="**/*.jar" />
			</fileset>
		</path>
	</target>

	<!-- One target and one macro have been written for each static-analysis tool.  The macro runs static-analysis on an one set of values. The target then calls the macro with values for each sub-project.  If a user wanted to add options to the static-analysis tool in the the macro, they could add an attribute, refer to that attribute in the static-analysis call and then add the option to each of the calls to the marco in the wrapper target.
	-->
	<!-- Runs Simian a code duplication reporter.
		You can find additional information about simian at:
		http://www.redhillconsulting.com.au/products/simian/installation.html
		-->
	<target name="static-analysis:simian" depends="static-analysis:init" description="Performs code duplication analysis">
		<static-analysis-simian simian.src.dir="${blueprints-webapp.java.src.dir}" simian.rpt.dir="${reports.simian.dir}" simian.report-xsl.file="${common.dir}/simian/simian.xsl" simian.xml.name="simian-blueprints-webapp.xml" simian.html.name="simian-blueprints-webapp.html" />

	</target>
	<macrodef name="static-analysis-simian">
		<attribute name="simian.src.dir" />
		<attribute name="simian.rpt.dir" />
		<attribute name="simian.report-xsl.file" />
		<attribute name="simian.xml.name" default="simian.xml" />
		<attribute name="simian.html.name" default="simian.html" />
		<sequential>
			<taskdef resource="simiantask.properties" classpathref="project.test.simian.classpath" />
			<simian failureProperty="simian.failure" failOnDuplication="failse">
				<fileset dir="@{simian.src.dir}" includes="**/*.java" />
				<formatter type="xml" toFile="@{simian.rpt.dir}/@{simian.xml.name}" />
			</simian>
			<xslt in="@{simian.rpt.dir}/@{simian.xml.name}" out="@{simian.rpt.dir}/@{simian.html.name}" style="@{simian.report-xsl.file}" />
		</sequential>
	</macrodef>

	<target name="static-analysis:pmd" depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-pmd pmd.src.dir="${blueprints-webapp.java.src.dir}" pmd.rpt.dir="${reports.pmd.dir}" pmd.root-dir.name="software" pmd.sub-project.name="blueprints-webapp" pmd.report-xsl.file="${common.dir}/pmd/pmd-report-per-class.xslt" pmd.report-preprocessor.file="${common.dir}/pmd/pmd-hudson-preprocessor.xlst" pmd.rule-set.file="${common.dir}/pmd/pmd-ruleset.xml" pmd.xml.name="pmd-report.xml" pmd.html.name="pmd-report.html" />
	</target>

	<macrodef name="static-analysis-pmd">
		<attribute name="pmd.src.dir" />
		<attribute name="pmd.rpt.dir" />
		<attribute name="pmd.root-dir.name" />
		<attribute name="pmd.sub-project.name" />
		<attribute name="pmd.report-preprocessor.file" />
		<attribute name="pmd.report-xsl.file" />
		<attribute name="pmd.rule-set.file" />
		<attribute name="pmd.xml.name" default="pmd.xml" />
		<attribute name="pmd.html.name" default="pmd.html" />
		<sequential>
			<property name="pmd.sub-project.rpt.dir" value="@{pmd.rpt.dir}/@{pmd.sub-project.name}/target" />
			<mkdir dir="${pmd.sub-project.rpt.dir}" />
			<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="project.test.pmd.classpath" />
			<pmd rulesetfiles="@{pmd.rule-set.file}" shortFilenames="true" failonerror="false" failurespropertyname="pmd.failure" targetjdk="1.5">
				<formatter type="xml" toFile="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}" />
				<fileset dir="@{pmd.src.dir}">
					<include name="**/*.java" />
				</fileset>
			</pmd>
			<move file="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}" tofile="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}.bak" />
			<xslt taskname="pmd" in="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}.bak" out="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}" style="@{pmd.report-preprocessor.file}">
				<param name="relative.path" expression="@{pmd.root-dir.name}/@{pmd.sub-project.name}" />
			</xslt>

			<xslt taskname="pmd" in="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}.bak" out="${pmd.sub-project.rpt.dir}/@{pmd.html.name}" style="@{pmd.report-xsl.file}" />
		</sequential>
	</macrodef>

	<target name="static-analysis:diff:pmd" depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-diff-pmd differential.file.name="diff_list.txt" pmd.src.dir="${blueprints-webapp.java.src.dir}" pmd.rpt.dir="${reports.pmd.dir}" pmd.root-dir.name="software" pmd.sub-project.name="blueprints-webapp" pmd.report-xsl.file="${common.dir}/pmd/pmd-report-per-class.xslt" pmd.report-preprocessor.file="${common.dir}/pmd/pmd-hudson-preprocessor.xlst" pmd.rule-set.file="${common.dir}/pmd/pmd-ruleset.xml" pmd.xml.name="pmd-report.xml" pmd.html.name="pmd-report.html" />
		<replaceregexp file="${project.properties.file}" byline="true" match="^(pmd.revision.number)=(.*)" replace="\1=${build.svn.revision}" />
	</target>

	<macrodef name="static-analysis-diff-pmd">
		<attribute name="property.file" default="project.properties" />
		<attribute name="differential.file.name" default="diff_list.txt" />
		<attribute name="pmd.src.dir" />
		<attribute name="pmd.rpt.dir" />
		<attribute name="pmd.root-dir.name" />
		<attribute name="pmd.sub-project.name" />
		<attribute name="pmd.report-preprocessor.file" />
		<attribute name="pmd.report-xsl.file" />
		<attribute name="pmd.rule-set.file" />
		<attribute name="pmd.xml.name" default="pmd.xml" />
		<attribute name="pmd.html.name" default="pmd.html" />
		<sequential>
			<property name="pmd.sub-project.rpt.dir" value="@{pmd.rpt.dir}/@{pmd.sub-project.name}/target" />
			<mkdir dir="${pmd.sub-project.rpt.dir}" />
			<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="project.test.pmd.classpath" />

			<diffrevision old.revision.number="${pmd.revision.number}" differential.file.name="@{differential.file.name}" />
			<pmd rulesetfiles="@{pmd.rule-set.file}" shortFilenames="true" failonerror="false" failurespropertyname="pmd.failure" targetjdk="1.5">
				<formatter type="xml" toFile="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}" />
				<fileset dir="@{pmd.src.dir}">
					<patternset>
						<includesfile name="@{differential.file.name}" />
					</patternset>
				</fileset>
			</pmd>
			<move file="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}" tofile="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}.bak" />
			<xslt taskname="pmd" in="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}.bak" out="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}" style="@{pmd.report-preprocessor.file}">
				<param name="relative.path" expression="@{pmd.root-dir.name}/@{pmd.sub-project.name}" />
			</xslt>

			<xslt taskname="pmd" in="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}.bak" out="${pmd.sub-project.rpt.dir}/@{pmd.html.name}" style="@{pmd.report-xsl.file}" />
		</sequential>
	</macrodef>


	<!-- Runs JavaNCSS a tool that identifies code Cyclomatic Complexity.
		You can find additional information about JavaNCSS at:
		http://www.kclee.de/clemens/java/javancss/
		-->
	<target name="static-analysis:javancss" depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-javancss javancss.src.dir="${blueprints-webapp.java.src.dir}" javancss.rpt.dir="${reports.javancss.dir}" javancss.report-xsl.file="${common.dir}/javancss/javancss2methodhtml.xsl" javancss.xml.name="javancss_metrics_blueprints-webapp.xml" javancss.html.name="javancss_report_blueprints-webapp.html" />
	</target>

	<macrodef name="static-analysis-javancss">
		<attribute name="javancss.src.dir" />
		<attribute name="javancss.rpt.dir" />
		<attribute name="javancss.report-xsl.file" />
		<attribute name="javancss.xml.name" default="javancss.xml" />
		<attribute name="javancss.html.name" default="javancss.html" />
		<sequential>
			<taskdef name="javancss" classpathref="project.test.javancss.classpath" classname="javancss.JavancssAntTask" />
			<javancss srcdir="@{javancss.src.dir}" includes="**/*.java" excludes="**/*test*/*" generatereport="true" outputfile="@{javancss.rpt.dir}/@{javancss.xml.name}" ccnPerFuncMax="10" format="xml">
			</javancss>
			<xslt taskname="javancss" in="@{javancss.rpt.dir}/@{javancss.xml.name}" out="@{javancss.rpt.dir}/@{javancss.html.name}" style="@{javancss.report-xsl.file}" />
		</sequential>
	</macrodef>

	<!-- Runs Findbugs a tool that attempts to find bugs.
		You can find additional information about findbugs at:
		http://findbugs.sourceforge.net/
		-->
	<target name="static-analysis:findbugs" depends="
		static-analysis:ivy-init,
		static-analysis:findbugs-init,
		static-analysis:init
		">
		<mkdir dir="${reports.findbugs.dir}/bda-blueprints-webapp" />

		<static-analysis-findbugs findbugs.home.dir="${findbugs.home.dir}" findbugs.src.dir="${blueprints-webapp.java.src.dir}" findbugs.classes.dir="${blueprints-webapp.java.classes.dir}" findbugs.rpt.dir="${reports.findbugs.dir}/bda-blueprints-webapp" findbugs.report-xsl.file="${findbugs.home.dir}/src/xsl/fancy.xsl" findbugs.app.classpath.ref="bda-blueprints-webapp.full.classpath" findbugs.xml.name="findbugs.xml" findbugs.html.name="findbugs.html" />
	</target>

	<macrodef name="static-analysis-findbugs">
		<attribute name="findbugs.home.dir" />
		<attribute name="findbugs.src.dir" />
		<attribute name="findbugs.rpt.dir" />
		<attribute name="findbugs.classes.dir" />
		<attribute name="findbugs.report-xsl.file" />
		<attribute name="findbugs.app.classpath.ref" />
		<attribute name="findbugs.xml.name" default="findbugs.xml" />
		<attribute name="findbugs.html.name" default="findbugs.html" />
		<sequential>
			<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="project.test.findbugs.classpath" />

			<findbugs home="@{findbugs.home.dir}" output="xml:withMessages" outputFile="@{findbugs.rpt.dir}/@{findbugs.xml.name}" jvmargs="-Xms128m -Xmx512m">
				<auxClasspath>
					<!--
					<fileset dir="@{findbugs.app.classpath.dir}">
						<include name="**/*.jar" />
					</fileset>
					-->
					<fileset refid="@{findbugs.app.classpath.ref}" />
				</auxClasspath>

				<sourcePath path="@{findbugs.src.dir}" />
				<class location="@{findbugs.classes.dir}" />
			</findbugs>
			<xslt taskname="findbugs" in="@{findbugs.rpt.dir}/@{findbugs.xml.name}" out="@{findbugs.rpt.dir}/@{findbugs.html.name}" style="@{findbugs.report-xsl.file}" />
		</sequential>
	</macrodef>

	<!-- Runs CheckStyle is a codeing standard violation reporter.  
		You can find additional information about checkstyle at:
		http://checkstyle.sourceforge.net/
		-->
	<target name="static-analysis:checkstyle" depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-checkstyle checkstyle.src.dir="${blueprints-webapp.java.src.dir}" checkstyle.rpt.dir="${reports.checkstyle.dir}" checkstyle.report-xsl.file="${common.dir}/checkstyle/checkstyle-frames.xsl" checkstyle.config.file="${checkstyle.config}" checkstyle.xml.name="checkstyle.xml" checkstyle.html.name="checkstyle.html" checkstyle.classpath.ref.name="bda-blueprints-webapp.full.classpath" />
	</target>

	<macrodef name="static-analysis-checkstyle">
		<attribute name="checkstyle.src.dir" />
		<attribute name="checkstyle.rpt.dir" />
		<attribute name="checkstyle.report-xsl.file" />
		<attribute name="checkstyle.config.file" />
		<attribute name="checkstyle.xml.name" default="checkstyle.xml" />
		<attribute name="checkstyle.html.name" default="checkstyle.html" />
		<attribute name="checkstyle.classpath.ref.name" />
		<sequential>
			<taskdef resource="checkstyletask.properties" uri="antlib:com.puppycrawl.tools.checkstyle" classpathref="project.test.checkstyle.classpath" />
			<cs:checkstyle config="@{checkstyle.config.file}" failureProperty="checkstyle.failure" failOnViolation="false" maxerrors="0" maxwarnings="0" classpathref="@{checkstyle.classpath.ref.name}">
				<formatter type="xml" tofile="@{checkstyle.rpt.dir}/@{checkstyle.xml.name}" />
				<fileset dir="@{checkstyle.src.dir}">
					<include name="**/*.java" />
				</fileset>
			</cs:checkstyle>
			<xslt taskname="checkstyle" in="@{checkstyle.rpt.dir}/@{checkstyle.xml.name}" out="@{checkstyle.rpt.dir}/@{checkstyle.html.name}" style="@{checkstyle.report-xsl.file}">
				<param name="output.dir" expression="@{checkstyle.rpt.dir}" />
			</xslt>

		</sequential>
	</macrodef>

	<target name="static-analysis:diff:checkstyle" depends="
		static-analysis:ivy-init,
		static-analysis:init
		">
		<static-analysis-diff-checkstyle differential.file.name="diff_list.txt" checkstyle.src.dir="${blueprints-webapp.java.src.dir}" checkstyle.rpt.dir="${reports.checkstyle.dir}/changeset" checkstyle.report-xsl.file="${common.dir}/checkstyle/checkstyle-frames.xsl" checkstyle.config.file="${checkstyle.config}" checkstyle.xml.name="checkstyle.xml" checkstyle.html.name="checkstyle.html" checkstyle.classpath.ref.name="project.full.classpath" />
		<replaceregexp file="${project.properties.file}" byline="true" match="^(checkstyle.revision.number)=(.*)" replace="\1=${build.svn.revision}" />
	</target>

	<macrodef name="static-analysis-diff-checkstyle">
		<attribute name="differential.file.name" default="diff_list.txt" />
		<attribute name="checkstyle.src.dir" />
		<attribute name="checkstyle.rpt.dir" />
		<attribute name="checkstyle.report-xsl.file" />
		<attribute name="checkstyle.config.file" />
		<attribute name="checkstyle.xml.name" default="checkstyle.xml" />
		<attribute name="checkstyle.html.name" default="checkstyle.html" />
		<attribute name="checkstyle.classpath.ref.name" />

		<sequential>
			<diffrevision old.revision.number="${checkstyle.revision.number}" differential.file.name="@{differential.file.name}" />

			<taskdef resource="checkstyletask.properties" uri="antlib:com.puppycrawl.tools.checkstyle" classpathref="project.test.checkstyle.classpath" />

			<mkdir dir="@{checkstyle.rpt.dir}" />

			<cs:checkstyle config="@{checkstyle.config.file}" failureProperty="checkstyle.failure" failOnViolation="false" maxerrors="0" maxwarnings="0" classpathref="@{checkstyle.classpath.ref.name}">

				<formatter type="xml" tofile="@{checkstyle.rpt.dir}/@{checkstyle.xml.name}" />

				<fileset dir="@{checkstyle.src.dir}">
					<patternset>
						<includesfile name="@{differential.file.name}" />
					</patternset>
				</fileset>
			</cs:checkstyle>

			<xslt taskname="checkstyle" in="@{checkstyle.rpt.dir}/@{checkstyle.xml.name}" out="@{checkstyle.rpt.dir}/@{checkstyle.html.name}" style="@{checkstyle.report-xsl.file}" />
		</sequential>
	</macrodef>



	<!-- Runs Cobertura a code coveragetool.
		You can find additional information about cobertura at:
		http://cobertura.sourceforge.net/
		-->
	<target name="static-analysis:cobertura" depends="
		compile:application-code,
		static-analysis:ivy-init,
		static-analysis:init
		">
		<mkdir dir="${basedir}/instrumented/generic-api" />
		<mkdir dir="${basedir}/instrumented/blueprints-webapp" />
		<static-analysis-cobertura cobertura.src.dir="${blueprints-webapp.java.dir}" cobertura.classes.dir="${blueprints-webapp.classes.dir}" cobertura.rpt.dir="${reports.cobertura.dir}/blueprints-webapp" cobertura.instrumented.dir="${basedir}/instrumented/blueprints-webapp" cobertura.report-xsl.file="${common.dir}/cobertura/cobertura-simple.xsl" cobertura.ser.file="cobertura.ser" cobertura.config.file="${common.dir}/cobertura/cobertura.xml" />
		<static-analysis-cobertura cobertura.src.dir="${generic-api.java.dir}" cobertura.classes.dir="${generic-api.classes.dir}" cobertura.rpt.dir="${reports.cobertura.dir}/generic-api" cobertura.instrumented.dir="${basedir}/instrumented/generic-api" cobertura.report-xsl.file="${common.dir}/cobertura/cobertura-simple.xsl" cobertura.ser.file="cobertura.ser" cobertura.config.file="${common.dir}/cobertura/cobertura.xml" />
	</target>

	<macrodef name="static-analysis-cobertura">
		<attribute name="cobertura.src.dir" />
		<attribute name="cobertura.rpt.dir" />
		<attribute name="cobertura.classes.dir" />
		<attribute name="cobertura.instrumented.dir" />
		<attribute name="cobertura.report-xsl.file" />
		<attribute name="cobertura.ser.file" />
		<attribute name="cobertura.config.file" />
		<sequential>
			<taskdef classpathref="project.test.cobertura.classpath" resource="tasks.properties" />
			<cobertura-instrument todir="@{cobertura.instrumented.dir}" datafile="@{cobertura.instrumented.dir}/@{cobertura.ser.file}">
				<fileset dir="@{cobertura.classes.dir}">
					<include name="**" />
				</fileset>
			</cobertura-instrument>

			<cobertura-report datafile="@{cobertura.instrumented.dir}/@{cobertura.ser.file}" format="html" destdir="@{cobertura.rpt.dir}">
				<fileset dir="@{cobertura.src.dir}">
					<include name="**/*.java" />
				</fileset>
			</cobertura-report>

			<cobertura-check failureproperty="cobertura.failure" datafile="@{cobertura.instrumented.dir}/@{cobertura.ser.file}" haltonfailure="false" linerate="0" packagebranchrate="0" packagelinerate="0" totalbranchrate="25" totallinerate="30" />
		</sequential>
	</macrodef>

</project>
