<!-- *********************************************************************** -->
<!-- ** PROJECT:   BDA Blueprints Web Application                         ** -->
<!-- *********************************************************************** -->

<project name="bda-blueprints-webapp" default="build:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns="antlib:org.apache.tools.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">

	<!-- ******************************************************************* -->
	<!-- ** PROPERTIES / PATHS                                            ** -->
	<!-- ******************************************************************* -->

	<!-- Main -->
	<property name="root.dir" location="${basedir}/../.." />
	<property name="docs.dir" location="${root.dir}/docs" />
	<property name="software.dir" location="${root.dir}/software" />
	<property name="lib.dir" location="${software.dir}/target/lib" />
	<property name="runtime.lib.dir" location="${lib.dir}/runtime" />
	<property name="compile.lib.dir" location="${lib.dir}/compile" />
	<property name="resource.dir" location="${software.dir}/common/resources" />
	<property name="target.dir" value="${software.dir}/target" />
	<property name="reports.dir" location="${software.dir}/target/reports" />
	<property name="common.dir" value="${software.dir}/common" />
	<property name="bda-download.dir" value="${target.dir}/bda-download" />
	<property name="tests.dir" value="${basedir}/tests" />
	<property name="tests.acceptance.classes.dir" value="${basedir}/target/tests-acceptance/classes" />
	<property name="tests.acceptance.jar.name" value="bda-blueprints-acceptance-tests.jar" />

	<property name="tests.acceptance.input.dir" value="${tests.dir}/acceptance/resources/input" />
	<property name="tests.acceptance.output.dir" value="${reports.dir}/acceptance" />

	<property name="tests.acceptance.fitnesse.dir" value="${tests.dir}/acceptance" />
	<property name="fitnesse.output.file" value="${tests.acceptance.output.dir}/fitnesse-test-results" />
	<property name="fitnesse.port" value="8085" />
	<property name="Fitnesse.Test.Page.Path" value="BdaBlueprints.TestBdaBlueprintsHome" />


	<property name="war.name" value="bda-blueprints-webapp.war" />

	<property name="project.properties.file" value="${software.dir}/build/project.properties" />

	<property file="${basedir}/local.properties" />
	<property file="${project.properties.file}" />
	<property file="${envpropertyfile}" />


	<!-- Ivy -->
	<property name="ivy-cacore.file" value="ivy-cacore-2.0.0-beta2.jar" />
	<property name="ivy.settings.file" location="${common.dir}/ivysettings.xml" />

	<property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />
	<property name="bda-utils.dir" location="${software.dir}/target/bda-utils" />

	<property name="blueprints-webapp.java.dir" value="${basedir}/src" />
	<property name="blueprints-webapp.web.src.dir" location="${blueprints-webapp.java.dir}/web" />
	<property name="blueprints-webapp.java.src.dir" location="${blueprints-webapp.java.dir}/java" />	
	<property name="blueprints-webapp.classes.dir" value="${basedir}/target/classes" />

	<property name="checkstyle.config" value="${common.dir}/checkstyle/checkstyle_minimal.xml"/>

	<!-- Get the three BDA files needed to set the Ivy environment up -->
	<get src="${build.bda.src.url}" dest="${bda-download.dir}/bda-ivy-build.xml" />
	<get src="${ivy.bda.settings.src.url}" dest="${bda-download.dir}/ivy-bda-settings.xml" />
	<get src="${ivy.bda.src.url}" dest="${bda-download.dir}/ivy-bda.xml" />

	<!-- Run the DBA build script to get the remaining Ivy dependencies needed for BDA -->
	<mkdir dir="${bda-download.dir}" />
	<property name="bda-download.file" value="bda-ivy-build.xml" />
	<property name="bda-download.src.url" value="http://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-download/${bda-download.file}" />
	<get src="${bda-download.src.url}" dest="${bda-download.dir}/${bda-download.file}" />

	<ant inheritAll="false" inheritRefs="false" antfile="${bda-download.file}" target="retrieve-bda" dir="${bda-download.dir}">
		<property name="bda.version" value="${bda.version}" />
		<property name="bda-utils.dir" location="${bda-utils.dir}" />
		<property name="lib.dir" location="${lib.dir}" />
		<property name="software.dir" location="${software.dir}" />
	</ant>

	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />
	<import file="${basedir}/static-analysis-build.xml"/>

	<property name="reports.dir" value="${software.dir}/reports" />
	<property name="reports.simian.dir" value="${reports.dir}/simian" />
	<property name="reports.pmd.dir" value="${reports.dir}/pmd" />
	<property name="reports.checkstyle.dir" value="${reports.dir}/checkstyle/all" />
	<property name="reports.checkstyle.dir.diff" value="${reports.dir}/checkstyle/diff" />
	<property name="reports.javancss.dir" value="${reports.dir}/javancss" />
	<property name="reports.findbugs.dir" value="${reports.dir}/findbugs" />


	<!-- BDA -->
	<property name="bda-utils.dir" location="${software.dir}/target/bda-utils" />

	<path id="project.compile.classpath">
		<fileset dir="${lib.dir}/compile">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- ******************************************************************* -->
	<!-- ** IVY TARGETS AND DEPENDENCY PATHS                              ** -->
	<!-- ******************************************************************* -->

	<property name="ivy.jar" location="${lib.dir}/ivy-2.0.0-beta2.jar" />

	<property name="ivy.settings.file" location="${common.dir}/ivysettings.xml" />
	<property name="ivy.def.file" location="ivy-blueprints.xml" />
	<property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />

	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${ivy.jar}" />

	<property name="acceptance.lib.dir" location="${lib.dir}/test-acceptance" />
	<property name="checkstyle.lib.dir" location="${lib.dir}/test-checkstyle" />
	<property name="cobertura.lib.dir" location="${lib.dir}/test-cobertura" />
	<property name="findbugs.lib.dir" location="${lib.dir}/test-findbugs" />
	<property name="javancss.lib.dir" location="${lib.dir}/test-javancss" />
	<property name="junit.lib.dir" location="${lib.dir}/test-junit" />
	<property name="pmd.lib.dir" location="${lib.dir}/test-pmd" />
	<property name="selenium.lib.dir" location="${lib.dir}/test-selenium" />
	<property name="simian.lib.dir" location="${lib.dir}/test-simian" />

	<target name="ivy:init">
		<property name="ivy.dep.file" value="${ivy.def.file}" />
		<ivy:settings file="${ivy.settings.file}" override="true" />
	</target>

	<target name="ivy:clean" depends="clean:dependencies" description="Clean">
		<ivy:settings file="${ivy.settings.file}" />
		<ivy:cleancache />
	</target>

	<target name="clean:dependencies">
		<delete dir="${compile.lib.dir}" />
		<delete dir="${runtime.lib.dir}" />
		<delete dir="${acceptance.lib.dir}" />
		<delete dir="${checkstyle.lib.dir}" />
		<delete dir="${cobertura.lib.dir}" />
		<delete dir="${findbugs.lib.dir}" />
		<delete dir="${javancss.lib.dir}" />
		<delete dir="${junit.lib.dir}" />
		<delete dir="${pmd.lib.dir}" />
		<delete dir="${selenium.lib.dir}" />
		<delete dir="${simian.lib.dir}" />
	</target>







	<!-- ******************************************************************* -->
	<!-- ** MAIN TARGETS                                                  ** -->
	<!-- ******************************************************************* -->

	<target name="ivy:setup" depends="ivy:setup-runtime, 
	        ivy:setup-compile,
			test:ivy-init,
	        ivy:setup-static-analysis" description="Updates the local ivy repository for all build and test dependencies." />

	<target name="ivy:setup-runtime" depends="ivy:init">
		<ivy:resolve refresh="true" conf="runtime" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="runtime" />
	</target>

	<target name="ivy:setup-compile" depends="ivy:init">
		<ivy:resolve refresh="true" conf="compile" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="compile" />
	</target>

	<target name="build:all" depends="-pre-clean, -init, war, test, post-clean" description="Default target" />

	<!-- This will delete all of the files created by the build process -->
	<target name="-pre-clean">
		<delete dir="${classes.dir}" quiet="true" />
		<delete file="${target.dir}/${war.name}" quiet="false" />
	</target>

	<!-- This sets up all of the neccessary directories -->
	<target name="-init" depends="-pre-clean">
		<echo message=" ______   _       _     _  _______  ______  ______   _  _______  _______  ______    _  _  _  _______  ______   _______  ______  ______  " />
		<echo message="(____  \ (_)     (_)   (_)(_______)(_____ \(_____ \ | |(_______)(_______)/ _____)  (_)(_)(_)(_______)(____  \ (_______)(_____ \(_____ \ " />
		<echo message=" ____)  ) _       _     _  _____    _____) )_____) )| | _     _     _   ( (____     _  _  _  _____    ____)  ) _______  _____) )_____) )" />
		<echo message="|  __  ( | |     | |   | ||  ___)  |  ____/|  __  / | || |   | |   | |   \____ \   | || || ||  ___)  |  __  ( |  ___  ||  ____/|  ____/" />
		<echo message="| |__)  )| |_____| |___| || |_____ | |     | |  \ \ | || |   | |   | |   _____) )  | || || || |_____ | |__)  )| |   | || |     | |" />
		<echo message="|______/ |_______)\_____/ |_______)|_|     |_|   |_||_||_|   |_|   |_|  (______/    \_____/ |_______)|______/ |_|   |_||_|     |_|" />
		<mkdir dir="${blueprints-webapp.classes.dir}" />
		<mkdir dir="${tests.acceptance.classes.dir}" />
		<mkdir dir="${tests.acceptance.output.dir}" />
	</target>

	<target name="compile:application-code" depends="-init, ivy:setup-compile" description="Compiles all subproject code">
		<javac srcdir="${blueprints-webapp.java.dir}" destdir="${blueprints-webapp.classes.dir}" debug="true">
			<classpath refid="project.compile.classpath" />
		</javac>
	</target>

	<target name="war" depends="compile:application-code, ivy:setup-runtime">
		<war destfile="${target.dir}/${war.name}">
			<fileset dir="${blueprints-webapp.web.src.dir}" />
			<lib dir="${runtime.lib.dir}" includes="*.jar" />
			<classes dir="${blueprints-webapp.classes.dir}" />
		</war>
	</target>

	<target name="dist" depends="war" description="Copies WAR file to distribution folder">
		<copy todir="${dist.dir}" file="${target.dir}/${war.name}" />
	</target>

	<target name="post-clean">
		<delete dir="${blueprints-webapp.classes.dir}" quiet="false" />
	</target>







	<!-- ******************************************************************* -->
	<!-- ** TESTING TARGETS                                               ** -->
	<!-- ******************************************************************* -->

	<!-- This is a wrapper target for all test targets. TODO: Add unit, functional tests! -->
	<target name="test" description="Runs all tests" depends="
				-init,
				test:ivy-init,
				test:acceptance:fit,
				test:acceptance:fitnesse
				">
	</target>

	<!-- Fit:Begin -->
	<target name="test:acceptance:fit" depends="test:ivy-init, test:jar-acceptance-tests" description="Runs acceptance tests">
		<echo message="Running FIT tests..." />
		<java classname="fitlibrary.runner.FolderRunner" fork="yes" failonerror="yes">
			<arg value="${tests.acceptance.input.dir}" />
			<arg value="${tests.acceptance.output.dir}" />
			<classpath refid="project.test.acceptance.classpath" />
		</java>
	</target>

	<target name="test:compile-acceptance-tests" description="Compiles acceptance tests">
		<echo message="Compiling acceptance tests..." />
		<javac srcdir="${tests.dir}/acceptance/java" destdir="${tests.acceptance.classes.dir}" debug="true">
			<classpath refid="project.test.acceptance.classpath" />
		</javac>
	</target>

	<target name="test:jar-acceptance-tests" depends="test:compile-acceptance-tests" description="Packages acceptance tests into a JAR">
		<echo message="Packaging acceptance tests..." />
		<jar basedir="${tests.acceptance.classes.dir}" destfile="${lib.dir}/test-acceptance/${tests.acceptance.jar.name}" />
	</target>
	<!-- Fit:End -->


	<!-- Fitnesse:Begin -->
	<target name="test:acceptance:fitnesse" depends="-init, test:ivy-init" description="Runs fitnesse acceptance tests">
		<echo message="Starting FitNesse server..." />

		<parallel>

			<daemons>
				<java classname="fitnesse.FitNesse" classpathref="project.test.acceptance.classpath">
					<arg value="-l" />
					<arg value="${tests.acceptance.output.dir}" />
					<arg value="-p" />
					<arg value="${fitnesse.port}" />
					<arg value="-e" />
					<arg value="0" />
					<arg value="-d" />
					<arg value="${tests.acceptance.fitnesse.dir}" />
				</java>
			</daemons>

			<sequential>
				<echo message="Starting ${Fitnesse.Test.Page.Path} test suite..." level="info" />

				<sleep seconds="5" />
				<java classpathref="project.test.acceptance.classpath" classname="fitnesse.runner.TestRunner" fork="true" resultproperty="fit.test.failures">
					<arg value="-debug" />
					<arg value="-xml" />
					<arg value="${fitnesse.output.file}.xml" />
					<arg value="-html" />
					<arg value="${fitnesse.output.file}.html" />
					<arg value="-nopath" />
					<arg value="localhost" />
					<arg value="${fitnesse.port}" />
					<arg value="${Fitnesse.Test.Page.Path}" />
				</java>

				<!--
				<replace file="${fitnesse.output.file}.html" token="localhost:${fitnesse.port}" />
				-->

				<!--
				<echo message="Finished FitNesse tests: ${fit.test.failures} failures/exceptions" level="info" />
				<fail message="Fitnesse test failures/exceptions: ${fit.test.failures}">
					<condition>
						<not>
							<equals arg1="${fit.test.failures}" arg2="0" />
						</not>
					</condition>
				</fail>
				-->
				<!-- This will fail the build if the return code was not Zero, which means there were errors or exceptions -->
			</sequential>

		</parallel>
	</target>
	<!-- Fitnesse:End -->

	<target name="test:ivy-init" depends="
			ivy:init,
			test:ivy-test-junit,
			test:ivy-test-selenium,
			test:ivy-test-acceptance,
			test:ivy-test-cobertura
			" />

	<target name="test:ivy-test-junit" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-junit" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-junit" />
		<path id="project.test.junit.classpath">
			<fileset dir="${lib.dir}/test-junit">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="test:ivy-test-selenium" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-selenium" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-selenium" />
		<path id="project.test.selenium.classpath">
			<fileset dir="${lib.dir}/test-selenium">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="test:ivy-test-acceptance" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-acceptance" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-acceptance" />
		<path id="project.test.acceptance.classpath">
			<fileset dir="${lib.dir}/test-acceptance">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="test:ivy-test-cobertura" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-cobertura" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-cobertura" />
		<path id="cobertura.classpath">
			<fileset dir="${lib.dir}/test-cobertura">
				<include name="*.jar" />
			</fileset>
		</path>
		<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
	</target>

</project>
