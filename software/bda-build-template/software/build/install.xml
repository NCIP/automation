<?xml version="1.0" encoding="UTF-8"?>
<!-- bda-build-template version 1.8.0-beta -->
<!--
$Id$
$HeadURL$
-->
<project xmlns:ivy="antlib:org.apache.ivy.ant" basedir="." default="upgrade" name="bda-blueprints-installer">
	<description>
		This build file is part of the bda-build-templates project. This is the master install file for the project.  It should be placed in project/software.  This script is copied into the distribution and  executed from the extracted distribution.  It is run by typing "ant" from the master project build.xml or from command line. This script has two flows install and upgrade.
		Install will do the following
 			* Install binaries
			* Configure binaries
			* Install application
			* Configure application
			* Re-create database
			* Upgrade database
		Upgrade will do the following
			* Install application
			* Configure application
			* Upgrade database
		The script includes target that may not be used by all projects, but are included in here becaue it is a template. This script has targets to deal with the following, you can delete targets you don't want to work with
		Application servers (option for grid services also)
			* JBoss
			* Tomcat
		Databases
			* MySQL
			* PostgreSQL
			* Oracle
		This script requires java and ant to run. Every thing else it needs is included in the distribution.
	</description>

	<!-- Properties file related properties and tasks -->
	<echo message="Passed in properties file of ${properties.file}."/>
	<property environment="env"/>
	<property file="local.properties"/>
	<property file="project.properties"/>
	<!-- load the properties file -->
	<property name="properties.file" value="${basedir}/install.properties"/>
	<echo message="Using properties file of ${properties.file}."/>
	<available file="${properties.file}" property="properties.file.exists"/>
	<fail message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail." unless="properties.file.exists"/>
	<replaceregexp byline="true" file="${properties.file}" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
	<replaceregexp byline="true" file="${properties.file}" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
	<property file="${properties.file}"/>

	<!-- Generic properties -->
	<property name="project.name" value="bda-blueprints"/>
	<property name="env.name" value="local"/>
	<property location="${basedir}/logs" name="log.dir"/>
	<property location="${basedir}/working" name="working.dir"/>
	<property location="${working.dir}/temp" name="temp.dir"/>
    <property name="copied.jboss.log4j.dir" value="${working.dir}/copied-log4j"/>


	<!-- Install Time properties -->
	<!-- Source and target directories -->
	<property location="${basedir}/bda-utils" name="bda-utils.dir"/>
	<property location="${basedir}/${tools.dist.relative.dir}" name="tools.dir"/>
	<property location="${basedir}/${common.dist.relative.dir}" name="common.dir.src"/>
	<property location="${working.dir}/${common.dist.relative.dir}" name="common.dir.dest"/>
	<property location="${basedir}/${db.dist.relative.dir}" name="db.dir.src"/>
	<property location="${working.dir}/${db.dist.relative.dir}" name="db.dir.dest"/>
	<property location="${working.dir}/${db-install.dist.relative.dir}" name="db-install.dir.dest"/>
	<property location="${working.dir}/${db-upgrade.dist.relative.dir}" name="db-upgrade.dir.dest"/>
	<property location="${basedir}/${jboss-conf.dist.relative.dir}" name="jboss-conf.dir.src"/>
	<property location="${working.dir}/${jboss-conf.dist.relative.dir}" name="jboss-conf.dir.dest"/>
	<property location="${basedir}/${sync-gts.dist.relative.dir}" name="sync-gts.dir"/>
	<property location="${sync-gts.dir}/syncgts" name="sync-gts.build.dir"/>
	<property location="${basedir}/cagrid-target" name="cagrid-target.dir"/>

	<!-- *-ds.xml and WAR -->
	<property location="${basedir}/${bda-blueprints-webapp.dist.relative.dir}" name="bda-blueprints-webapp.dir.dist"/>
	<property name="bda-blueprints-webapp.ds.file" value="bda-blueprints-ds.xml"/>
	<property name="bda-blueprints-webapp.name" value="bda-blueprints-webapp"/>
	<property name="bda-blueprints-webapp.war.file" value="${bda-blueprints-webapp.name}.war"/>
	<!-- Added to make sure that it works with both absolute and relative paths, this property is handed to sub-project scripts in absolute format. -->
	<property location="${jar-signing.keystore.location}" name="jar-signing.keystore.abs-location"/>

	<!-- Grid related properties -->
	<property location="${basedir}/${tools.dist.relative.dir}" name="grid.resource.dir"/>
	<property location="${basedir}/${grid-sample.dist.relative.dir}" name="grid.application.dir"/>
	<property name="grid.artifact.file" value="sample-wsrf-war.zip"/>
	<property name="grid.dir.dest.jboss" value="wsrf.war"/>
	<property name="grid.dir.dest.tomcat" value="wsrf"/>
	<property name="grid.application.name" value="Sample"/>
	<property name="resource.file.jboss-globus-lib" value="${cagrid-libs.binaries.file}"/>
	<property name="resource.file.jboss-globus-war" value="${cagrid-base-war.binaries.file}"/>

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	<!-- Task definitions -->
	<taskdef classpathref="bda-utils.classpath" resource="org/apache/ant/antunit/antlib.xml" uri="antlib:org.apache.ant.antunit"/>
	<taskdef classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils.classpath" name="for"/>
	<taskdef classpathref="bda-utils.classpath" resource="net/sf/antcontrib/antcontrib.properties"/>
	<taskdef classpathref="bda-utils.classpath" resource="liquibasetasks.properties"/>
	<taskdef classname="org.codehaus.groovy.ant.Groovy" classpathref="bda-utils.classpath" name="groovy"/>

	<!-- Includes-->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml"/>

	<!-- Clean/make working dir -->
	<delete dir="${working.dir}" failonerror="false"/>
	<mkdir dir="${working.dir}"/>

	<!-- Start logging moved out of target so all targets are logged -->
	<!--<property name="install-logs.dir" location="${application.base.path}/change-logs"/> -->
	<property location="${log.dir}" name="install-logs.dir"/>
	<mkdir dir="${install-logs.dir}"/>
	<tstamp>
		<format pattern="yyyy-MM-dd-HH-mm-ss" property="install.time"/>
	</tstamp>
	<record action="start" name="${install-logs.dir}/install-${install.time}.log"/>

	<target name="common:init:pre">
		<!-- Set application.base.path based on platform -->
		<condition property="application.base.path" value="${application.base.path.linux}">
			<or>
				<os family="unix"/>
				<os family="mac"/>
			</or>
		</condition>

		<condition property="application.base.path" value="${application.base.path.windows}">
			<os family="windows"/>
		</condition>
		<echo message="application.base.path=${application.base.path}"/>
		<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
		<jboss-version/>
		<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
		<tomcat-version/>
		<!-- Disable container.grid if container excluded or jdk is 1.6-->
		<if>
			<or>
				<equals arg1="${exclude.jboss}" arg2="true"/>
				<equals arg1="${jboss.major.version}" arg2="5"/>
			</or>
			<then>
				<property name="exclude.jboss.grid" value="true"/>
			</then>
		</if>
		<if>
			<or>
				<equals arg1="${exclude.tomcat}" arg2="true"/>
				<equals arg1="${tomcat.major.version}" arg2="6"/>
			</or>
			<then>
				<property name="exclude.tomcat.grid" value="true"/>
			</then>
		</if>
	</target>
	<!-- Targets begin -->
	<target depends="common:init:pre" name="install:jboss:init" unless="exclude.jboss">
		<!-- determine if port configurations or port lists are being called -->
		<if>
			<isset property="jboss.ncicb-standard.port-config"/>
			<then>
				<!-- Read some port properties from standard bindings file -->
				<echo message="Using JBoss NCICB Standard port configurations"/>
				<if>
					<equals arg1="${jboss.major.version}" arg2="4"/>
					<then>
						<property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
						<jboss-read-ports jboss.server.bindingfile.location="${jboss.server.binding.template.location}"/>
						<jboss-bindings-validate jboss.server.bindingfile.location="${jboss.server.binding.template.location}"/>
					</then>
					<elseif>
						<equals arg1="${jboss.major.version}" arg2="5"/>
						<then>
							<property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
							<property name="jboss.server.bindingfile.location" value="${jboss.home}/server/${jboss.server.name}/conf/bindingservice.beans/META-INF/bindings-jboss-beans.xml"/>
							<property name="temp.ejb.file" value="${temp.dir}/ejb3-connectors-jboss-beans.xml"/>
							<copy file="${bda-utils.dir}/resource/jboss-5.1.0.GA/ejb3-connectors-jboss-beans.xml" tofile="${temp.ejb.file}"/>
							<!--
							<jboss51-bindings-nci
								jboss.server.bindingfile.location="${jboss-bindings.file}"
								/>
							-->
							<jboss51-read-ports-nci jboss.server.bindingfile.location="${jboss-bindings.file}" jboss.server.ejbfile.location="${temp.ejb.file}"/>
						</then>
					</elseif>
				</if>
				<echo message="http -${jboss.server.port} "/>
				<echo message="http -${jboss.server.jndi.port} "/>
				<properties-exist properties.list="jboss.server.jndi.port,jboss.server.port,jboss.server.ports.name"/>
			</then>
			<else>
				<!-- else ensure that all ports are set, since these will be removed from install-properties.template we will verify here.  They have to be removed so the validator works with or without the properties or we have to change the format of the file. -->
				<echo message="Using custom JBoss port configurations"/>
				<if>
					<equals arg1="${jboss.major.version}" arg2="4"/>
					<then>
						<property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
					</then>
					<else>
						<property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings-jboss-beans.xml"/>

					</else>
				</if>
				<properties-exist properties.list="jboss.server.jndi.port,jboss.server.port,jboss.cobraorb.port,jboss.hajndi.port,jboss.hajrmi.port,jboss.jmx-rmi.port,jboss.messaging.port,jboss.pooledha.port,jboss.server.bind.port,jboss.server.rmi.port,jboss.service.rmiobject.port,jboss.snmp.port,jboss.snmp-trapd.port,jboss.web.service.port,jboss.unifiedinvoker.port,jboss.hajndi.auto.port,jboss.ssl.port,jboss.jms2.netty.port,jboss.jms2.netty-ssl.port,jboss.transaction.recovery.port,jboss.transaction.status.port,jboss.transaction.processid.port"/>
			</else>
		</if>
		<if>
			<equals arg1="${jboss.http-connector.remove}" arg2="true"/>
			<then>
				<property name="jboss.application.url" value="https://${jboss.server.hostname}:${jboss.grid.secure.port}/${bda-blueprints-webapp.name}"/>
			</then>
			<else>
				<property name="jboss.application.url" value="http://${jboss.server.hostname}:${jboss.server.port}/${bda-blueprints-webapp.name}"/>
			</else>
		</if>
	</target>
	<target depends="common:init:pre,common:jboss:grid:init" name="common:jboss:init" unless="exclude.jboss">
		<property name="jboss.ssl.enable" value="false"/>
		<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
		<jboss-version/>
		<available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
		<basename file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.file"/>
		<dirname file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.dir"/>
		<basename file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.cert.file"/>
		<dirname file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.dir"/>
		<basename file="${jboss.grid.secure.key.location}" property="jboss.grid.secure.key.file"/>
		<property name="jboss.socket.ports" value="${jboss.server.port},${jboss.server.rmi.port},${jboss.server.jndi.port},${jboss.service.rmiobject.port},${jboss.jms.port},${jboss.web.service.port}"/>
	</target>
	<target depends="common:init:pre" name="common:jboss:grid:init" unless="exclude.jboss">
		<if>
			<isset property="exclude.jboss.grid"/>
			<then>
				<property name="jboss.grid.enable" value="false"/>
			</then>
			<else>
				<property name="jboss.grid.enable" value="true"/>
			</else>
		</if>
	</target>
	<target depends="common:init:pre,common:tomcat:grid:init" name="common:tomcat:init" unless="exclude.tomcat">
		<property name="tomcat.ssl.enable" value="false"/>
		<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
		<tomcat-version/>
		<if>
			<equals arg1="${jboss.http-connector.remove}" arg2="true"/>
			<then>
				<property name="tomcat.application.url" value="http://${tomcat.hostname}:${tomcat.port.http}/${bda-blueprints-webapp.name}"/>
			</then>
			<else>
				<property name="tomcat.application.url" value="https://${tomcat.hostname}:${tomcat.grid.secure.port}/${bda-blueprints-webapp.name}"/>
			</else>
		</if>

		<basename file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.file"/>
		<dirname file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.dir"/>
		<basename file="${tomcat.grid.secure.cert.location}" property="tomcat.grid.secure.cert.file"/>
		<dirname file="${tomcat.grid.secure.cert.location}" property="tomcat.grid.secure.dir"/>
		<basename file="${tomcat.grid.secure.key.location}" property="tomcat.grid.secure.key.file"/>
		<property name="tomcat.sock.ports" value="${tomcat.port.http},${tomcat.port.ajp},${tomcat.port.shutdown}"/>
	</target>
	<target depends="common:init:pre" name="common:tomcat:grid:init" unless="exclude.tomcat">
		<if>
			<isset property="exclude.tomcat.grid"/>
			<then>
				<property name="tomcat.grid.enable" value="false"/>
			</then>
			<else>
				<property name="tomcat.grid.enable" value="true"/>
			</else>
		</if>
	</target>


	<target depends="common:init:pre" name="common:init">
		<!-- bda-blueprints-webapp can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
		<echoproperties prefix="database"> <propertyset negate="yes"> <propertyref regex="passw"/> </propertyset> </echoproperties>
		<switch value="${database.type}">
			<case value="oracle">
				<property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
				<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
				<property name="database.schema" value="${database.user}"/>
			</case>
			<case value="mysql">
				<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.8.jar"/>
				<property name="database.driver" value="com.mysql.jdbc.Driver"/>
				<property name="database.schema" value="${database.name}"/>
			</case>
			<case value="postgresql">
				<property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/postgresql-8.4-701.jdbc3.jar"/>
				<property name="database.driver" value="org.postgresql.Driver"/>
				<property name="database.schema" value="public"/>
			</case>
			<default>
				<fail message="Invalid database type ${database.type}"/>
			</default>
		</switch>

		<path id="jdbc.driver.classpath">
			<pathelement location="${database.driver.file}"/>
		</path>

		<property name="properties.template.file" value="${basedir}/properties.template"/>
		<property file="${basedir}/cagrid-target/${grid.target}/service_urls.properties"/>
		<set-grid-auth-service/>
		<property name="grid.index.url" value="${cagrid.master.index.service.url}"/>
		<filterset id="embedded.filterset">
			<filter token="application.base.path" value="${application.base.path}"/>
			<filter token="application.url" value="${application.url}"/>
			<filter token="database.url" value="${database.url}"/>
			<filter token="database.user" value="${database.user}"/>
			<filter token="database.password" value="${database.password}"/>
			<filter token="database.system.url" value="${database.system.url}"/>
			<!-- added internal properties that may be used in a filtered copy -->
			<filter token="database.driver" value="${database.driver}"/>
			<!-- added for liquibase -->
			<filter token="db-upgrade.run.dir" value="${db-upgrade.dir.dest}/${database.type}"/>
			<filter token="jboss.home" value="${jboss.home}"/>
			<filter token="tomcat.home" value="${tomcat.home}"/>
			<filter token="database.dialect" value="${database.dialect}"/>
			<filter token="hibernate.cfg.file.path" value="${hibernate.cfg.file.path}"/>
			<filter token="env.LOGNAME" value="${env.LOGNAME}"/>
			<filter token="env.JAVA_HOME" value="${env.JAVA_HOME}"/>
			<filter token="project.name" value="${project.name}"/>
			<filter token="grid.dorian.name" value="${grid.target}-Dorian"/>
			<filter token="grid.dorian.url" value="${cagrid.master.dorian.service.url}"/>
			<filter token="grid.auth.service.url" value="${grid.auth.service.url}"/>
			<filter token="grid.auth.service.name" value="${grid.auth.service.name}"/>
			<filter token="" value=""/>
		</filterset>

		<!--OS Temp dir -->
		<condition property="os.temp.dir" value="/tmp/${project.name}">
			<or>
				<os family="unix"/>
				<os family="mac"/>
			</or>
		</condition>

		<condition property="os.temp.dir" value="c:/temp/${project.name}">
			<os family="windows"/>
		</condition>
		<echo message="os.temp.dir - ${os.temp.dir}"/>
		<!-- Copy files to ensure values containing variables are expanded, such properties are stored in embedded.filterset and then copy with filter files -->
		<copy filtering="true" todir="${common.dir.dest}">
			<fileset dir="${common.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>
	</target>

	<target name="diag">
		<echoproperties> <propertyset negate="yes"> <propertyref regex="passw"/> </propertyset> </echoproperties>
	</target>

	<!-- Clean up destination directory -->
	<target depends="common:init,install:jboss:clean,install:tomcat:clean" description="Removes all files from the local filesystem" name="install:common:clean">
	</target>

	<target depends="common:jboss:init,common:init" name="install:jboss:clean" unless="exclude.jboss">
		<sleep seconds="5"/>
		<property name="backup.count" value="5"/>

		<if>
			<not>
				<equals arg1="${exclude.jboss.backup}" arg2="true"/>
			</not>
			<then>
				<!-- Jboss backup, do not compress until install is finished -->
				<property location="${application.base.path}/backup/jboss" name="backup.jboss.base.dir"/>

				<!-- So these directories won't be included in the backup, they are not needed to use jboss -->
				<delete dir="${jboss.home}/server/${jboss.server.name}/work"/>
				<delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>

				<backup-dir backup.base.dir="${backup.jboss.base.dir}" backup.count="${backup.count}" src.dir="${jboss.home}"/>
			</then>
		</if>
		<delete dir="${jboss.home}"/>
	</target>

	<target depends="common:tomcat:init" name="install:tomcat:clean" unless="exclude.tomcat">
		<sleep seconds="5"/>
		<property name="backup.count" value="5"/>
		<if>
			<not>
				<equals arg1="${exclude.tomcat.backup}" arg2="true"/>
			</not>
			<then>
				<property location="${application.base.path}/backup/tomcat" name="backup.tomcat.base.dir"/>

				<backup-dir backup.base.dir="${backup.tomcat.base.dir}" backup.count="${backup.count}" src.dir="${tomcat.home}"/>
			</then>
		</if>
		<delete dir="${tomcat.home}"/>
	</target>


	<!-- Wrapper install database target, depends on both MySQL and Oracle sub-targets, ifs should ensure only one is run.  Target path can be skipped by exlude.database also calls upgrade:database -->

	<target depends="common:init" description="Copies db files with filtering" name="install:database:prep" unless="exclude.database">
		<property name="db.prop.list" value="database.url,database.user,database.password,database.name"/>
		<echo message="Checking if database properties exist: ${db.prop.list}"/>
		<properties-exist properties.list="${db.prop.list}"/>
		<echoproperties prefix="database"> <propertyset negate="yes"> <propertyref regex="passw"/> </propertyset> </echoproperties>
		<copy filtering="true" todir="${db.dir.dest}">
			<fileset dir="${db.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>
		<mkdir dir="${os.temp.dir}/${project.name}"/>
		<copy filtering="true" flatten="true" overwrite="true" todir="${os.temp.dir}/${project.name}">
			<fileset dir="${db.dir.dest}">
				<include name="**/db-upgrade.xml"/>
			</fileset>
		</copy>
	</target>

	<target depends="    common:init,   install:database:prep,   install:database:validation:pre-install   " description="Runs datbase creation scripts then calls uprade database." name="install:database" unless="exclude.database">
		<!-- Drop all schema objects or re-create the db -->
		<database-clean/>
		<!-- Run baseline scripts stored in db.install.create.${database.type}.file.list variable -->
		<switch value="${database.type}">
			<case value="oracle">
				<database-install db.install.create.file.list="${db.install.create.oracle.file.list}" sql.delimiter="/" sql.delimitertype="row"/>
			</case>
			<case value="postgresql">
				<database-install db.install.create.file.list="${db.install.create.postgresql.file.list}" sql.delimiter="/" sql.delimitertype="row"/>
			</case>
			<case value="mysql">
				<database-install db.install.create.file.list="${db.install.create.mysql.file.list}"/>
			</case>
		</switch>
		<database-upgrade database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"/>
		<database-tag/>
	</target>

	<target depends="common:jboss:init, common:init" description="Install JBoss binaries" name="install:jboss:binaries" unless="exclude.jboss">
		<jboss-install-binaries/>
		<jboss-nci-customizations/>
	</target>

	<target depends="common:jboss:init, common:init" name="install:jboss:bda-blueprints-webapp:filesystem-data" unless="exclude.jboss">
		<!-- This target is a place holder for creating a file-system data repository.  If you do not use one you can remove this target and all targets that refer to it. If you require a certain directory structure be sure to create it here.  If you need to copy in files, make sure to check them into svn, copy them into the distribution and then copy them to thier ultimate directory.  If your data needs to be refreshed with each install make sure to delete the base directory, then create the structure and copy in data.  Also you can use an archive file with relative pathing inside to build out the structure if you like, using an archive like zip may shrink the footprint in svn.
		<mkdir dir="${fs-data.base.dir}"/>
		<mkdir dir="${fs-data.base.dir}/scratch"/>
		<copy file="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}" todir="${fs-data.base.dir}/scratch" overwrite="true" />
		-->
	</target>

	<target depends="common:jboss:init, common:init,install:jboss:bda-blueprints-webapp:filesystem-data" description="Deploy bda-blueprints-webapp and common libraries to jboss installation" name="install:jboss:bda-blueprints-webapp" unless="exclude.jboss">
		<!-- added to ensure working.dirs are fresh for our install -->
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>
		<delete dir="${jboss.home}/server/${jboss.server.name}/work"/>
		<move failonerror="false" file="${jboss.home}/server/${jboss.server.name}/log/server.log" tofile="${jboss.home}/server/${jboss.server.name}/log/server/log.${install.time}"/>

		<copy file="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}" overwrite="true" todir="${jboss.home}/server/${jboss.server.name}/deploy"/>
		<!--  Many NCI applications require clm for csm, so you can point this to where you have the version you want to use
		<copy file="${bda-utils.dir}/clm-3.2.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
		-->
		<copy file="${database.driver.file}" overwrite="true" todir="${jboss.home}/server/${jboss.server.name}/lib"/>
	</target>

	<target depends="common:jboss:init, common:init" description="Configure bda-blueprints-webapp application, copies over externalized properties or configurations that are not part of the jboss configuration" name="install:jboss:bda-blueprints-webapp:configure" unless="exclude.jboss">
		<!-- copy over any other files you may need to configure your application -->

		<!-- copy datasource file -->
		<copy file="${jboss-conf.dir.dest}/${bda-blueprints-webapp.ds.file}" overwrite="true" todir="${jboss.home}/server/${jboss.server.name}/deploy"/>
		<!-- copy JBoss-web.xml file -->
		<!--
		<copy file="${jboss-conf.dir.dest}/${jboss.web.xml.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		-->
		<!-- This code is for updating properties.service.xml, make sure to add ${line.separator} after each property def as the property delimiter, if this is not included you will not get the desired results. If you do not use properties service.xml you can delete this code. -->
		<var name="property.block" value="property1=${authentication.type}${line.separator}    property2=${env.name}${line.separator}    property3=${jboss.home}${line.separator}    property4=${tomcat.home}${line.separator}    "/>
		<copy file="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml" overwrite="true" tofile="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml.orig"/>
		<jboss-update-properties-service property.block="${property.block}"/>
	</target>

	<target depends="common:jboss:init, common:init" description="Configure custom entries in system wide log4j" name="install:jboss:configure:log4j" unless="exclude.jboss">
		<!--
		<echo message="Configuring Log4J"/>

		<property name="log4j.file.name" value="log4j.xml"/>
		<copy file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}" tofile="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}.pre"/>

		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
			byline="true"
			match="^(&lt;!DOCTYPE.*)"
			replace="&lt;!\-\-\1\-\-&gt;"
			/>

		<xmltask source="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
			dest="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}">
			<xmlcatalog refid="installer.catalog"/>
			<remove path="/log4j:configuration/appender[@name='TestAppender']"/>
			<insert path="/log4j:configuration/category"i position="before">
				<![CDATA[
				<appender name="TestAppender" class="org.jboss.logging.appender.RollingFileAppender">
					<errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
					<param name="File" value="${jboss.server.log.dir}/testAppender.log"/>
					<param name="Append" value="false"/>
					<param name="MaxFileSize" value="${log4j.maxFileSize}"/>
					<param name="MaxBackupIndex" value="${log4j.maxDays}"/>

					<layout class="org.apache.log4j.PatternLayout">
						<param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
					</layout>
				</appender>
				]]>
			</insert>
			<remove path="/log4j:configuration/category[@name='org.nih.nci']"/>
			<insert path="/log4j:configuration/root" position="before">
				<![CDATA[
				<category name="org.nih.nci">
					<priority value="${log4j.level}"/>
				</category>
				]]>
			</insert>
		</xmltask>
		<validate-log4j
			log4j.file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
			/>

		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
			byline="true"
			match="^&lt;!\-\-(&lt;!DOCTYPE.*)\-\-&gt;"
			replace="\1"
			/>
		-->
	</target>
	<target depends="   common:jboss:init,   common:init,   install:jboss:configure:log4j    " description="Configure JBoss (bindings, login-config.xml, ect)" name="install:jboss:configure" unless="exclude.jboss">
		<!-- Calls the following macros
			jboss-bindings - configures ports for jboss
			jboss-login-config - sets up authentication
			secure-jboss-console - adds password to jboss console apps
			jboss-update-shutdown - updates shutdown.jar with correct jndi port so no args need to used 4 shutdown
			appserver-ssl-configure -  enables ssl
			appserver-configure-external-hostname - configures jboss for use through a reverse proxy
			grid-secure-configure-connector - configures secure grid
		-->
		<!-- Use below if you are defining all the ports in your install.xml not the NCICB port configuraitons-->
		<if>
			<equals arg1="${jboss.major.version}" arg2="4"/>
			<then>
				<jboss-configure jboss.grid.configure="${jboss.grid.enable}"/>
				<if>
					<equals arg1="${jboss.cgmm.enable}" arg2="true"/>
					<then>
						<jboss-configure-cgmm/>
					</then>
				</if>
			</then>
		</if>
		<if>
			<equals arg1="${jboss.major.version}" arg2="5"/>
			<then>
				<!-- clean up ssl config from systems provided jboss -->
				<xmltask dest="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml" preservetype="true" source="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml">
					<xmlcatalog refid="bda.xml.catalog"/>
					<remove path="/Server/Service[@name='jboss.web']/Connector[@keystoreFile='${jboss.server.home.dir}/conf/keystore/server.keystore']"/>
				</xmltask>
				<jboss-configure jboss.grid.configure="false" jboss.server-xml.file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml" jboss.server.binding.template.location="${jboss.server.binding.template.location}" jboss.server.bindingfile.location="${jboss.home}/server/${jboss.server.name}/conf/bindingservice.beans/META-INF/bindings-jboss-beans.xml" proxy.update.connector.port.ssl="${jboss.ssl.port}"/>
				<!--
				<jboss51-encrypt-messaging-passwd
					/>
				-->
			</then>
		</if>
	</target>


	<!-- Configure MQ settings based on contents of ncia/software/resrouces/deploy/jbossmq-destinations-service.block.xml -->
	<target depends="common:jboss:init,common:init" description="Configure MQ settings based on contents of software/common/resource/jboss-conf/jbossmq-destinations-service.block.xml" name="-install:jboss:configure:jbossmq-dest" unless="exclude.jboss">
		<!-- Provide template to change jboss mq configurations
		<property name="jboss-mq.block.file" value="${resource.dir.target}/jbossmq-destinations-service.block.xml"/>
		<xmlconfig in="${jboss.home}/server/${jboss.server.name}/deploy/jms/jbossmq-destinations-service.xml" verbose="false">
			<insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[1]" />
			<insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[2]" />
		</xmlconfig>
		-->
	</target>


	<!-- Calls to bda macros for basic functionality -->
	<target depends="common:jboss:init,common:init" description="Stops jboss" name="install:jboss:stop" unless="exclude.jboss">
		<if>
			<isset property="jboss.exists"/>
			<then>
				<jboss-stop-jboss jboss.server.jndi.port="${jboss.server.jndi.port}"/>
			</then>
		</if>
	</target>

	<target depends="common:jboss:init,common:init" description="Starts jboss" name="install:jboss:start" unless="exclude.jboss">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<jboss-start-jboss/>
				<!--<sleep seconds="15"/>-->
			</then>
		</if>
	</target>
	<target depends="common:init" description="Runs pre-install validation checks bda-utils" name="install:common:validation:pre-install">
		<validate-pre-install-common ant.check.version="${ant.minimum.version}" java.check.version.major="${java.major.version}" java.check.version.minor="${java.minor.version}"/>
	</target>
	<target depends="   common:jboss:init,common:init,   install:common:validation:pre-install   " description="Runs pre-install validation checks bda-utils" name="install:jboss:validation:pre-install" unless="exclude.jboss">
		<validate-pre-install-jboss/>
	</target>
	<target depends="   common:tomcat:init,   common:init,   install:common:validation:pre-install   " description="Runs pre-install validation checks bda-utils" name="install:tomcat:validation:pre-install" unless="exclude.tomcat">
		<validate-pre-install-tomcat/>
	</target>
	<target depends="   common:init,   install:common:validation:pre-install   " description="Runs pre-install validation checks bda-utils" name="install:database:validation:pre-install">
		<validate-pre-install-database database.version="${mysql.minimum.version}"/>
	</target>


	<target depends="   common:init,   install:jboss:stop   " description="Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop" name="install:jboss:validation:pre-install:ports" unless="exclude.jboss">
		<validate-pre-jboss-ports/>
	</target>
	<target depends="   common:init,   install:tomcat:stop   " description="Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop" name="install:tomcat:validation:pre-install:ports" unless="exclude.tomcat">
		<validate-pre-tomcat-ports/>
	</target>

	<target depends="   common:init   " description="Run post-install checks from bda-utils" name="install:common:validation:post-install">
		<validate-post-common/>
	</target>
	<target depends="   common:jboss:init,   common:init,   install:jboss:start   " description="Run post-install checks from bda-utils" name="install:jboss:validation:post-install" unless="exclude.jboss">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<validate-post-jboss/>
			</then>
		</if>
	</target>
	<target depends="   common:tomcat:init,   common:init,   install:tomcat:start   " description="Run post-install checks from bda-utils" name="install:tomcat:validation:post-install" unless="exclude.tomcat">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<validate-post-tomcat/>
			</then>
		</if>
	</target>

	<!-- Wrapper target to deploy JBOSS container -->
	<target depends="   common:jboss:init,   common:init,   install:jboss:init,   install:jboss:validation:pre-install,   install:common:validation:pre-install,   install:jboss:stop,   install:jboss:validation:pre-install:ports,   install:jboss:clean,   install:jboss:binaries,   install:jboss:bda-blueprints-webapp:re-configure,   install:jboss:bda-blueprints-webapp,   install:jboss:bda-blueprints-webapp:configure,   install:jboss:configure,   install:jboss:grid,   install:jboss:grid:configure,   install:post:jboss,   install:jboss:start,   install:jboss:validation:post-install   " description="Wrapper scripts that calls all required targets to install the jboss container" name="install:jboss" unless="exclude.jboss">
	</target>

	<target depends="    common:tomcat:init,   common:init,   install:tomcat:validation:pre-install,   install:common:validation:pre-install,   install:tomcat:stop,   install:tomcat:validation:pre-install:ports,   install:tomcat:clean,   install:tomcat:binaries,   install:tomcat:configure,   install:tomcat:bda-blueprints-webapp:re-configure,   install:tomcat:bda-blueprints-webapp,   install:tomcat:bda-blueprints-webapp:configure,   install:tomcat:grid,   install:tomcat:grid:configure,   install:post:tomcat,   install:tomcat:start,   install:tomcat:validation:post-install   " description="Wrapper scripts that calls all required targets to install the tomcat container" name="install:tomcat" unless="exclude.tomcat">
	</target>

	<target depends="   common:jboss:init,   common:tomcat:init,    common:init,   install:jboss:init,   install:common:validation:pre-install,   install:jboss:validation:pre-install,   install:tomcat:validation:pre-install,   install:database:validation:pre-install,   install:jboss:stop,   install:tomcat:stop,   install:jboss:validation:pre-install:ports,   install:tomcat:validation:pre-install:ports,   install:common:clean,   install:database,   install:tomcat,   install:jboss,   install:common:post,   install:jboss:start,   install:common:validation:post-install   " description="Installs and configures JBOSS, creates database, and deploys application" name="install">
	</target>

	<target depends="common:init" description="Update contents of artifacts if not all properties have been externalized, by extracting artifact, modify it as needed and re-archive it." name="install:jboss:bda-blueprints-webapp:re-configure" unless="exclude.jboss">
		<copy file="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}" overwrite="true" todir="${jboss.home}/server/${jboss.server.name}/deploy"/>
		<if>
			<equals arg1="${jar-signing.execution.time}" arg2="install"/>
			<then>
				<echo message="jar-signing.execution.time set to install, signing jars"/>
				<sign-jars jars.archive.file="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}" jars.archive.relative.dir="WEB-INF/lib"/>
			</then>
			<else>
				<echo message="jar-signing.execution.time not set to install, not signing jars"/>
			</else>
		</if>
		<!-- This is only required if configuration files are not externalized, below is a sample of what you may do.
		<delete dir="${working.dir}/bda-blueprints-webapp"/>
		<unzip src="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}" dest="${working.dir}/bda-blueprints-webapp"/>
		<copy todir="${working.dir}/bda-blueprints-webapp/WEB-INF/classes" file="${jboss-conf.dir.dest}/hibernate.cfg.xml"/>

		<move file="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}" tofile="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}.orig"/>
		<war destfile="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}" compress="false" webxml="${working.dir}/bda-blueprints-webapp/WEB-INF/web.xml" >
			<fileset dir="${working.dir}/bda-blueprints-webapp">
				<include name="*/**" />
			</fileset>
		</war>
		-->
	</target>

	<!-- Generic targets to call appropriate upgrade path targets, just change the depends to use alternate ugprade path -->
	<target depends="upgrade:common:init,common:init,upgrade-dac:jboss" description="Wrapper target to call all targets required to upgrade jboss container." name="upgrade:jboss" unless="exclude.jboss">
	</target>

	<target depends="upgrade:common:init,common:init,upgrade-dac:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." name="upgrade:tomcat" unless="exclude.tomcat">
	</target>

	<target depends="upgrade:common:init,common:init,upgrade-ncm" description="Upgrades JBoss and Database" name="upgrade">
	</target>

	<target depends="upgrade:common:init,common:init,upgrade-ncm:with-dbinstall" description="Upgrades JBoss and Database" name="upgrade-with-dbinstall">
	</target>

	<!-- Upgrade with Disposable Application Conttainer (DAC) -->
	<target depends="   upgrade:jboss:init,   common:init,   common:jboss:init,   install:jboss:validation:pre-install,   install:common:validation:pre-install,   install:jboss:stop,   install:jboss:validation:pre-install:ports,   install:jboss:clean,   install:jboss:binaries,   install:jboss:configure,   install:jboss:bda-blueprints-webapp:re-configure,   install:jboss:bda-blueprints-webapp,   install:jboss:bda-blueprints-webapp:configure,   install:jboss:grid,   install:jboss:grid:configure,   upgrade:post:jboss,   install:post:jboss,   install:jboss:start,   install:jboss:validation:post-install   " description="Wrapper target to call all targets required to upgrade jboss container." name="upgrade-dac:jboss" unless="exclude.jboss">
	</target>
	<target depends="   upgrade:tomcat:init,   common:init,   common:tomcat:init,   install:tomcat:validation:pre-install,   install:common:validation:pre-install,   install:tomcat:stop,   install:tomcat:validation:pre-install:ports,   install:tomcat:clean,   install:tomcat:binaries,   install:tomcat:configure,   install:tomcat:bda-blueprints-webapp:re-configure,   install:tomcat:bda-blueprints-webapp,   install:tomcat:bda-blueprints-webapp:configure,   install:tomcat:grid,   install:tomcat:grid:configure,   upgrade:post:tomcat,   install:post:tomcat,   install:tomcat:start,   install:tomcat:validation:post-install   " description="Wrapper target to call all targets required to upgrade tomcat container." name="upgrade-dac:tomcat" unless="exclude.tomcat">
	</target>

	<target depends="   upgrade:common:init,   common:init,   common:jboss:init,   common:tomcat:init,   install:common:validation:pre-install,   install:jboss:validation:pre-install,   install:tomcat:validation:pre-install,   install:database:validation:pre-install,   install:jboss:stop,   install:tomcat:stop,   upgrade:database,   upgrade:jboss,   upgrade:tomcat,   install:common:validation:post-install   " description="Upgrades JBoss and Database" name="upgrade-dac">
	</target>

	<target depends="   upgrade:common:init,   common:init,   common:jboss:init,   common:tomcat:init,   install:common:validation:pre-install,   install:jboss:validation:pre-install,   install:tomcat:validation:pre-install,   install:database:validation:pre-install,   install:jboss:stop,   install:tomcat:stop,   install:database,   upgrade:jboss,   upgrade:tomcat,   install:common:validation:post-install   " description="Upgrades JBoss and Database" name="upgrade-dac:with-dbinstall">
	</target>
	<!-- Upgrade with Container Modification (CM) -->
	<target depends="   upgrade:jboss:init,   common:init,   common:jboss:init,   install:jboss:validation:pre-install,   install:common:validation:pre-install,   install:jboss:stop,   install:jboss:validation:pre-install:ports,   install:jboss:configure,   install:jboss:bda-blueprints-webapp:re-configure,   install:jboss:bda-blueprints-webapp,   install:jboss:bda-blueprints-webapp:configure,   install:jboss:grid,   install:jboss:grid:configure,   upgrade:post:jboss,   install:post:jboss,   install:jboss:start,   install:jboss:validation:post-install   " description="Wrapper target to call all targets required to upgrade jboss container." name="upgrade-cm:jboss" unless="exclude.jboss">
	</target>
	<target depends="   upgrade:tomcat:init,   common:init,   common:tomcat:init,   install:tomcat:validation:pre-install,   install:common:validation:pre-install,   install:tomcat:stop,   install:tomcat:validation:pre-install:ports,   install:tomcat:configure,   install:tomcat:bda-blueprints-webapp:re-configure,   install:tomcat:bda-blueprints-webapp,   install:tomcat:bda-blueprints-webapp:configure,   install:tomcat:grid,   install:tomcat:grid:configure,   upgrade:post:tomcat,   install:post:tomcat,   install:tomcat:start,   install:tomcat:validation:post-install   " description="Wrapper target to call all targets required to upgrade tomcat container." name="upgrade-cm:tomcat" unless="exclude.tomcat">
	</target>

	<target depends="   upgrade:common:init,   common:init,   common:jboss:init,   common:tomcat:init,   install:common:validation:pre-install,   install:jboss:validation:pre-install,   install:tomcat:validation:pre-install,   install:database:validation:pre-install,   install:jboss:stop,   install:tomcat:stop,   upgrade:database,   upgrade:jboss,   upgrade:tomcat,   install:common:validation:post-install   " description="Upgrades JBoss and Database" name="upgrade-cm">
	</target>

	<target depends="   upgrade:common:init,   common:init,   common:jboss:init,   common:tomcat:init,   install:common:validation:pre-install,   install:jboss:validation:pre-install,   install:tomcat:validation:pre-install,   install:database:validation:pre-install,   install:jboss:stop,   install:tomcat:stop,   install:database,   upgrade:jboss,   upgrade:tomcat,   install:common:validation:post-install   " description="Upgrades JBoss and Database" name="upgrade-cm:with-dbinstall">
	</target>
	<!-- Upgrade with No Container Modification (NCM) -->
	<target depends="   upgrade:jboss:init,   common:init,   common:jboss:init,   install:jboss:validation:pre-install,   install:common:validation:pre-install,   install:jboss:stop,   install:jboss:validation:pre-install:ports,   install:jboss:bda-blueprints-webapp:re-configure,   install:jboss:bda-blueprints-webapp,   install:jboss:bda-blueprints-webapp:configure,   install:jboss:grid,   install:jboss:grid:configure,   install:post:jboss,   install:jboss:start,   install:jboss:validation:post-install   " description="Wrapper target to call all targets required to upgrade jboss container." name="upgrade-ncm:jboss" unless="exclude.jboss">
	</target>
	<target depends="   upgrade:tomcat:init,   common:init,   common:tomcat:init,   install:tomcat:validation:pre-install,   install:common:validation:pre-install,   install:tomcat:stop,   install:tomcat:validation:pre-install:ports,   install:tomcat:bda-blueprints-webapp:re-configure,   install:tomcat:bda-blueprints-webapp,   install:tomcat:bda-blueprints-webapp:configure,   install:tomcat:grid,   install:tomcat:grid:configure,   install:post:tomcat,   install:tomcat:start,   install:tomcat:validation:post-install   " description="Wrapper target to call all targets required to upgrade tomcat container." name="upgrade-ncm:tomcat" unless="exclude.tomcat">
	</target>

	<target depends="   upgrade:common:init,   common:init,   common:jboss:init,   common:tomcat:init,   install:common:validation:pre-install,   install:jboss:validation:pre-install,   install:tomcat:validation:pre-install,   install:database:validation:pre-install,   install:jboss:stop,   install:tomcat:stop,   upgrade:database,   upgrade:jboss,   upgrade:tomcat,   install:common:validation:post-install   " description="Upgrades JBoss and Database" name="upgrade-ncm">
	</target>

	<target depends="   upgrade:common:init,   common:init,   common:jboss:init,   common:tomcat:init,   install:common:validation:pre-install,   install:jboss:validation:pre-install,   install:tomcat:validation:pre-install,   install:database:validation:pre-install,   install:jboss:stop,   install:tomcat:stop,   install:database,   upgrade:jboss,   upgrade:tomcat,   install:common:validation:post-install   " description="Upgrades JBoss and Database" name="upgrade-ncm:with-dbinstall">
	</target>

	<!-- static upgrade targets -->
	<target depends="   upgrade:database:init,   common:init,   install:database:prep,   install:database:validation:pre-install   " description="Upgrades database using BDA Datbase Upgrade process." name="upgrade:database" unless="exclude.database">
		<database-upgrade database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"/>
		<database-tag/>
	</target>


	<target depends="   upgrade:database:init,   common:init,   install:database:prep   " description="Tags current state of database with a tag to allow for rollback of database to previous versions." name="upgrade:database:tag" unless="exclude.database">
		<database-tag/>
	</target>

	<target depends="   upgrade:database:init,   common:init,   install:database:prep   " description="Rolls back database to previous tagged version using rollback scripts." name="upgrade:database:rollback" unless="exclude.database">
		<database-rollback/>
	</target>

	<!-- Targets below are provided to handle tomcat and grid installations, however many projects do not use either of these so they have been moved to the end of the script. -->
	<!-- tomcat targets -->
	<target depends="common:init" description="Install tomcat binaries" name="install:tomcat:binaries" unless="exclude.tomcat">
		<delete dir="${tomcat.home}"/>
		<dirname file="${tomcat.home}" property="tomcat.base.dir"/>
		<unzip dest="${tomcat.base.dir}" src="${tools.dir}/${tomcat.binaries.file}"/>
		<tomcat-nci-customizations/>
		<if>
			<os family="unix"/>
			<then>
				<chmod dir="${tomcat.home}/bin" includes="**/*.sh" perm="ugo+rx"/>
			</then>
		</if>
	</target>

	<target depends="common:init" description="Configure tomcat (change ports)" name="install:tomcat:configure" unless="exclude.tomcat">
		<!-- need to pass ports for new override functionality.  It appears macros attribute defaults get initialized at load time not and invoke.  When I changed the value of the property then called the macro the old values were being used. -->
		<tomcat-configure tomcat.grid.configure="${tomcat.grid.enable}" tomcat.port.ajp="${tomcat.port.ajp}" tomcat.port.http="${tomcat.port.http}" tomcat.port.shutdown="${tomcat.port.shutdown}" tomcat.port.ssl="${tomcat.port.ssl}"/>
	</target>

	<target depends="common:init" description="Stop Tomcat" name="install:tomcat:stop" unless="exclude.tomcat">
		<if>
			<available file="${tomcat.home}/bin/shutdown.sh"/>
			<then>
				<echo message="Shutting down tomcat"/>
				<tomcat-stop tomcat.home="${tomcat.home}"/>
			</then>
			<else>
				<echo message="Tomcat not found , not shutting down tomcat"/>
			</else>
		</if>
	</target>

	<target depends="common:init" description="Start Tomcat" name="install:tomcat:start" unless="exclude.tomcat">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<tomcat-start tomcat.home="${tomcat.home}"/>
			</then>
		</if>
	</target>


	<!-- Grid Targets for jboss and tomcat -->

	<target depends="    common:init,   install:jboss:grid,   install:jboss:grid:configure  " description="Wrapper target for Grid application targets" name="install:bda-blueprints-grid" unless="exclude.jboss.grid">
	</target>

	<target depends="common:init" description="Deploy grid to tomcat" name="install:tomcat:grid" unless="exclude.tomcat.grid">
		<mkdir dir="${tomcat.home}/webapps/${grid.dir.dest.tomcat}"/>
		<!--
		<unzip dest="${tomcat.home}/common/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}">
			<patternset>
				<exclude name="**/cog-tomcat.jar"/>
			</patternset>
		</unzip>
		<unzip dest="${tomcat.home}/server/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}" >
			<patternset>
				<include name="**/cog-tomcat.jar"/>
			</patternset>
		</unzip>
		<unzip dest="${tomcat.home}/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}" >
			<patternset>
				<include name="**/cog-tomcat.jar"/>
			</patternset>
		</unzip>
		-->
		<unzip dest="${tomcat.home}/common/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}"/>
		<unzip dest="${tomcat.home}/server/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}"/>
		<unzip dest="${tomcat.home}/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}"/>
		<!-- Needed for Valve on tomcat 6.0.x -->
		<copy todir="${tomcat.home}/lib">
			<fileset dir="${bda-utils.dir}">
				<include name="commons-logging*"/>
			</fileset>
		</copy>
		<unzip dest="${tomcat.home}/webapps/${grid.dir.dest.tomcat}" src="${grid.resource.dir}/${resource.file.jboss-globus-war}"/>
		<unzip dest="${tomcat.home}/webapps/${grid.dir.dest.tomcat}" src="${grid.application.dir}/${grid.artifact.file}"/>
	</target>

	<target depends="common:init" description="Configure tomcat-application" name="install:tomcat:grid:configure" unless="exclude.tomcat.grid">
		<!--
		<grid-appserver-configure
			appserver.conf.dir="${tomcat.home}/conf"
			appserver.webapp.dir="${tomcat.home}/webapps"
			appserver.server-xml.file="${tomcat.home}/conf/server.xml"
			appserver.server-xml.service.name="Catalina"
			appserver.port.http="${tomcat.port.http}"
			appserver.port.ssl="${tomcat.port.ssl}"
			appserver.hostname="${tomcat.hostname}"
			appserver.external.http.host="${tomcat.external.http.host}"
			grid.external.secure.host="${grid.external.secure.host}"
			grid.external.secure.port="${grid.external.secure.port}"
			/>
		-->
		<mkdir dir="${basedir}/lib"/>
		<tomcat-configure-grid grid.application.relative.dir="${grid.dir.dest.tomcat}"/>
	</target>

	<target depends="common:init" description="Deploy  to jboss" name="install:jboss:grid" unless="exclude.jboss.grid">
		<mkdir dir="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest.jboss}"/>
		<unzip dest="${jboss.home}/server/${jboss.server.name}/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}"/>
		<unzip dest="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest.jboss}" src="${grid.resource.dir}/${resource.file.jboss-globus-war}"/>
		<unzip dest="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest.jboss}" src="${grid.application.dir}/${grid.artifact.file}"/>
	</target>

	<target depends="common:init" description="Configure tomcat-application" name="install:jboss:grid:configure" unless="exclude.jboss.grid">
		<jboss-configure-grid grid.application.relative.dir="${grid.dir.dest.jboss}"/>
	</target>

	<target depends="common:init,install:post:jboss, install:post:tomcat" name="install:common:post">
	</target>

	<target depends="common:init" name="install:post:jboss" unless="exclude.jboss">
		<if>
			<not>
				<equals arg1="${exclude.jboss.backup}" arg2="true"/>
			</not>
			<then>
				<if>
					<available file="${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}/bin/run.sh"/>
					<then>
						<echo message="Producing changelog"/>
						<report-dir-diff dir1="${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}" dir2="${jboss.home}" reportFile="${install-logs.dir}/chagneLog-jboss-${install.time}.diff"/>
					</then>
					<else>
						<echo message="It appears your jboss backup is incomplete, skipping change log."/>
					</else>
				</if>
				<!-- Copy app server logs -->
				<mkdir dir="${jboss.home}/server/${jboss.server.name}/log"/>
				<mkdir dir="${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}/server/${jboss.server.name}/log"/>
				<!-- so the logs wont be included in the zip -->
				<move todir="${jboss.home}/server/${jboss.server.name}/log">
					<fileset dir="${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}/server/${jboss.server.name}/log">
						<include name="*"/>
					</fileset>
				</move>

				<!-- Compress backup and cleanup -->
				<mkdir dir="${backup.jboss.base.dir}/backup1"/>
				<zip basedir="${backup.jboss.base.dir}/backup" destfile="${backup.jboss.base.dir}/backup1/${jboss.binaries.relative.dir}.zip"/>
				<delete dir="${backup.jboss.base.dir}/backup"/>
			</then>
		</if>
	</target>

	<target depends="common:init" name="install:post:tomcat" unless="exclude.tomcat">
		<if>
			<not>
				<equals arg1="${exclude.tomcat.backup}" arg2="true"/>
			</not>
			<then>
				<if>
					<available file="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/bin/startup.sh"/>
					<then>
						<echo message="Producing changelog"/>
						<report-dir-diff dir1="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}" dir2="${tomcat.home}" reportFile="${install-logs.dir}/changeLog-tomcat-${install.time}.diff"/>
					</then>
					<else>
						<echo message="It appears your Tomcat backup is incomplete, skipping change log"/>
					</else>
				</if>

				<!-- not needed for tomcat
				<mkdir dir="${tomcat.home}/server/${tomcat.server.name}/log"/>
				<mkdir dir="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log"/>
				<copy todir="${tomcat.home}/server/${tomcat.server.name}/log">
					<fileset dir="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log">
						<include name="*"/>
					</fileset>
				</copy>
				-->
				<!-- Compress backup and cleanup -->
				<mkdir dir="${backup.tomcat.base.dir}/backup1"/>
				<zip basedir="${backup.tomcat.base.dir}/backup" destfile="${backup.tomcat.base.dir}/backup1/${tomcat.binaries.relative.dir}.zip"/>
				<delete dir="${backup.tomcat.base.dir}/backup"/>
			</then>
		</if>
	</target>
	<target depends="common:init" description="Deploy bda-blueprints-webapp and common libraries to tomcat installation" name="install:tomcat:bda-blueprints-webapp" unless="exclude.tomcat">
		<delete dir="${tomcat.home}/temp"/>
		<delete dir="${tomcat.home}/work"/>
		<copy file="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}" overwrite="true" todir="${tomcat.home}/webapps"/>
		<!--  Many NCI applications require clm for csm, so you can point this to where you have the version you want to use
		<copy file="${bda-utils.dir}/clm-3.2.jar" todir="${tomcat.home}/server/${tomcat.server.name}/lib" overwrite="true" />
		-->
		<copy file="${database.driver.file}" overwrite="true" todir="${tomcat.home}/common/lib"/>
	</target>

	<target depends="common:init" description="Configure bda-blueprints-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration" name="install:tomcat:bda-blueprints-webapp:configure" unless="exclude.tomcat">
		<!-- configure datasource -->
	</target>
	<target depends="common:init" description="Configure bda-blueprints-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration" name="install:tomcat:bda-blueprints-webapp:re-configure" unless="exclude.tomcat">
	</target>

	<target depends="upgrade:jboss:init, upgrade:tomcat:init" name="upgrade:common:init">
	</target>
	<target depends="   upgrade:jboss:init:prep,   upgrade:jboss:readers:bda,   upgrade:jboss-grid:readers:bda,   upgrade:jboss:readers:custom   " name="upgrade:jboss:init" unless="exclude.jboss">
		<properties-print properties.list="${read.properties.list}"/>
		<properties-exist properties.list="${read.properties.list}"/>
		<properties-write properties.list="${read.properties.list}"/>
		<if>
			<equals arg1="${jboss.http-connector.remove}" arg2="true"/>
			<then>
				<property name="jboss.application.url" value="https://${jboss.server.hostname}:${jboss.grid.secure.port}/${bda-blueprints-webapp.name}"/>
			</then>
			<else>
				<property name="jboss.application.url" value="http://${jboss.server.hostname}:${jboss.server.port}/${bda-blueprints-webapp.name}"/>
			</else>
		</if>
	</target>
	<target depends="   upgrade:tomcat:init:prep,   upgrade:tomcat:readers:bda,   upgrade:tomcat-grid:readers:bda,   upgrade:tomcat:readers:custom   " name="upgrade:tomcat:init" unless="exclude.tomcat">
		<properties-print properties.list="${read.properties.list}"/>
		<properties-exist properties.list="${read.properties.list}"/>
		<properties-write properties.list="${read.properties.list}"/>
	</target>
	<target depends="   upgrade:jboss:init:prep,   upgrade:database:readers:bda,   upgrade:database:readers:custom   " name="upgrade:database:init" unless="exclude.database">
		<!-- You need to either depend on jboss or tomcat so that you can read the db properties from it's configs.  BDA only has macros to read database properties from jboss. -->
	</target>
	<target name="upgrade:common:init:prep">
		<if>
			<not>
				<isset property="application.base.path"/>
			</not>
			<then>
				<!-- Set application.base.path based on platform -->
				<condition property="application.base.path" value="${application.base.path.linux}">
					<or>
						<os family="unix"/>
						<os family="mac"/>
					</or>
				</condition>

				<condition property="application.base.path" value="${application.base.path.windows}">
					<os family="windows"/>
				</condition>
				<echo message="application.base.path=${application.base.path}"/>
			</then>
		</if>
		<properties-print properties.list="application.base.path,jboss.home,tomcat.home,jboss.server.name"/>
		<var name="read.properties.list" value=""/>
	</target>
	<target depends="upgrade:common:init:prep" name="upgrade:jboss:init:prep" unless="exclude.jboss">
		<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
		<if>
			<not>
				<available file="${jboss.home}"/>
			</not>
			<then>
				<fail message="${jboss.home} must exist during upgrades"/>
			</then>
		</if>
		<jboss-version/>
		<if>
			<equals arg1="${jboss.ncicb-standard.port-config}" arg2="true"/>
			<then>
				<property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
			</then>
			<else>
				<property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
			</else>
		</if>

		<!-- Upgrades always use port configs -->
		<property name="jboss.ncicb-standard.port-config" value="true"/>
		<available file="${jboss.home}" property="jboss.exists"/>
		<property name="read.jboss.home" value="${jboss.home}"/>
		<echo message="jboss.exists - ${jboss.exists}"/>
	</target>

	<target depends="upgrade:common:init:prep" name="upgrade:tomcat:init:prep" unless="exclude.tomcat">
		<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
		<if>
			<not>
				<available file="${tomcat.home}"/>
			</not>
			<then>
				<fail message="${tomcat.home} must exist during upgrades"/>
			</then>
		</if>
		<tomcat-version/>
		<!-- Upgrades always use port configs -->
		<available file="${tomcat.home}" property="tomcat.exists"/>
		<property name="read.tomcat.home" value="${tomcat.home}"/>
	</target>

	<target name="upgrade:jboss:readers:custom" unless="exclude.jboss">
		<!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->
	</target>

	<target name="upgrade:tomcat:readers:custom" unless="exclude.tomcat">
		<!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->
	</target>

	<target name="upgrade:database:readers:custom" unless="exclude.database">
		<!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->
	</target>
	<target depends="upgrade:jboss:init:prep" name="upgrade:database:readers:bda" unless="exclude.database">

		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist properties.list="application.base.path,jboss.home,jboss.server.name"/>
		<jboss-read-dbconfig jboss.ds-xml.file="bda-blueprints-ds.xml" jboss.home="${read.jboss.home}"/>
	</target>

	<target name="upgrade:jboss:readers:bda" unless="exclude.jboss">

		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist properties.list="application.base.path,jboss.home,jboss.server.name"/>
		<!-- Set these -->
		<osfamily property="os.family"/>
		<if>
			<or>
				<equals arg1="${os.family}" arg2="unix"/>
				<equals arg1="${os.family}" arg2="mac"/>
			</or>
			<then>
				<property name="jboss.server.hostname" value="${env.HOSTNAME}"/>
			</then>
		</if>
		<if>
			<equals arg1="${os.family}" arg2="windows"/>
			<then>
				<property name="jboss.server.hostname" value="${env.COMPUTERNAME}"/>
			</then>
		</if>
		<!-- Begin JBoss Readers -->
		<!-- Reader reqiures that you have only one data source defined in each *-ds.xml file -->
		<jboss-read-dbconfig jboss.ds-xml.file="bda-blueprints-ds.xml" jboss.home="${read.jboss.home}"/>
		<jboss-read-ldapconfig jboss.home="${read.jboss.home}"/>
		<if>
			<equals arg1="${jboss.major.version}" arg2="4"/>
			<then>
				<jboss-read-bindings-file-location jboss.home="${read.jboss.home}"/>
				<jboss-read-ports/>
			</then>
		</if>
		<if>
			<equals arg1="${jboss.major.version}" arg2="5"/>
			<then>
				<jboss51-read-default-portconfig/>
				<jboss51-read-ports-nci/>
			</then>
		</if>
		<!-- Setting this variable will cause install to copy it into place if using CM/DAC, not modified in NCM -->
		<var name="jboss.ssl.keystore.dir" value="${working.dir}/keys/jboss"/>
		<if>
			<equals arg1="${jboss.major.version}" arg2="4"/>
			<then>
				<jboss-read-ssl copied.keystore.dir="${jboss.ssl.keystore.dir}" jboss.home="${read.jboss.home}"/>
			</then>
		</if>
		<if>
			<equals arg1="${jboss.major.version}" arg2="5"/>
			<then>
				<jboss-read-ssl copied.keystore.dir="${jboss.ssl.keystore.dir}" jboss.home="${read.jboss.home}" jboss.server-xml.file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml"/>
			</then>
		</if>
		<if>
			<equals arg1="${jboss.major.version}" arg2="4"/>
			<then>
				<jboss-read-external-hostname jboss.home="${read.jboss.home}" search.ssl.port="${jboss.ssl.port}"/>
			</then>
		</if>
		<if>
			<equals arg1="${jboss.major.version}" arg2="5"/>
			<then>
				<jboss-read-external-hostname jboss.home="${read.jboss.home}" jboss.server-xml.file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml" search.ssl.port="${jboss.ssl.port}"/>
			</then>
		</if>
		<!-- for tier installs, should be done first, since it is set first it will be the one used if it exists -->
		<jboss-read-java_opts jboss.bin.dir="${read.jboss.home}/server/${jboss.server.name}/bin"/>
		<jboss-read-java_opts jboss.home="${read.jboss.home}"/>
		<!-- will have to add code to install:post:jboss to copy this back if exists -->
		<if>
			<equals arg1="${jboss.major.version}" arg2="4"/>
			<then>
				<jboss-copy-log4j copied.jboss.log4j.dir="${copied.jboss.log4j.dir}" jboss.home="${read.jboss.home}" jboss.log4j.location="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml"/>
			</then>
		</if>
		<if>
			<equals arg1="${jboss.major.version}" arg2="5"/>
			<then>
				<jboss-copy-log4j copied.jboss.log4j.dir="${copied.jboss.log4j.dir}" jboss.home="${read.jboss.home}" jboss.log4j.location="${jboss.home}/server/${jboss.server.name}/conf/jboss-log4j.xml"/>
			</then>
		</if>
		<read-property-from-properties-service jboss.home="${read.jboss.home}" property.name="property1"/>
		<read-property-from-properties-service jboss.home="${read.jboss.home}" property.name="property2"/>
	</target>
	<target name="upgrade:jboss-grid:readers:bda" unless="exclude.jboss">
		<if>
			<not>
				<isset property="exclude.jboss.grid"/>
			</not>
			<then>
				<grid-read-index-url grid.wsrf.dir="${read.jboss.home}/server/${jboss.server.name}/deploy/wsrf.war"/>
				<var name="jboss.grid.secure.dir" value="${working.dir}/keys/jboss"/>
				<if>
					<equals arg1="${jboss.major.version}" arg2="4"/>
					<then>
						<jboss-read-grid-secure copied.keystore.dir="${jboss.grid.secure.dir}" jboss.home="${read.jboss.home}"/>
					</then>
				</if>
				<if>
					<equals arg1="${jboss.major.version}" arg2="5"/>
					<then>
						<jboss-read-grid-secure copied.keystore.dir="${jboss.grid.secure.dir}" jboss.home="${read.jboss.home}" jboss.server-xml.file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml"/>
					</then>
				</if>
				<!-- will have to add code to install:post:jboss to copy this back if exists -->
				<!-- no longer needed
				<property name="copied.jboss.service-metadata.dir" value="${working.dir}/jboss-grid"/>
				<grid-copy-service-metadata
					copied.service-metadata.dir="${copied.service-metadata.dir}"
					/>
				-->
				<grid-read-poc grid.service.name="Sample" grid.wsrf.dir="${read.jboss.home}/server/${jboss.server.name}/deploy/wsrf.war"/>
			</then>
		</if>
	</target>
	<target depends="upgrade:tomcat:init:prep" name="upgrade:tomcat:readers:bda" unless="exclude.tomcat">

		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist properties.list="application.base.path,tomcat.home"/>
		<!-- Begin Tomcat readers, delete if you don't need -->
		<osfamily property="os.family"/>
		<if>
			<or>
				<equals arg1="${os.family}" arg2="unix"/>
				<equals arg1="${os.family}" arg2="mac"/>
			</or>
			<then>
				<property name="tomcat.hostname" value="${env.HOSTNAME}"/>
			</then>
		</if>
		<if>
			<equals arg1="${os.family}" arg2="windows"/>
			<then>
				<property name="tomcat.hostname" value="${env.COMPUTERNAME}"/>
			</then>
		</if>
		<tomcat-read-ports tomcat.home="${read.tomcat.home}"/>
		<var name="tomcat.ssl.keystore.dir" value="${working.dir}/keys/tomcat"/>
		<tomcat-read-ssl copied.keystore.dir="${tomcat.ssl.keystore.dir}" tomcat.home="${read.tomcat.home}"/>
		<tomcat-read-external-hostname tomcat.home="${read.tomcat.home}"/>
		<!-- Fail if any read properties are not set -->
		<echo message="All properties after readers"/>
		<tomcat-read-dbconfig/>
	</target>
	<target depends="upgrade:tomcat:init:prep" name="upgrade:tomcat-grid:readers:bda" unless="exclude.tomcat">
		<if>
			<not>
				<isset property="exclude.tomcat.grid"/>
			</not>
			<then>
				<grid-read-index-url grid.wsrf.dir="${read.tomcat.home}/webapps/wsrf"/>
				<var name="tomcat.grid.secure.dir" value="${working.dir}/keys/tomcat"/>
				<tomcat-read-grid-secure copied.keystore.dir="${tomcat.grid.secure.dir}" tomcat.home="${read.tomcat.home}"/>
				<!--
				<property name="copied.tomcat.service-metadata.dir" value="${working.dir}/tomcat-grid"/>
				<grid-copy-service-metadata
					grid.wsrf.dir="${tomcat.home}/webapps/wsrf"
					copied.service-metadata.dir="${copied.service-metadata.dir1}"
					/>
				-->
				<grid-read-poc grid.service.name="Sample" grid.wsrf.dir="${read.tomcat.home}/webapps/wsrf"/>
			</then>
		</if>
	</target>
	<!-- For JBoss 5.1
		<copy file="${copied.jboss.log4j.dir}/jboss-log4j.xml" todir="${jboss.home}/server/${jboss.server.name}/conf"/>
	-->
	<target name="upgrade:post:jboss" unless="exclude.jboss">
		<if>
			<equals arg1="${jboss.major.version}" arg2="4"/>
			<then>
				<copy file="${copied.jboss.log4j.dir}/log4j.xml" todir="${jboss.home}/server/${jboss.server.name}/conf"/>
			</then>
		</if>
		<if>
			<equals arg1="${jboss.major.version}" arg2="5"/>
			<then>
				<copy file="${copied.jboss.log4j.dir}/jboss-log4j.xml" todir="${jboss.home}/server/${jboss.server.name}/conf"/>
			</then>
		</if>
	</target>
	<target name="upgrade:post:tomcat" unless="exclude.tomcat">
		<!-- place holder -->
	</target>
	<target name="test:fail">
		<fail message="This target is supposed to cause a build failure.  This target can be used to verfiy that &lt;exec/&gt; calls are catching failures."/>
	</target>
	<target depends="   common:jboss:init,   common:tomcat:init,   common:init,   install:jboss:init   " description="" name="install:common:property-validate:all">
		<echo message="**** Begin Property Rule Validation"/>
		<xmlvalidate failonerror="yes" file="${bda-utils.dir}/resource/groovy/all-property-rules.xml" lenient="yes"/>
		<var name="all.property.rule.validator.failed" unset="true"/>
		<groovy src="${bda-utils.dir}/resource/groovy/propertyrulevalidator.groovy">
			<arg line="${bda-utils.dir}/resource/groovy/all-property-rules.xml all.property.rule.validator.failed"/>
		</groovy>
		<if>
			<equals arg1="${all.property.rule.validator.failed}" arg2="true"/>
			<then>
				<fail message="Property Validation Failed"/>
			</then>
		</if>
	</target>
	<target depends="   common:jboss:init,   common:tomcat:init,   common:init,   install:jboss:init   " description="" name="install:common:property-validate:common">
		<echo message="**** Begin Property Rule Validation"/>
		<xmlvalidate failonerror="yes" file="${bda-utils.dir}/resource/groovy/common-property-rules.xml" lenient="yes"/>
		<var name="common.property.rule.validator.failed" unset="true"/>
		<groovy src="${bda-utils.dir}/resource/groovy/propertyrulevalidator.groovy">
			<arg line="${bda-utils.dir}/resource/groovy/common-property-rules.xml common.property.rule.validator.failed"/>
		</groovy>
		<if>
			<equals arg1="${common.property.rule.validator.failed}" arg2="true"/>
			<then>
				<fail message="Property Validation Failed"/>
			</then>
		</if>
	</target>
	<target depends="   common:jboss:init,   common:tomcat:init,   common:init,   install:jboss:init   " description="" name="install:common:property-validate:database">
		<echo message="**** Begin Property Rule Validation"/>
		<xmlvalidate failonerror="yes" file="${bda-utils.dir}/resource/groovy/database-property-rules.xml" lenient="yes"/>
		<var name="database.property.rule.validator.failed" unset="true"/>
		<groovy src="${bda-utils.dir}/resource/groovy/propertyrulevalidator.groovy">
			<arg line="${bda-utils.dir}/resource/groovy/database-property-rules.xml database.property.rule.validator.failed"/>
		</groovy>
		<if>
			<equals arg1="${database.property.rule.validator.failed}" arg2="true"/>
			<then>
				<fail message="Property Validation Failed"/>
			</then>
		</if>
	</target>
	<target depends="   common:jboss:init,   common:tomcat:init,   common:init,   install:jboss:init   " description="" name="install:common:property-validate:grid">
		<echo message="**** Begin Property Rule Validation"/>
		<xmlvalidate failonerror="yes" file="${bda-utils.dir}/resource/groovy/grid-property-rules.xml" lenient="yes"/>
		<var name="grid.property.rule.validator.failed" unset="true"/>
		<groovy src="${bda-utils.dir}/resource/groovy/propertyrulevalidator.groovy">
			<arg line="${bda-utils.dir}/resource/groovy/grid-property-rules.xml grid.property.rule.validator.failed"/>
		</groovy>
		<if>
			<equals arg1="${grid.property.rule.validator.failed}" arg2="true"/>
			<then>
				<fail message="Property Validation Failed"/>
			</then>
		</if>
	</target>
	<target depends="   common:jboss:init,   common:tomcat:init,   common:init,   install:jboss:init   " description="" name="install:common:property-validate:jboss">
		<echo message="**** Begin Property Rule Validation"/>
		<xmlvalidate failonerror="yes" file="${bda-utils.dir}/resource/groovy/jboss-property-rules.xml" lenient="yes"/>
		<var name="jboss.property.rule.validator.failed" unset="true"/>
		<groovy src="${bda-utils.dir}/resource/groovy/propertyrulevalidator.groovy">
			<arg line="${bda-utils.dir}/resource/groovy/jboss-property-rules.xml jboss.property.rule.validator.failed"/>
		</groovy>
		<if>
			<equals arg1="${jboss.property.rule.validator.failed}" arg2="true"/>
			<then>
				<fail message="Property Validation Failed"/>
			</then>
		</if>
	</target>
	<target depends="   common:jboss:init,   common:tomcat:init,   common:init,   install:jboss:init   " description="" name="install:common:property-validate:tomcat">
		<echo message="**** Begin Property Rule Validation"/>
		<xmlvalidate failonerror="yes" file="${bda-utils.dir}/resource/groovy/tomcat-property-rules.xml" lenient="yes"/>
		<var name="tomcat.property.rule.validator.failed" unset="true"/>
		<groovy src="${bda-utils.dir}/resource/groovy/propertyrulevalidator.groovy">
			<arg line="${bda-utils.dir}/resource/groovy/tomcat-property-rules.xml tomcat.property.rule.validator.failed"/>
		</groovy>
		<if>
			<equals arg1="${tomcat.property.rule.validator.failed}" arg2="true"/>
			<then>
				<fail message="Property Validation Failed"/>
			</then>
		</if>
	</target>
</project>
