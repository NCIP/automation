<?xml version="1.0" encoding="utf-8" ?>

<project name="bda-certification" default="build:project" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
	<description>
		This build file is part of the bda-build-template project.  This is the master build file for the project.  It should be placed in project/software/.  This script wrappers sub projects to build, test and inspect code.  Additionally this project manges creation of distributions and deployment locally or remotely.  Deployments will call the install.xml from the distribution to install or upgrade the application.  Lastly this script will run include targets that require manipulation of containers (selenium tests because they require starting the application server container (and require a fully deployed application which this process is responsible for). This build script assumes two sub-projects bda-blueprints-webapp and bda-blueprints-api. The API targets are commented out and can be removed if not needed.  Also support for both tomcat and jboss download, install and configure are included.  These scripts require Java, Ant, Database and SVN to work.
	</description>

	<property file="project.properties" />
	<property name="build.dir" location="${basedir}" />
	<property name="bda-download.dir" location="${build.dir}/bda-download" />
	<property name="lib.dir" location="${build.dir}/lib" />
	<property name="bda-utils.dir" location="${build.dir}/bda-utils" />
	<property name="log.dir" location="${build.dir}/logs" />
	
	<!-- retrive ivy files then retrieve bda files and librarires -->
	<property name="bda-download.file" value="bda-ivy-build.xml" />
	<mkdir dir="${bda-download.dir}" />
	<property name="bda-download.src.url" value="http://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-download/${bda-download.file}" />
	<get src="${bda-download.src.url}" dest="${bda-download.dir}/${bda-download.file}" />

	<ant inheritAll="false" inheritRefs="false" antfile="${bda-download.file}" target="retrieve-bda" dir="${bda-download.dir}">
		<property name="bda.version" value="${bda.version}" />
		<property name="bda-utils.dir" location="${bda-utils.dir}" />
		<property name="lib.dir" location="${lib.dir}" />
		<property name="software.dir" location="${build.dir}" />
	</ant>



	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="ivy.classpath">
		<fileset dir="${lib.dir}">
			<include name="${ivy.file}" />
			<include name="${ivy-core.file}" />
		</fileset>
	</path>
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="bda-utils.classpath"/>

	<echo message="${project.name}"/>
	<propertycopy name="project.database.type" from="${project.name}.database.type" />
	<propertycopy name="project.database.system.user" from="${project.database.type}.database.system.user" />
	<propertycopy name="project.database.system.password" from="${project.database.type}.database.system.password" />
	<propertycopy name="project.database.server" from="${project.database.type}.database.server" />
	<propertycopy name="project.database.port" from="${project.database.type}.database.port" />
	<propertycopy name="project.database.name" from="${project.database.type}.database.name" />
	<propertycopy name="project.database.user" from="${project.database.type}.database.user" />
	<propertycopy name="project.database.password" from="${project.database.type}.database.password" />		
	<propertycopy name="project.database.url" from="${project.database.type}.database.url" />
	<propertycopy name="project.database.system.url" from="${project.database.type}.database.system.url" />

	<propertycopy name="project.master.build.location" from="${project.name}.master.build.location" />
	<propertycopy name="project.single-command.build.target" from="${project.name}.single-command.build.target" />
	<propertycopy name="project.single-command.deployment.target" from="${project.name}.single-command.deployment.target" />
	<propertycopy name="project.database.integration.target" from="${project.name}.database.integration.target" />	
	<propertycopy name="project.master.build.file" from="${project.name}.master.build.file" />
	<propertycopy name="project.exploded.dir.location" from="${project.name}.exploded.dir.location" />

	<propertycopy name="project.svn.username" from="${project.name}.svn.username" />
	<propertycopy name="project.svn.password" from="${project.name}.svn.password" />
	<propertycopy name="project.svn.project.url" from="${project.name}.svn.project.url" />
	<propertycopy name="project.svn.local.checkout" from="${project.name}.svn.local.checkout" />
	<propertycopy name="project.svn.private.url" from="${project.name}.private.repository" />
	<propertycopy name="project.local.private.checkout" from="${project.name}.local.private.checkout" />
	


	<echo message="databasetype::${project.database.type}"/>
	<property name="database.type" value="${project.database.type}" />
	<property name="database.system.user" value="${project.database.system.user}" />
	<property name="database.system.password" value="${project.database.system.password}" />
	<property name="database.server" value="${project.database.server}" />
	<property name="database.port" value="${project.database.port}" />
	<property name="database.name" value="${project.database.name}" />
	<property name="database.user" value="${project.database.user}" />
	<property name="database.password" value="${project.database.password}" />
	<property name="database.url" value="${project.database.url}" />
	<property name="database.system.url" value="${project.database.system.url}" />

	<property name="master.build.location" value="${project.master.build.location}" />
	<property name="single-command.build.target" value="${project.single-command.build.target}" />
	<property name="single-command.deployment.target" value="${project.single-command.deployment.target}" />
	<property name="database.integration.target" value="${project.database.integration.target}" />
	<property name="master.build.file" value="${project.master.build.file}" />
	<property name="exploded.dir.location" value="${project.exploded.dir.location}" />

	<property name="svn.username" value="${project.svn.username}" />
	<property name="svn.password" value="${project.svn.password}" />	
	<property name="svn.project.url" value="${project.svn.project.url}" />
	<property name="svn.local.checkout" value="${project.svn.local.checkout}" />
	<property name="svn.private.url" value="${project.svn.private.url}" />
	<property name="svn.private.local.checkout" value="${project.local.private.checkout}" />
	
	<switch value="${database.type}">
		<case value="oracle">
			<property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
			<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
			<property name="database.schema" value="${database.name}"/>
		</case>
		<case value="mysql">
			<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.5.jar"/>
			<property name="database.driver" value="com.mysql.jdbc.Driver"/>
			<property name="database.schema" value="${database.name}"/>
		</case>
		<case value="postgresql">
			<property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-603.jar"/>
			<property name="database.driver" value="org.postgresql.Driver"/>
			<property name="database.schema" value="public"/>
		</case>
		<default>
			<fail message="Invalid database type ${database.type}"/>
		</default>
	</switch>	
	
	<!-- Includes- include BDA marcos -->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<!-- Start logging -->
	<mkdir dir="${log.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${log.dir}/install-${install.time}.log" action="start" />


	<path id="jdbc.driver.classpath">
		<pathelement location="${database.driver.file}"/>
	</path>


	<!-- Targets -->


	<target name="init" description="Sets up build are and initalizes variables">
		
		<echo message="IN INIT::::${database.type}"/>

	</target>

	<target name="build:project" depends="init,build:single-command-build" description="Sets up build are and initalizes variables">
		<echo message="call build:project target.. "/>
	</target>
	
	<target name="validate:JAD" depends="init" description="Runs pre-install validation checks bda-utils">
		<validate-environment
			ant.check.version="${ant.minimum.version}"
			java.check.version.major="${java.major.version}"
			java.check.version.minor="${java.minor.version}"		
			/>
	
		<database-create
			database.driver="${database.driver}"
			database.system.url="${database.system.url}"
			database.system.user="${database.system.user}"
			database.system.password="${database.system.password}"
			database.url="${database.url}"
			database.user="${database.user}"
			database.password="${database.password}"
			database.name="${database.name}"
			/>

		<validate-database
			database.driver="${database.driver}"
			database.system.url="${database.system.url}"
			database.system.user="${database.system.user}"
			database.system.password="${database.system.password}"
			database.url="${database.url}"
			database.user="${database.user}"
			database.password="${database.password}"
			database.name="${database.name}"
			/>
	</target>

	
	<target name="validate:svn:checkout-project" depends="init,svn:scorch,svn:init">

		<svn username="${svn.username}" password="${svn.password}">
			<checkout url="${svn.project.url}" revision="HEAD" destPath="${svn.local.checkout}" />
		</svn>
	</target>
	
	<target name="svn:scorch">
		<echo message="Scorching local SVN working directory ${svn.local.checkout}..." />
		<delete dir="${svn.local.checkout}" />
	</target>
	
	<target name="svn:init">
		<delete dir="working"/>
		<mkdir dir="working"/>
	</target>
	
	<target name="build:single-command-build" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${master.build.file}" target="${single-command.build.target}" dir="${master.build.location}"/>		
	</target>

	<target name="build:single-command-deployment" depends="init">

		<ant inheritAll="false" inheritRefs="false" antfile="${master.build.file}" target="${single-command.deployment.target}" dir="${master.build.location}"/>

		<copy file="${build.dir}/../hibernate.cfg.xml" todir="${exploded.dir.location}"/>


		<exec osfamily="unix" executable="ant" dir="${exploded.dir.location}" failonerror="true">
			<arg value="-Dproperties.file=install.properties" />
			<arg value="-Dforce.reinstall=true" />
			<arg value="-Ddatabase.system.user=${database.system.user}" />
			<arg value="-Ddatabase.system.password=${database.system.password}" />
			<arg value="-Ddatabase.server=${database.server}" />
			<arg value="-Ddatabase.port=${database.port}" />
			<arg value="-Ddatabase.name=${database.name}" />
			<arg value="-Ddatabase.user=${database.user}" />
			<arg value="-Ddatabase.password=${database.password}" />
			<arg value="-Ddatabase.url=${database.url}" />
			<arg value="-Ddatabase.system.url=${database.system.url}" />
			<arg value="-Dexecuted.target.name=install" />
			<arg value="-Dmap.name=singleCommandDeployment" />			
			<arg value="-Dproject.name=${project.name}" />
			<arg value="-listener" />
			<arg value="gov.nih.nci.bda.certification.listener.SingleCommandListener" />
			<arg value="-lib" />
			<arg value="${build.dir}/.." />
			<arg value="install" />
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${exploded.dir.location}" failonerror="true">			
			<arg value="-Dproperties.file=install.properties" />			
			<arg value="-Dforce.reinstall=true" />
			<arg value="-Ddatabase.system.user=${database.system.user}" />
			<arg value="-Ddatabase.system.password=${database.system.password}" />
			<arg value="-Ddatabase.server=${database.server}" />
			<arg value="-Ddatabase.port=${database.port}" />
			<arg value="-Ddatabase.name=${database.name}" />
			<arg value="-Ddatabase.user=${database.user}" />
			<arg value="-Ddatabase.password=${database.password}" />
			<arg value="-Ddatabase.url=${database.url}" />
			<arg value="-Ddatabase.system.url=${database.system.url}" />
			<arg value="-Dexecuted.target.name=install" />
			<arg value="-Dmap.name=singleCommandDeployment" />			
			<arg value="-Dproject.name=${project.name}" />
			<arg value="-listener" />
			<arg value="gov.nih.nci.bda.certification.listener.SingleCommandListener" />
			<arg value="-lib" />
			<arg value="${build.dir}/.." />
			<arg value="install" />
		</exec>

	</target>

	<target name="build:database-integration" depends="init">
		<groovy>
			<arg line="${master.build.location}"/>
			<arg line="${database.integration.target}"/>
			<arg line="${database.type}"/>
			def buildFileLocation=args[0]
			def targetName=args[1]
			def databaseType=args[2]
			
			def ant = new AntBuilder()						
			String installPropertiesFile=new File(buildFileLocation+"/install.properties").getAbsoluteFile();			
			Properties props = new Properties();
			props.load(new FileInputStream(installPropertiesFile));			
			String dbFlag = props.getProperty("exclude.database");
			println dbFlag;
			println databaseType;
			if(dbFlag != null)
			{
				println "Flag is set skip DB integration Check"
			}
			else
			{
				println "DB integration Check"
				installFile = new File(buildFileLocation+"/install.xml").getAbsoluteFile()
				project = new XmlParser().parse(installFile)				
				println project.target.'@name'.contains(targetName)
				println targetName
				if(project.target.'@name'.contains(targetName))
				{
					if(project.target.find{it.'@name'=='install'}.'@depends'.contains(targetName))
					{
						def targetUpgrade = project.target.find{it.@name==targetName}.'database-upgrade'
						if(!targetUpgrade)
							ant.fail("DATABASE INTEGRATION FAILED: The database-upgrade target is missing")
							
						def targetInstall = project.'target'.find{it.@name==targetName}.switch.'case'.find{it.'@value'==databaseType}.'database-install'
						if(!targetInstall)
							ant.fail("DATABASE INTEGRATION FAILED: The database-install target is missing")
						
						println "CHECK FOR MACROS COMPLETE"
					}
					else
					{				
						ant.fail("DATABASE INTEGRATION FAILED: The install:database target is not called from the install target")
					}
				}
				else
				{				
					ant.fail("DATABASE INTEGRATION FAILED: The install:database target is not found in the install.xml")
				}
				
			}	
		</groovy>
	</target>




	<target name="build:bda-utils" depends="init">
				
		<groovy>
			<arg line="${master.build.location}"/>
			def buildFileLocation=args[0]

			def ant = new AntBuilder()
			
			String projectPropertiesFile=new File(buildFileLocation+"/project.properties").getAbsoluteFile();
			Properties props = new Properties();
			props.load(new FileInputStream(projectPropertiesFile));			
			String bdaVersion = props.getProperty("bda.version");
			println bdaVersion;
			project.setProperty("certification.property.value",bdaVersion);
		</groovy>
	</target>


	<target name="build:template-properties" depends="init">
				
		<groovy>
			<arg line="${master.build.location}"/>
			def buildFileLocation=args[0]

			def ant = new AntBuilder()
			
			try
			{
				String projectPropertiesFile=new File(buildFileLocation+"/install-properties.template").getAbsoluteFile();
				println projectPropertiesFile
			}
			catch(FileNotFoundException ex)
			{
				ant.fail("TEMPLATE VALIDATION FAILED: Can not find the install-properties.template file ")
			}

			installFile = new File(buildFileLocation+"/install.xml").getAbsoluteFile()
			project = new XmlParser().parse(installFile)				
			
			if(!project.switch.find{it.@value=='${properties.file.type}'}.'case'.find{it.@value=='install'}.property.@name.contains('properties.template.file'))
				ant.fail("TEMPLATE VALIDATION FAILED: properties.template.file property is not set ")
			
		</groovy>

	</target>


	<target name="build:private-repository-properties" depends="init">

		<svn username="${svn.username}" password="${svn.password}">
			<checkout url="${svn.private.url}" revision="HEAD" destPath="${svn.private.local.checkout}" />
		</svn>
				
		<groovy>
			<arg line="${svn.private.local.checkout}"/>
			def privatePropertiesLocation=args[0]

			def ant = new AntBuilder()
			try
			{			
				propertiesDir = new File(args[0] + "/properties").getAbsoluteFile()
				devInstallPropertiesFile = "dev-install.properties"
				devUpgradePropertiesFile = "dev-upgrade.properties"
				
				if(propertiesDir.exists())
				{
					flag = false
					propertiesDir.eachFileRecurse
					{ file ->
						if (file.isFile())
						{									
				 			if(file.getName().equalsIgnoreCase(devUpgradePropertiesFile) || file.getName().equalsIgnoreCase(devInstallPropertiesFile))
				 				flag = true				 				
				 		}
				 	}
				 	if(!flag)
				 		ant.fail("PRIVATE REPOSITORY FAILED: Can not find the install or upgrade property files ")
				}
				else
				{
					println "directory does not exist"
					ant.fail("PRIVATE REPOSITORY FAILED: Can not find the properties folder ")
				}
			}
			catch(FileNotFoundException ex)
			{
				ant.fail("PRIVATE REPOSITORY FAILED: Can not find the properties folder ")
			}

		</groovy>

	</target>


</project>
