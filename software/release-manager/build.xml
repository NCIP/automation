<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: build.xml 4839 2008-05-21 14:45:51Z zengje $
$HeadURL: http://gforge.nci.nih.gov/svnroot/ncia/trunk/software/build.xml $
-->
<project name="releasemanager-build" default="release:project" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>
	<description>
		This file is used to release the BDA project. The process include checking out automation on the given revision number and build the bda-build-uils.zip and branch and tag.
	</description>

	<!-- Property file related properties and tasks -->
	<property name="project.name" value="bda_release"/>
	<property environment="env" />	
	
	<property file="local.properties" />
	<property file="release.properties" />
	
	<property name="global.ivy.settings.file" location="common/ivysettings.xml" />

	<property name="bda.utils.filename" value="bda-build-utils" />
	<property name="bda.templates.filename" value="bda-build-templates" />
	
	<property name="automation.resource.dir" value="resource" />


	<property name="working.dir" value="${basedir}/working"/>
	<property name="lib.dir" value="${working.dir}/lib" />
	<property name="target.dir" location="${basedir}/target"/>
	<property name="temp.dir" location="${target.dir}/temp"/>


	<!-- retrive ivy files then retrieve bda files and librarires -->
	<condition property="local.cbiit-ivy-repo.dir" value="">
		<or>
			<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="local.cbiit-ivy-repo.dir" value="c:/">
		<os family="windows" />
	</condition>

	<property name="bda-download.dir" location="${working.dir}/bda-download" />
	<property name="bda-utils.dir" value="${working.dir}/bda-utils" />	
	<property name="bda-download.file" value="bda-ivy-build.xml" />
	<mkdir dir="${bda-download.dir}" />
	<property name="bda-download.src.url" value="http://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-download/${bda-download.file}" />
	<property name="cbiit-ivy.src.url" value="http://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-download/cbiit-ivy-bda-settings.xml" />
	<get src="${bda-download.src.url}" dest="${bda-download.dir}/${bda-download.file}" />
	<get src="${cbiit-ivy.src.url}" dest="${bda-download.dir}/cbiit-ivy-bda-settings.xml"/>
	<ant inheritAll="false" inheritRefs="false" antfile="${bda-download.file}" target="retrieve-bda" dir="${bda-download.dir}">
		<property name="bda.version" value="${bda.version}" />
		<property name="bda-utils.dir" location="${bda-utils.dir}" />
		<property name="lib.dir" location="${lib.dir}" />
		<property name="ivy.settings.file" value="cbiit-ivy-bda-settings.xml"/>
		<property name="local.cbiit-ivy-repo.dir" value="${local.cbiit-ivy-repo.dir}"/>
	</ant>
	
	<!-- Paths -->
	<path id="project.classpath">
		<fileset dir="${lib.dir}">
			<include name="simian-2.2.24.jar" />
			<include name="ivy-core-2.0.0-beta2.jar" />
			<include name="ivy-2.0.0-beta2.jar" />
		</fileset>
	</path>

	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>


	<!-- Includes- include BDA marcos -->
	<import file="${bda-utils.dir}/${bda.utils.filename}-${bda.version}.xml" />
	


	<!-- Targets -->
	<target name="release:project" depends="svn:checkout,release:copy-rename,svn:checkin,release:create-branch-tag,release:update-bda-ivyfiles,release:mail-teams">
		<echo message="Released BDA revision '${release.version}' and '${next.beta.release.version}'. The beta version '${next.beta.release.version}' is in development and is not supported. " />
	</target>



	<target name="svn:checkout" depends="svn-scorch">	
		<svn username="${new.svn.username}" password="${new.svn.password}">
			<checkout url="${svn.project.url}" revision="HEAD" destPath="${svn.local.checkout}" />
		</svn>
	</target>

	<target name="svn:automation:checkout" depends="svn:automation-utils:checkout,svn:automation-templates:checkout">	
	</target>


	<target name="svn:automation-utils:checkout" depends="svn-scorch,svn:ivy:checkout">	
		<svn username="${old.svn.username}" password="${old.svn.password}">
			<checkout url="${svn.automation.url}/${svn.automation.project}" revision="${default.automation.revision}" destPath="${svn.automation-utils.checkout}" />
		</svn>	
	</target>
	<target name="svn:automation-templates:checkout" depends="svn-scorch,svn:ivy:checkout">	
		<svn username="${old.svn.username}" password="${old.svn.password}">
			<checkout url="${svn.automation.url}/${svn.templates.project}" revision="${default.automation.revision}" destPath="${svn.automation-templates.checkout}" />
		</svn>	
	</target>	
	<target name="svn:ivy:checkout" depends="svn-scorch">	
		<svn username="${old.svn.username}" password="${old.svn.password}">
			<checkout url="${svn.automation.url}/${svn.ivy.project}" revision="${default.automation.revision}" destPath="${svn.ivy.checkout}" />
		</svn>	
	</target>
	
	<target name="svn-scorch">
		<echo message="Scorching local SVN working directory ${svn.local.checkout}..." />
		<delete dir="${svn.local.checkout}" />
		<delete dir="${svn.automation.checkout}" />
		<delete dir="${svn.ivy.checkout}" />
		<mkdir dir="working"/>
	</target>

	<target name="release:copy-rename" depends="release-manager:get-latest-automation">
		<copy todir="${svn.local.checkout}/${next.beta.release.version}">
			<fileset dir="${svn.local.checkout}/${current.beta.release.version}"/>
		</copy>

		<copy todir="${svn.local.checkout}/${release.version}" >
			 <fileset dir="${svn.local.checkout}/${current.beta.release.version}"/>
		</copy>


		<move file="${svn.local.checkout}/${release.version}/${bda.utils.filename}-${current.beta.release.version}.xml" tofile="${svn.local.checkout}/${release.version}/${bda.utils.filename}-${release.version}.xml"/>
		<move file="${svn.local.checkout}/${release.version}/${bda.utils.filename}-${current.beta.release.version}.zip" tofile="${svn.local.checkout}/${release.version}/${bda.utils.filename}-${release.version}.zip"/>
		<move file="${svn.local.checkout}/${release.version}/${bda.templates.filename}-${current.beta.release.version}.zip" tofile="${svn.local.checkout}/${release.version}/${bda.templates.filename}-${release.version}.zip"/>

		<xmltask preservetype="true" outputter="default" source="${svn.local.checkout}/${release.version}/ivy.xml" dest="${svn.local.checkout}/${release.version}/ivy.xml">			
			<replace path="//ivy-module/info/@revision" withtext="${release.version}" />			
		</xmltask>

		
		<move file="${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${current.beta.release.version}.xml" tofile="${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${next.beta.release.version}.xml"/>
		<move file="${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${current.beta.release.version}.zip" tofile="${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${next.beta.release.version}.zip"/>
		<move file="${svn.local.checkout}/${next.beta.release.version}/${bda.templates.filename}-${current.beta.release.version}.zip" tofile="${svn.local.checkout}/${next.beta.release.version}/${bda.templates.filename}-${next.beta.release.version}.zip"/>
		
		<xmltask preservetype="true" outputter="default" source="${svn.local.checkout}/${next.beta.release.version}/ivy.xml" dest="${svn.local.checkout}/${next.beta.release.version}/ivy.xml">
			<replace path="//ivy-module/info/@revision" withtext="${next.beta.release.version}" />
		</xmltask>
		
		<!--
		<delete dir="${svn.local.checkout}/${previous.beta.release.version}"/>
	-->				
	</target>

	<target name="release-manager:get-latest-automation" depends="svn:automation:checkout,svn:checkout">
		<echo message="cp ${svn.automation-utils.checkout}/${bda.utils.filename}.xml ${svn.local.checkout}/${current.beta.release.version}/${bda.utils.filename}-${current.beta.release.version}.xml"/>
		<copy file="${svn.automation-utils.checkout}/${bda.utils.filename}.xml" tofile="${svn.local.checkout}/${current.beta.release.version}/${bda.utils.filename}-${current.beta.release.version}.xml" overwrite="true"/>
		

		<delete file="${svn.local.checkout}/${current.beta.release.version}/${bda.utils.filename}-${current.beta.release.version}.zip"/>
		<zip destfile="${svn.local.checkout}/${current.beta.release.version}/${bda.utils.filename}-${current.beta.release.version}.zip">
			<zipfileset dir="${svn.automation-utils.checkout}/${automation.resource.dir}" prefix="resource" />
		</zip>

		<copy file="${svn.automation-utils.checkout}/ivy.xml" tofile="${svn.local.checkout}/${current.beta.release.version}/ivy.xml" overwrite="true"/>
		
		<replaceregexp match="^(.*bda-build-template version.*)([0-9].[0-9].[0-9])(.*)" replace="\1${release.version} \3" flags="g" byline="true">
			<fileset dir="${svn.automation-templates.checkout}/software/build">
				<include name="**/*.xml"/>
				<include name="**/*.properties"/>
				<include name="**/*.template"/>
			</fileset>
		</replaceregexp>

		<zip destfile="${svn.local.checkout}/${current.beta.release.version}/${bda.templates.filename}-${current.beta.release.version}.zip">
			<zipfileset dir="${svn.automation-templates.checkout}/software/build" excludes="**/.svn/*" prefix="build"/>
			<zipfileset dir="${svn.automation-templates.checkout}/software/common" excludes="**/.svn/*" prefix="common"/>
		</zip>

<!-- prepare the automation area for the development -->		
		<xmltask preservetype="true" outputter="default" source="${svn.automation-utils.checkout}/ivy.xml" dest="${svn.automation-utils.checkout}/ivy.xml">
			<replace path="//ivy-module/info/@revision" withtext="${next.beta.release.version}" />			
		</xmltask>		

		<replaceregexp file="${svn.automation-utils.checkout}/build.properties" byline="true"
			match="^(bda.version)=(.*)"
			replace="\1=${next.beta.release.version}"/>
	</target>

	<target name="release:get-latest-automation" depends="svn:automation:checkout,svn:checkout">
		<echo message="cp ${svn.automation-utils.checkout}/${bda.utils.filename}.xml ${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${next.beta.release.version}.xml"/>
		<copy file="${svn.automation-utils.checkout}/${bda.utils.filename}.xml" tofile="${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${next.beta.release.version}.xml" overwrite="true"/>
		

		<delete file="${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${next.beta.release.version}.zip"/>
		<zip destfile="${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${next.beta.release.version}.zip">
			<zipfileset dir="${svn.automation-utils.checkout}/${automation.resource.dir}" prefix="resource" />
		</zip>

		<copy file="${svn.automation-utils.checkout}/ivy.xml" tofile="${svn.local.checkout}/${next.beta.release.version}/ivy.xml" overwrite="true"/>
		

		<zip destfile="${svn.local.checkout}/${next.beta.release.version}/${bda.templates.filename}-${next.beta.release.version}.zip">
			<zipfileset dir="${svn.automation-templates.checkout}/software/build" excludes="**/.svn/*" prefix="build"/>
			<zipfileset dir="${svn.automation-templates.checkout}/software/common" excludes="**/.svn/*" prefix="common"/>
		</zip>
	</target>


	<target name="release:beta" depends="release:get-latest-automation,svn:automation:checkin">

	</target>

	<target name="release:create-branch-tag" depends="svn:automation:checkout,svn:checkout">
		<svn username="${old.svn.username}" password="${old.svn.password}">			
			<copy srcUrl="${svn.automation.url}" destUrl="${svn.automation.branchurl}" message="create a branch for release ${release.version}" revision="${default.automation.revision}"/>
			<copy srcUrl="${svn.automation.url}" destUrl="${svn.automation.tagurl}" message="create a tag for release ${release.version}" revision="${default.automation.revision}"/>
		</svn>
	</target>


	<target name="svn:checkin">
		<svn username="${old.svn.username}" password="${old.svn.password}">		
			<commit message="Prepare the BDA release for development" dir="${svn.automation-utils.checkout}"/>
		</svn>
		<!-- added by ssaksa -->
		<svn username="${old.svn.username}" password="${old.svn.password}">		
			<commit message="Prepare the BDA release for development" dir="${svn.automation-templates.checkout}"/>
		</svn>
		<svn username="${old.svn.username}" password="${old.svn.password}">		
			<add dir="${svn.local.checkout}/${release.version}"/>
		</svn>

		
		<svn username="${old.svn.username}" password="${old.svn.password}">		
			<status path="${svn.local.checkout}/${next.beta.release.version}" textStatusProperty="next.beta.version.svn.status"/>
		</svn>
		<if>
			<equals arg1="${next.beta.version.svn.status}" arg2="unversioned"/>
			<then>
				<svn username="${old.svn.username}" password="${old.svn.password}">		
					<add dir="${svn.local.checkout}/${next.beta.release.version}"/>
					<!--
					<delete dir="${svn.local.checkout}/${previous.current.beta.release.version}"/>
					-->
				</svn>
			</then>
		</if>
		<svn username="${new.svn.username}" password="${new.svn.password}">		
			<commit message="Latest BDA revision ${release.version} and beta revision ${next.beta.release.version}" dir="${svn.local.checkout}"/>
		</svn>	
	</target>


	<target name="svn:automation:checkin">	
		<svn username="${old.svn.username}" password="${old.svn.password}">		
			<commit message="Latest BDA revision " dir="${svn.local.checkout}/${next.beta.release.version}"/>
		</svn>	
	</target>

	<target name="release:update-bda-ivyfiles" depends="svn:automation:checkout">	
		<xmltask preservetype="true" outputter="default" source="${svn.ivy.checkout}/bda-ivy-build.xml" dest="${svn.ivy.checkout}/bda-ivy-build.xml">
			<replace path="//project/property[@name='bda.version']/@value" withtext="${release.version}" />
		</xmltask>

		<xmltask preservetype="true" outputter="default" source="${svn.ivy.checkout}/bda-ivy-2.0.0-build.xml" dest="${svn.ivy.checkout}/bda-ivy-2.0.0-build.xml">
			<replace path="//project/property[@name='bda.version']/@value" withtext="${release.version}" />
		</xmltask>

		<zip destfile="${basedir}/working/bda-download.zip">
			<zipfileset dir="${svn.ivy.checkout}" />
		</zip>

		<svn username="${old.svn.username}" password="${old.svn.password}">			
			<commit message="Latest BDA released revision " dir="${svn.ivy.checkout}"/>
		</svn>	

	</target>
	
	<target name="release:post-release">	
		<delete dir="${bda-utils.dir}" />
		<delete dir="${lib.dir}" />
		<delete file="${basedir}/${automation.ivy}/bda-ivy-build.xml" />
		<delete file="${basedir}/${automation.ivy}/ivy-bda.xml" />
		<delete file="${basedir}/${automation.ivy}/ivy-bda-settings.xml" />
	</target>
	
	<target name="svn:delete-beta" >	
		<svn username="${new.svn.username}" password="${new.svn.password}">			
			<delete url="${svn.project.url}/${svn.delete-beta.version}" message="Delete the beta revision " />
		</svn>
	</target>

	<target name="release:mail-teams">	
		<mail mailhost="${mail.server.host}" mailport="${mail.server.port}"  tolist="${tolist}" subject="BDA ${release.version} released">
			<from address="${fromaddress}"/>						
			<message>Released BDA revision '${release.version}' and '${next.beta.release.version}'. The beta version '${next.beta.release.version}' is in development and is not supported. </message>
		</mail>	
	</target>

	<target name="update:wikidocs" description="Updates the wiki doc Flash XML">
	   <get src="${svn.wikidocs.url}/bda-wiki-home.template" dest="${svn.local.checkout}/bda-wiki-home.template" verbose="on" />
		<filterset id="embedded.filterset">
			<filter token="bda.version" value="${bda.version}"/>
			<filter token="bda.release.date" value="${bda.release.date}"/>
		</filterset>
		<copy todir="../../docs/wiki/flash/resources" filtering="true">
		  <fileset dir="${svn.local.checkout}">
			<include name="**/*"/>
	      </fileset>
		  <filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${basedir}/release.properties"/>
			</filterset>
		</copy>
		<move file="../../docs/wiki/flash/resources/bda-wiki-home.template" tofile="../../docs/wiki/flash/resources/bda-wiki-home.xml"/>
		<delete file="../../docs/wiki/flash/resources/bda-wiki-home.template" quiet="true" />
		<!-- TODO: Need to check in local changes to SVN repository -->
	</target>

	<target name="temp-svn-status">
		<svn username="${old.svn.username}" password="${old.svn.password}">		
			<status path="target" textStatusProperty="release.version.svn.status"/>
		</svn>
		<echo message="Target's status is ${release.version.svn.status}"/>
	</target>
	<target name="report:grand">
		<report-grand
			build.file.location="build.xml" 
			output.file.dir="." 
			output.file.name="relase-manager-build.xml" />
	</target>
	<target name="patch:dev" 
		depends="
		patch:init,
		patch:check-tag,
		patch:max-tag-version,
		patch:get-next-version,
		patch:create-branch,
		patch:checkout-branch
		">
	</target>

	<target name="patch:init">
		<var name="patching.version.has-value" unset="true"/>
		<propertyregex property="patching.version.has-value"
			input="${patching.version}"
			regexp="\S+"
			select="true"
			/>
		<var name="patching.version.unexpanded" unset="true"/>
		<propertyregex property="patching.version.unexpanded"
			input="${patching.version}"
			regexp="\$\{.*\}"
			select="true"
			/>
		<if>
			<or>
				<isset property="patching.version.unexpanded"/>
				<not>
					<isset property="patching.version.has-value"/>
				</not>
			</or>
			<then>
				<fail message="Must set patching.version variable"/>
			</then>
		</if>
	</target>

	<target name="patch:check-tag" depends="patch:init">
		<if>
			<not>
				<http url="http://gforge.nci.nih.gov/svnroot/automation/tags/automation-${patching.version}"/>
			</not>
			<then>
				<fail message="http://gforge.nci.nih.gov/svnroot/automation/tags/automation-${patching.version} does not exist"/>
			</then>
		</if>
	</target>
	<target name="patch:get-next-version" depends="patch:init">
		<echo message="patching version is - ${patching.version}"/>
		<groovy>
			 List versionList=properties["patching.version"].split("\\.")
			 String majorVersion=versionList[0]
			 String minorVersion=versionList[1]
			 String patchVersion=versionList[2].toInteger().plus(1).toString()
			 properties["patched.version"]= majorVersion + "." + minorVersion + "." + patchVersion
		</groovy>
		<echo message="patched version is - ${patched.version}"/>
	</target>
	<target name="list:tags" depends="patch:init">
		<osfamily property="os.family"/>
		<if>
			<equals arg1="${os.family}" arg2="unix"/>
			<then>
				<groovy>
					 List versionList=properties["patching.version"].split("\\.")
					 String majorVersion=versionList[0]
					 String minorVersion=versionList[1]
					 String baseVersion = majorVersion + "." + minorVersion 
					 String cmd= "svn list https://gforge.nci.nih.gov/svnroot/automation/tags"
					 println cmd
					 process=cmd.execute()
					 process.in.eachLine{line->if(line.contains(baseVersion)){println line}}
				</groovy>
			</then>
		</if>
		<if>
			<equals arg1="${os.family}" arg2="windows"/>
			<then>
				<echo message="sorry did not implement"/>
			</then>
		</if>
	</target>
	<target name="patch:max-tag-version" depends="patch:init">
		<osfamily property="os.family"/>
		<if>
			<equals arg1="${os.family}" arg2="unix"/>
			<then>
				<groovy>
					 List versionList=properties["patching.version"].split("\\.")
					 String majorVersion=versionList[0]
					 String minorVersion=versionList[1]
					 Integer patchVersion=versionList[2].toInteger()
					 String baseVersion = majorVersion + "." + minorVersion 
					 String cmd= "svn list https://gforge.nci.nih.gov/svnroot/automation/tags"
					 Integer maxVersion=0
					 process=cmd.execute()
					 process.in.eachLine{line->
					 if(line.contains(baseVersion))
					 {
					 m = line =~ /(^.*)\.(\d+)\//
					 if (m.matches())
					 {
					 junk = m.group(1)
					 curPatchVersion=m.group(2).toInteger()
					 if( curPatchVersion > maxVersion) {maxVersion=curPatchVersion}
					 }
					 }
					 }
					 if (maxVersion > patchVersion)
					 {
					 String latestVersion = majorVersion + "." + minorVersion + "." + maxVersion
					 println "WARNING - There is a newer patch version ${latestVersion}"
					 if(properties["patching.version"] != "true")
					 {
					 println "BUILD FAILED - To proceed with this version run the build with -Dpatch.force=true on your command line"
					 System.exit(2)
					 }
					 }
				</groovy>
			</then>
		</if>
		<if>
			<equals arg1="${os.family}" arg2="windows"/>
			<then>
				<echo message="sorry did not implement"/>
			</then>
		</if>
	</target>
	<target name="patch:create-branch">
		<property name="svn.automation.base.url" value="https://gforge.nci.nih.gov/svnroot/automation"/>
		<property name="svn.automation.previous.tag.url" value="${svn.automation.base.url}/tags/automation-${patching.version}"/>
		<property name="svn.automation.new.branch.url" value="${svn.automation.base.url}/branches/automation-${patched.version}"/>
		<echo message="svn.automation.previous.tag.url - ${svn.automation.previous.tag.url}"/>
		<echo message="svn.automation.new.branch.url - ${svn.automation.new.branch.url}"/>

		<!--
		<svn username="${new.svn.username}" password="${new.svn.password}" javahl="false" svnkit="true">
			<copy srcUrl="${svn.automation.previous.tag.url}" destURL="${svn.automation.new.branch.url}" message="Created by release manager patch:dev target"/>
		</svn>
		-->
	</target>
	<target name="patch:checkout-branch">
		<property name="svn.automation.new.branch.dir" location="${target.dir}/automation-${patched.version}"/>
		<mkdir dir="${svn.automation.new.branch.dir}"/>
		<echo message="svn.automation.new.branch.dir - ${svn.automation.new.branch.dir}"/>
		<!--
		<svn username="${new.svn.username}" password="${new.svn.password}" javahl="false" svnkit="true">
			<checkout srcUrl="${svn.automation.new.branch.url}" destURL="${svn.automation.new.branch.dir}"/>
		</svn>
		-->
	</target>
</project>
