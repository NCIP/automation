<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: build.xml 4839 2008-05-21 14:45:51Z zengje $
$HeadURL: http://gforge.nci.nih.gov/svnroot/ncia/trunk/software/build.xml $
-->
<project name="releasemanager-build" default="release:project" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>
	<description>
		This file is used to release the BDA project. The process include checking out automation on the given revision number and build the bda-build-uils.zip and branch and tag.
	</description>

	<!-- Property file related properties and tasks -->
	<property name="project.name" value="bda_release"/>
	<property environment="env" />	
	
	<property file="release.properties" />


	
	<property name="global.ivy.settings.file" location="common/ivysettings.xml" />

	<property name="bda.utils.filename" value="bda-build-utils" />
	<property name="automation.resource.dir" value="resource" />


	<property name="working.dir" value="${basedir}/working"/>
	<property name="lib.dir" value="${working.dir}/lib" />


	<!-- retrive ivy files then retrieve bda files and librarires -->
	<property name="bda-download.dir" location="${working.dir}/bda-download" />
	<property name="bda-utils.dir" value="${working.dir}/bda-utils" />	
	<property name="bda-download.file" value="bda-ivy-build.xml" />
	<mkdir dir="${bda-download.dir}" />
	<property name="bda-download.src.url" value="http://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-download/${bda-download.file}" />
	<get src="${bda-download.src.url}" dest="${bda-download.dir}/${bda-download.file}" />
	<ant inheritAll="false" inheritRefs="false" antfile="${bda-download.file}" target="retrieve-bda" dir="${bda-download.dir}">
		<property name="bda.version" value="${bda.version}" />
		<property name="bda-utils.dir" location="${bda-utils.dir}" />
		<property name="lib.dir" location="${lib.dir}" />
	</ant>
	
	<!-- Paths -->
	<path id="project.classpath">
		<fileset dir="${lib.dir}">
			<include name="simian-2.2.24.jar" />
			<include name="ivy-core-2.0.0-beta2.jar" />
			<include name="ivy-2.0.0-beta2.jar" />
		</fileset>
	</path>

	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>


	<!-- Includes- include BDA marcos -->
	<import file="${bda-utils.dir}/${bda.utils.filename}-${bda.version}.xml" />
	

	<!-- Taskdefs -->
	<taskdef name="svn" classpathref="bda-utils.classpath" classname="org.tigris.subversion.svnant.SvnTask" />
	<taskdef name="xmlconfig" classpathref="bda-utils.classpath" classname="com.xmlconfig.anttask.XmlConfig"  />

	<!-- Targets -->
	<target name="release:project" depends="svn:checkout,release:copy-rename,svn:checkin,release:create-branch-tag,release:update-bda-ivyfiles,release:mail-teams">
		<echo message="Released BDA revision '${release.version}' and '${next.beta.release.version}'. The beta version '${next.beta.release.version}' is in development and is not supported. " />
	</target>



	<target name="svn:checkout" depends="svn-scorch">	
		<svn username="${svn.username}" password="${svn.password}">
			<checkout url="${svn.project.url}" revision="HEAD" destPath="${svn.local.checkout}" />
		</svn>
	</target>

	<target name="svn:automation:checkout" depends="svn-scorch,svn:ivy:checkout">	
		<svn username="${svn.username}" password="${svn.password}">
			<checkout url="${svn.automation.url}/${svn.automation.project}" revision="${default.automation.revision}" destPath="${svn.automation.checkout}" />
		</svn>	
	</target>
	<target name="svn:ivy:checkout" depends="svn-scorch">	
		<svn username="${svn.username}" password="${svn.password}">
			<checkout url="${svn.automation.url}/${svn.ivy.project}" revision="${default.automation.revision}" destPath="${svn.ivy.checkout}" />
		</svn>	
	</target>
	
	<target name="svn-scorch">
		<echo message="Scorching local SVN working directory ${svn.local.checkout}..." />
		<delete dir="${svn.local.checkout}" />
		<delete dir="${svn.automation.checkout}" />
		<delete dir="${svn.ivy.checkout}" />
		<mkdir dir="working"/>
	</target>

	<target name="release:copy-rename" depends="release-manager:get-latest-automation">
		<copy todir="${svn.local.checkout}/${next.beta.release.version}">
			<fileset dir="${svn.local.checkout}/${current.beta.release.version}"/>
		</copy>

		<copy todir="${svn.local.checkout}/${release.version}" >
			 <fileset dir="${svn.local.checkout}/${current.beta.release.version}"/>
		</copy>


		<move file="${svn.local.checkout}/${release.version}/${bda.utils.filename}-${current.beta.release.version}.xml" tofile="${svn.local.checkout}/${release.version}/${bda.utils.filename}-${release.version}.xml"/>
		<move file="${svn.local.checkout}/${release.version}/${bda.utils.filename}-${current.beta.release.version}.zip" tofile="${svn.local.checkout}/${release.version}/${bda.utils.filename}-${release.version}.zip"/>

		<xmlconfig in="${svn.local.checkout}/${release.version}/ivy.xml" verbose="false">			
			<update path="//ivy-module/info/@revision" value="${release.version}" />			
		</xmlconfig>

		
		<move file="${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${current.beta.release.version}.xml" tofile="${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${next.beta.release.version}.xml"/>
		<move file="${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${current.beta.release.version}.zip" tofile="${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${next.beta.release.version}.zip"/>
		
		<xmlconfig in="${svn.local.checkout}/${next.beta.release.version}/ivy.xml" verbose="false">
			<update path="//ivy-module/info/@revision" value="${next.beta.release.version}" />
		</xmlconfig>
		<!--
		<delete dir="${svn.local.checkout}/${previous.beta.release.version}"/>
	-->				
	</target>

	<target name="release-manager:get-latest-automation" depends="svn:automation:checkout,svn:checkout">
		<echo message="cp ${svn.automation.checkout}/${bda.utils.filename}.xml ${svn.local.checkout}/${current.beta.release.version}/${bda.utils.filename}-${current.beta.release.version}.xml"/>
		<copy file="${svn.automation.checkout}/${bda.utils.filename}.xml" tofile="${svn.local.checkout}/${current.beta.release.version}/${bda.utils.filename}-${current.beta.release.version}.xml" overwrite="true"/>
		

		<delete file="${svn.local.checkout}/${current.beta.release.version}/${bda.utils.filename}-${current.beta.release.version}.zip"/>
		<zip destfile="${svn.local.checkout}/${current.beta.release.version}/${bda.utils.filename}-${current.beta.release.version}.zip">
			<zipfileset dir="${svn.automation.checkout}/${automation.resource.dir}" prefix="resource" />
		</zip>

		<copy file="${svn.automation.checkout}/ivy.xml" tofile="${svn.local.checkout}/${current.beta.release.version}/ivy.xml" overwrite="true"/>

	</target>

	<target name="release:get-latest-automation" depends="svn:automation:checkout,svn:checkout">
		<echo message="cp ${svn.automation.checkout}/${bda.utils.filename}.xml ${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${next.beta.release.version}.xml"/>
		<copy file="${svn.automation.checkout}/${bda.utils.filename}.xml" tofile="${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${next.beta.release.version}.xml" overwrite="true"/>
		

		<delete file="${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${next.beta.release.version}.zip"/>
		<zip destfile="${svn.local.checkout}/${next.beta.release.version}/${bda.utils.filename}-${next.beta.release.version}.zip">
			<zipfileset dir="${svn.automation.checkout}/${automation.resource.dir}" prefix="resource" />
		</zip>

		<copy file="${svn.automation.checkout}/ivy.xml" tofile="${svn.local.checkout}/${next.beta.release.version}/ivy.xml" overwrite="true"/>
	</target>


	<target name="release:beta" depends="release:get-latest-automation,svn:automation:checkin">

	</target>

	<target name="release:create-branch-tag" depends="svn:automation:checkout,svn:checkout">
		<svn username="${svn.username}" password="${svn.password}">			
			<copy srcUrl="${svn.automation.url}" destUrl="${svn.automation.branchurl}" message="create a branch for release ${release.version}" revision="${default.automation.revision}"/>
			<copy srcUrl="${svn.automation.url}" destUrl="${svn.automation.tagurl}" message="create a tag for release ${release.version}" revision="${default.automation.revision}"/>
		</svn>
	</target>


	<target name="svn:checkin">		
		<svn username="${svn.username}" password="${svn.password}">		
			<add dir="${svn.local.checkout}/${release.version}"/>
			<add dir="${svn.local.checkout}/${next.beta.release.version}"/>
			<!--
			<delete dir="${svn.local.checkout}/${previous.current.beta.release.version}"/>
			-->
			<commit message="Latest BDA revision ${release.version} and beta revision ${next.beta.release.version}" dir="${svn.local.checkout}"/>
		</svn>	
	</target>


	<target name="svn:automation:checkin">	
		<svn username="${svn.username}" password="${svn.password}">		
			<commit message="Latest BDA revision " dir="${svn.local.checkout}/${next.beta.release.version}"/>
		</svn>	
	</target>

	<target name="release:update-bda-ivyfiles" depends="svn:automation:checkout">	
		<xmlconfig in="${svn.ivy.checkout}/bda-ivy-build.xml" verbose="false">
			<update path="//project/property[@name='bda.version']/@value" value="${release.version}" />
		</xmlconfig>

		<zip destfile="${basedir}/working/bda-download.zip">
			<zipfileset dir="${svn.ivy.checkout}" />
		</zip>

		<svn username="${svn.username}" password="${svn.password}">			
			<commit message="Latest BDA released revision " dir="${svn.ivy.checkout}"/>
		</svn>	
	</target>
	
	<target name="release:post-release">	
		<delete dir="${bda-utils.dir}" />
		<delete dir="${lib.dir}" />
		<delete file="${basedir}/${automation.ivy}/bda-ivy-build.xml" />
		<delete file="${basedir}/${automation.ivy}/ivy-bda.xml" />
		<delete file="${basedir}/${automation.ivy}/ivy-bda-settings.xml" />
	</target>
	

	<target name="release:mail-teams">	
		<mail mailhost="${mail.server.host}" mailport="${mail.server.port}"  tolist="${tolist}" subject="BDA ${release.version} released">
			<from address="${fromaddress}"/>						
			<message>Released BDA revision '${release.version}' and '${next.beta.release.version}'. The beta version '${next.beta.release.version}' is in development and is not supported. </message>
		</mail>	
	</target>

	<target name="update:wikidocs" description="Updates the wiki doc Flash XML">
	   <get src="${svn.wikidocs.url}/bda-wiki-home.template" dest="${svn.local.checkout}/bda-wiki-home.template" verbose="on" />
		<filterset id="embedded.filterset">
			<filter token="bda.version" value="${bda.version}"/>
			<filter token="bda.release.date" value="${bda.release.date}"/>
		</filterset>
		<copy todir="../../docs/wiki/flash/resources" filtering="true">
		  <fileset dir="${svn.local.checkout}">
			<include name="**/*"/>
	      </fileset>
		  <filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${basedir}/release.properties"/>
			</filterset>
		</copy>
		<move file="../../docs/wiki/flash/resources/bda-wiki-home.template" tofile="../../docs/wiki/flash/resources/bda-wiki-home.xml"/>
		<delete file="../../docs/wiki/flash/resources/bda-wiki-home.template" quiet="true" />
		<!-- TODO: Need to check in local changes to SVN repository -->
	</target>

	<target name="svn:templates:checkout" depends="svn-scorch,svn:ivy:checkout">	
		<svn username="${svn.username}" password="${svn.password}">
			<checkout url="${svn.automation.url}/${svn.templates.project}" revision="${default.automation.revision}" destPath="${svn.automation.checkout}/${svn.templates.project}" />
		</svn>	
	</target>
	<target name="release:templates" depends="svn:checkout,svn:templates:checkout">
		<delete file="${svn.local.checkout}/${release.version}}/bda-templates-${release.version}.zip"/>
		<zip destfile="${svn.local.checkout}/${release.version}/bda-templates-${release.version}.zip" >
			<zipfileset dir="${svn.automation.checkout}/${svn.templates.project}/software/build" prefix="build"/>
			<zipfileset dir="${svn.automation.checkout}/${svn.templates.project}/software/common" prefix="common"/>
		</zip>
	</target>

</project>
