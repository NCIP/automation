<?xml version="1.0" encoding="utf-8" ?>
<!-- bda-build-template version 1.1.1  -->
<!--
$Id: build.xml 1749 2009-06-10 12:44:46Z saksass $
$HeadURL: https://ncisvn.nci.nih.gov/svn/automation/trunk/software/bda-build-template/software/build/build.xml $
-->

<project name="build-bda-template" default="build:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
	<description>
		This build file is part of the bda-build-template project.  This is the master build file for the project.  It should be placed in project/software/.  This script wrappers sub projects to build, test and inspect code.  Additionally this project manges creation of distributions and deployment locally or remotely.  Deployments will call the install.xml from the distribution to install or upgrade the application.  Lastly this script will run include targets that require manipulation of containers (selenium tests because they require starting the application server container (and require a fully deployed application which this process is responsible for). This build script assumes two sub-projects sub-project and sub-project-api. The API targets are commented out and can be removed if not needed.  Also support for both tomcat and jboss download, install and configure are included.  These scripts require Java, Ant, Database and SVN to work.
	</description>

	<!-- Property file related properties and tasks -->
	<property environment="env" />
	<!-- The project.properties stores properties that are shared between both build.xml and install.xml. Typically properties that are related to the distribution directories, or files. -->
	<property file="local.properties" />
	<property file="project.properties" />
	<property file="sub-projects.properties" />
	<property name="properties.file" value="install.properties"/>
	<echo message="Using properties file of ${properties.file}." />
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail." />

	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2" />
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2" />
	<property file="${properties.file}" />

	<!-- Set application.base.path based on platform -->
	<condition property="application.base.path" value="${application.base.path.linux}">
		<or>
		<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="application.base.path" value="${application.base.path.windows}">
		<os family="windows" />
	</condition>
	<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
	<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>


	<!-- added for remote deployments since file is copied to root of install dir -->
	<basename property="properties.file.name" file="${properties.file}" />

	<!-- BDA standard structure -->
	<property name="build.dir" location="." />
	<property name="software.dir" location=".." />
	<property name="common.dir" location="${software.dir}/common" />
	<property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />
	<property name="target.dir" location="${software.dir}/target" />
	<property name="bda-download.dir" location="${common.dir}/bda-download" />
	<property name="ivy.settings.dir" location="${common.dir}/ivy" />
	<property name="lib.dir" location="${target.dir}/lib" />
	<property name="temp.dir" location="${target.dir}/temp" />
	<property name="reports.dir" location="${target.dir}/reports" />
	<property name="bda-utils.dir" location="${target.dir}/bda-utils" />
	<property name="log.dir" location="${target.dir}/logs" />
	<property name="dist.dir" location="${target.dir}/dist" />
	<property name="download.dir" location="${target.dir}/download" />
	<property name="pt.dir" location="${target.dir}/persistent-transient" />
	<property name="working.dir" location="${target.dir}/working" />
	<property name="cacore-sdk.dir" location="${target.dir}/${cacore-sdk.binaries.relative.dir}"/>
	<property name="checkout.base.dir" location="${target.dir}/checkouts"/>


	<!-- Ivy Related props -->
	<property name="ivy.settings.file" value="ivy-settings.xml" />


	<!-- Distribution Structure properties, used to copy files into the distribution area.
       		Use project.propertie relative dir names becasue they are used by install also-->
	<property name="dist.exploded.dir" value="${dist.dir}/exploded" />
	<property name="tools.dist.dir" value="${dist.exploded.dir}/${tools.dist.relative.dir}" />
	<property name="common.dist.dir" value="${dist.exploded.dir}/${common.dist.relative.dir}" />
	<property name="jboss-conf.dist.dir" value="${dist.exploded.dir}/${jboss-conf.dist.relative.dir}" />

	<!-- Where to write files retrieved by get, into the distribution area.  The file names come from project.properties  -->
	<property name="jboss.dest.file" value="${download.dir}/${jboss.binaries.file}" />
	<property name="jbosscp.dest.file" value="${download.dir}/${jbosscp.binaries.file}" />
	<property name="tomcat.dest.file" value="${download.dir}/${tomcat.binaries.file}" />
	<property name="cagrid-libs.dest.file" value="${download.dir}/${cagrid-libs.binaries.file}" />
	<property name="cagrid-base-war.dest.file" value="${download.dir}/${cagrid-base-war.binaries.file}" />


	<!-- Default install time targets passed by deploy targets to the installer, can be overridden by being set on the command line if different target is desitred.  -->
	<property name="install.target" value="install" />
	<property name="upgrade.target" value="upgrade" />

	<!-- retrive ivy.jar.files then retrieve bda files and librarires -->
	<property name="commonlibrary.dir" value="" />
	<property name="bda-download.file" value="bda-ivy-2.0.0-build.xml" />
	<ant inheritAll="false" inheritRefs="false" antfile="${bda-download.file}" target="retrieve-bda" dir="${bda-download.dir}">
		<property name="bda.version" value="${bda.version}" />
		<property name="bda-utils.dir" location="${bda-utils.dir}" />
		<property name="lib.dir" location="${lib.dir}" />
		<property name="software.dir" location="${software.dir}" />
		<property name="commonlibrary.dir" location="${commonlibrary.dir}" />
		<property name="target.dir" location="${target.dir}"/>
	</ant>
	
	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="ivy.classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- Task definitions -->
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath" />
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils.classpath"/>

	<!-- Includes- include BDA marcos -->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<!-- Start logging -->
	<mkdir dir="${log.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${log.dir}/install-${install.time}.log" action="start" />

	<!-- Fix first time build issue -->
	<mkdir dir="${download.dir}"/>

	<!-- Targets -->
	<target name="diagnostics" description="diagnostics">
		<echoproperties />
		<diagnostics />
	</target>

	<target name="clean">
		<delete dir="${dist.dir}" />
		<delete dir="${temp.dir}" />
	</target>

	<target name="init:sub-project">
		<for list="${sub-project.prefix.list}" param="sub-project.prefix" delimiter=",">
			<sequential>
				<property name="@{sub-project.prefix}.co.dir" location="${checkout.base.dir}/${@{sub-project.prefix}.co.relative.dir}"/>
				<echo message="@{sub-project.prefix}.co.dir = ${@{sub-project.prefix}.co.dir}"/>
				<property name="@{sub-project.prefix}.base.dir" location="${@{sub-project.prefix}.co.dir}/${@{sub-project.prefix}.build.relative.dir}"/>
				<echo message="@{sub-project.prefix}.base.dir = ${@{sub-project.prefix}.base.dir}"/>
				<property name="@{sub-project.prefix}.dist.dir" location="${dist.exploded.dir}/sub-projects/${@{sub-project.prefix}.dist.relative.dir}" />
				<echo message="@{sub-project.prefix}.dist.dir = ${@{sub-project.prefix}.dist.dir}"/>
				<mkdir dir="${@{sub-project.prefix}.dist.dir}"/>
			</sequential>
		</for>
	</target>
	<target name="init" depends="init:sub-project" description="Sets up build are and initalizes variables">
		<echo message=" ______   ______   _______ " />
		<echo message="(____  \ (______) (_______)" />
		<echo message=" ____)  ) _     _  _______ " />
		<echo message="|  __  ( | |   | ||  ___  |" />
		<echo message="| |__)  )| |__/ / | |   | |" />
		<echo message="|______/ |_____/  |_|   |_|" />
		<mkdir dir="${target.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.exploded.dir}" />
		<mkdir dir="${common.dist.dir}" />
		<mkdir dir="${tools.dist.dir}" />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${download.dir}" />
		<mkdir dir="${pt.dir}" />
		<mkdir dir="${checkout.base.dir}"/>

		<available file="${jboss.dest.file}" property="jboss.tools.exists" />
		<available file="${jbosscp.dest.file}" property="jbosscp.tools.exists" />
		<available file="${tomcat.dest.file}" property="tomcat.tools.exists" />
		<available file="${cagrid-libs.dest.file}" property="cagrid-libs.tools.exists" />
		<available file="${cagrid-base-war.dest.file}" property="cagrid-base-war.tools.exists" />
		<!-- If jboss is required to build, then check for jboss in jboss.home, then check for in jboss in working directory, if not found then download it into this that directory.  If found at any point set local.jboss.home to where it is found.  This can be passed to sub-projects so then can compile code against distribution.  This is especially important on AntHillPro server which will not have jboss present, thus will have to use a copy in the working area.  This also makes it easier to start the project, if the developer does not yet have jboss installed, build will download it and install it so build can proceed. -->
		<if>
			<equals arg1="${require.jboss}" arg2="true" />
			<then>
				<available file="${jboss.home}/lib/commons-httpclient.jar" property="rt.jboss.exists" />
				<if>
					<isset property="rt.jboss.exists" />
					<then>
						<property name="local.jboss.home" location="${jboss.home}" />
						<echo message="JBOSS_HOME exists ${jboss.home}" />
					</then>
					<else>
						<property name="local.jboss.home" location="${pt.dir}/${jboss.binaries.relative.dir}" />
						<available file="${local.jboss.home}/lib/commons-httpclient.jar" property="local.jboss.exists" />
						<echo message="JBOSS_HOME does not exist checking for LOCAL_JBOSS_HOME ${local.jboss.home}" />
						<if>
							<not>
								<isset property="local.jboss.exists" />
							</not>
							<then>
								<echo message="LOCAL_JBOSS_HOME not found downloading." />
								<antcall target="dist:tools:retrieve:jboss" />
								<java jar="${tools.dir}/${jboss.binaries.file}" fork="true">
									<arg line="-installGroup ejb3 installpath=${local.jboss.home}" />
								</java>
							</then>
							<else>
								<echo message="LOCAL_JBOSS_HOME found ${local.jboss.home}" />
							</else>
						</if>
					</else>
				</if>

			</then>
		</if>
	</target>

	<target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="init" >
		<for list="${sub-project.prefix.list}" param="sub-project.prefix" delimiter=",">
			<sequential>
				<echo message="checking out ${@{sub-project.prefix}.url} to ${@{sub-project.prefix}.co.dir}"/>
				<svn-co
					svn.checkout.url="${@{sub-project.prefix}.url}"
					svn.checkout.dir="${@{sub-project.prefix}.co.dir}"
					delete="false"
					/>

				<exec osfamily="unix" executable="ant" dir="${@{sub-project.prefix}.base.dir}" failonerror="true">
					<arg line="-Ddist.exploded.dir=${@{sub-project.prefix}.dist.dir} ${@{sub-project.prefix}.build.target}" />
				</exec>                                         
				<exec osfamily="windows" executable="ant.bat" dir="${@{sub-project.prefix}.base.dir}" failonerror="true">
					<arg line="-Ddist.exploded.dir=${@{sub-project.prefix}.dist.dir} ${@{sub-project.prefix}.build.target}" />
				</exec>                                         
			</sequential>
		</for>
		<!-- Add dependency for each sub-project built above -->
	</target>

	<target name="dist" description="Makes all distributions: installer, upgrader and source" depends="
		build:all,
		dist:installer,
		dist:upgrader,
		dist:src
		">
	</target>

	<target name="dist:src" description="Makes source distribution">
		<!-- Add tasks here to zip up src into a distribution, may require some additoinal properties for distribution name" -->
	</target>

	<target name="dist:tools:retrieve" description="Downloads binary applications from commonlibrary repository" depends="
		init,
		dist:tools:retrieve:jboss,
		dist:tools:retrieve:jbosscp,
		dist:tools:retrieve:tomcat,
		dist:tools:retrieve:cagrid
		" >
	</target>

	<target name="dist:tools:retrieve:jbosscp" unless="jbosscp.tools.exists" description="Downloads JBOSS Cumulative Patch from binary repository and verifies checksum">
		<echoproperties prefix="jbosscp"/>
		<if>
			<isset property="jbosscp.src.url"/>
			<then>
				<get src="${jbosscp.src.url}" dest="${jbosscp.dest.file}" />
			</then>
			<else>
				<echo message="jbosscp.src.url not set skipping download of jboss cumulative patch"/>
			</else>
		</if>
	</target>
	<target name="dist:tools:retrieve:jboss" unless="jboss.tools.exists" description="Downloads JBOSS from binary repository and verifies checksum">
		<get src="${jboss.src.url}" dest="${jboss.dest.file}" />
		<get src="${jboss.src.url}.MD5" dest="${jboss.dest.file}.MD5" />
		<checksum file="${jboss.dest.file}" verifyProperty="jboss.cksum.ok" />
		<if>
			<equals arg1="${jboss.cksum.ok}" arg2="true" />
			<then>
				<echo message="Downloaded jboss sucessfully" />
			</then>
			<else>
				<fail message="Failed to download jboss file sucessfully." />
			</else>
		</if>
	</target>

	<target name="dist:tools:retrieve:cagrid" unless="cagrid-libs.tools.exists" description="Downloads JBOSS from binary repository and verifies checksum">
		<get src="${cagrid-libs.src.url}" dest="${cagrid-libs.dest.file}" />
		<get src="${cagrid-base-war.src.url}" dest="${cagrid-base-war.dest.file}" />
	</target>

	<target name="dist:tools:retrieve:jboss-bindings"  description="Downloads JBOSS bindings filefrom binary repository and verifies checksum">
		<get src="${jboss-bindings.src.url}" dest="${dist.exploded.dir}/${jboss-bindings.file}" />
	</target>

	<target name="dist:tools:retrieve:tomcat" unless="tomcat.tools.exists" description="Downloads TOMCAT from binary repository and verifies checksum">
		<get src="${tomcat.src.url}" dest="${tomcat.dest.file}" />
		<get src="${tomcat.src.url}.MD5" dest="${tomcat.dest.file}.MD5" />
		<checksum file="${tomcat.dest.file}" verifyProperty="tomcat.cksum.ok" />
		<if>
			<equals arg1="${tomcat.cksum.ok}" arg2="true" />
			<then>
				<echo message="Downloaded tomcat sucessfully" />
			</then>
			<else>
				<fail message="Failed to download tomcat file sucessfully." />
			</else>
		</if>
	</target>


	<target name="dist:installer:prep" depends="build:all,dist:tools:retrieve,dist:tools:retrieve:jboss-bindings" description="Copies artifacts not generated by sub-project builds into the install distribution area">
		<!-- DB will be handeld completely in sub-projects -->
		<dist-prep />
		<copy todir="${tools.dist.dir}">
			<fileset dir="${download.dir}">
				<include name="cagrid*"/>
			</fileset>
		</copy>
		<echo message="Cleaning up binaries from sub-project distributions"/>
		<delete>
			<fileset dir="${dist.exploded.dir}/sub-projects">
				<include name="**/tools/*jboss*.zip*"/>
				<include name="**/tools/*jems*.jar*"/>
				<include name="**/tools/*caCORE*.zip*"/>
				<include name="**/tools/*cagrid*.zip*"/>
				<include name="**/tools/*tomcat*.zip*"/>
			</fileset>
		</delete>
	</target>

	<target name="dist:installer" depends="dist:installer:prep" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${sub-project.install.zip.file}" />
		<!-- Set environment name to external -->
		<delete file="${dist.exploded.dir}/upgrade.properties"/>
		<replaceregexp file="${dist.exploded.dir}/install.properties" byline="true" match="^(env.name)=.*" replace="\1=external" />
		<obfuscate-properties-file
			properties.file="${dist.exploded.dir}/install.properties"
			required.property.list="application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname"
			optional.property.list="ldap.url,ldap.basedn"
			delete.property.list="exclude.jboss.backup"
			/>
		<zip destfile="${dist.dir}/${suite.install.zip.file}" basedir="${dist.exploded.dir}" />
	</target>


	<target name="dist:upgrader:prep" depends="build:all,dist:tools:retrieve" description="Copies artifacts not generated by sub-project builds into the install distribution area">
		<dist-prep
			copy.tools.flag="Y"
			default.target="upgrade"
			/>
		<!-- Clean up binaries from sub-project dist area, binaries will go with suite -->
		<delete>
			<fileset dir="${dist.exploded.dir}/sub-projects">
				<include name="**/tools/*jboss*.zip"/>
				<include name="**/tools/*jems*.jar"/>
				<include name="**/tools/*caCore*.zip"/>
				<include name="**/tools/*cagrid*.zip"/>
				<include name="**/tools/*tomcat*.zip"/>
			</fileset>
		</delete>
	</target>

	<target name="dist:upgrader" depends="dist:upgrader:prep" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${sub-project.upgrade.zip.file}" />
		<!-- Set environment name to external -->
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="upgrade.properties" />
			</fileset>              
		</copy>         
		<delete file="${dist.exploded.dir}/install.properties"/>
		<replaceregexp file="${dist.exploded.dir}/upgrade.properties" byline="true" match="^(env.name)=.*" replace="\1=external" />

		<obfuscate-properties-file
			properties.file="${dist.exploded.dir}/upgrade.properties"
			comment.property.list="application.base.path.windows,application.base.path.linux,jboss.relative.path,tomcat.relative.path"
			uncomment.property.list="application.base.path,tomcat.home,jboss.home"
			required.property.list="application.base.path,jboss.home,jboss.server.name,tomcat.home"
			optional.property.list=""
			delete.property.list=""
			/>
		<!--
		<replaceregexp file="${dist.exploded.dir}/build.xml" byline="true" match="(&lt;property name=&quot;properties.file&quot;\s+value=&quot;).*(&quot;\s*\/&gt;)" replace="\1upgrade.properties\2" />
		-->
		<zip destfile="${dist.dir}/${suite.upgrade.zip.file}" basedir="${dist.exploded.dir}" />

	</target>

	<target name="deploy:local:install" depends="build:all,dist:installer:prep" description="Installs and configures the application and required binaries and re-creates the datbase  on the local machine. Used for developer desktops and ci environments.">
		<!--
		  * Requires a database installation.
		  * Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).
		  * If you want properties to be used at install time they must be included in a proeprties file.
		  * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install.
		  * This target will use differnt properties based on linux (linux-install.properties) or windows (windows-install.properties) installs.
		  * It only supports using those properties files for now, so if you want to change install time properites edit these files.
		-->
		<copy todir="${dist.exploded.dir}"> 
			<fileset dir="${build.dir}">    
				<include name="*.properties" />         
			</fileset>                      
		</copy>                 

		<!-- work around for ant bug where <ant/> calls recieve command line options from ant command line, this causes properties file passed from deploy to the install component to pass the properties file value onto the sub-projects even though you specify the <property/> inside the body of the <ant/> task.  They need a different property so by injecting the properties.file variable into local.properties we can pass it from deploy to install without it being on the command line. -->
		<echo file="${dist.exploded.dir}/local.properties" append="true" message="properties.file=${properties.file}"/>
		<exec osfamily="unix" executable="ant" dir="${dist.exploded.dir}" failonerror="true">
			<!-- use alternate properties file since default has replace values -->
			<!-- force reinstall of database and jboss without prompting -->
			<arg line="-Dforce.reinstall=true ${install.target}" />
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${dist.exploded.dir}" failonerror="true">
			<!-- use alternate properties file since default has replace values -->
			<!-- force reinstall of database and jboss without prompting -->
			<arg line="-Dforce.reinstall=true ${install.target}" />
		</exec>

	</target>

	<target name="deploy:local:upgrade" depends="build:all,dist:upgrader:prep" description="Upgrades and configures the application and database  on the local machine. Used for developer desktops and ci environments.">
		<!--
		  * Requires a database installation.
		  * Will use the target from install.xml specified in ${upgrade.target} (defaults to install unless passed in on command line).
		  * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install, if you want properties to be used at install time they must be included in a proeprties file.
		  * This target will use differnt properties based on linux (linux-upgrade.properties) or windows (windows-upgrade.properties) installs.
		  * It only supports using those properties files for now, so if you want to change install time properites edit these files.
		-->
		<copy todir="${dist.exploded.dir}"> 
			<fileset dir="${build.dir}">    
				<include name="*.properties" />         
			</fileset>                      
		</copy>                 

		<echo file="${dist.exploded.dir}/local.properties" append="true" message="properties.file=${properties.file}"/>
		<exec osfamily="unix" executable="ant" dir="${dist.exploded.dir}" failonerror="true">
			<!-- use alternate properties file since default has replace values -->
			<!-- force reinstall of database and jboss without prompting -->
			<arg line="-Dforce.reinstall=true ${upgrade.target}" />
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${dist.exploded.dir}" failonerror="true">
			<!-- use alternate properties file since default has replace values -->
			<!-- force reinstall of database and jboss without prompting -->
			<arg line="-Dforce.reinstall=true ${upgrade.target}" />
		</exec>

	</target>

	<target name="deploy:remote:install" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" depends="
		build:all,
		dist:installer
		">
		<!--
		  * Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).
		  * Requires specifying -Dproperties.file=@file@ on the command line to point installer to correct enviornment to install into.
		  * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install, if you want properties to be used at install time they must be included in a proeprties file.
		-->
		<!-- Call macro to deploy files on desired server -->
		<deploy-files dist.file="${suite.install.zip.file}" />
		<!-- copy of the sub-project.proeprties file -->
		<remote-scp
			remoteScpFileToCopy="${build.dir}/sub-projects.properties"
			remoteScpToDir="${ssh.server.username}@${ssh.server.hostname}:${remote.dir}"
			/>
		<!-- Copy over all the sub-project property files as specified in ${properties.file} -->
		<for list="${sub-project.prefix.list}" param="sub-project.prefix" delimiter=",">
			<sequential>
				<remote-scp
					remoteScpFileToCopy="${@{sub-project.prefix}.properties.location}"
					remoteScpToDir="${ssh.server.username}@${ssh.server.hostname}:${remote.dir}"
					/>
			</sequential>
		</for>
		<!-- SSH to machine ant run ant command line to install application -->
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; echo 'proeprties.file=${properties.file}' >> local.properties; ant -Dforce.reinstall=true ${install.target}" />
	</target>

	<target name="deploy:remote:upgrade" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" depends="
		build:all,
		dist:upgrader
		">
		<!--
		  * Will use the target from install.xml specified in ${upgrade.target} (defaults to upgrade unless passed in on command line).
		  * Requires specifying -Dproperties.file=@file@ on the command line to point installer to correct enviornment to install into.
		  * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install, if you want properties to be used at install time they must be included in a proeprties file.
		-->
		<!-- Call macro to deploy files on desired server -->
		<deploy-files dist.file="${suite.upgrade.zip.file}" />
		<!-- copy of the sub-project.proeprties file -->
		<remote-scp
			remoteScpFileToCopy="${build.dir}/sub-projects.properties"
			remoteScpToDir="${ssh.server.username}@${ssh.server.hostname}:${remote.dir}"
			/>
		<!-- Copy over all the sub-project property files as specified in ${properties.file} -->
		<for list="${sub-project.prefix.list}" param="sub-project.prefix" delimiter=",">
			<sequential>
				<remote-scp
					remoteScpFileToCopy="${@{sub-project.prefix}.properties.location}"
					remoteScpToDir="${ssh.server.username}@${ssh.server.hostname}:${remote.dir}"
					/>
			</sequential>
		</for>
		<!-- SSH to machine ant run ant command line to install application -->
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; echo 'properties.file=${properties.file}' >> local.properties; ant -Dforce.reinstall=true ${upgrade.target}" />
	</target>
</project>
